<?xml version="1.0" encoding="UTF-8"?>

<chapter id="history">

  <title>历史</title>

  <para>历史是一个组件，它可以捕获发生在进程执行中的信息并永久的保存，与运行时数据不同的是，当流程实例运行完成之后它还会存在于数据库中。
  </para>

  <para>有5个历史实体对象:

    <itemizedlist>
      <listitem>
        <para><literal>HistoricProcessInstance</literal>s 包含当前和已经结束的流程实例信息。</para>
      </listitem>
      <listitem>
        <para><literal>HistoricVariableInstance</literal>s 包含最新的流程变量或任务变量。</para>
      </listitem>
      <listitem>
        <para><literal>HistoricActivityInstance</literal>s 包含一个活动(流程上的节点)的执行信息 。</para>
      </listitem>
      <listitem>
        <para><literal>HistoricTaskInstance</literal>s 包含关于当前和过去的（已完成或已删除）任务实例信息。</para>
      </listitem>
      <listitem>
        <para><literal>HistoricDetail</literal>s 包含历史流程实例、活动实例、任务实例的各种信息。</para>
      </listitem>
    </itemizedlist>
  </para>

  <para>由于数据库中保存着历史信息以及正在运行的流程实例信息，就要考虑怎样尽量少的对运行中的流程实例数据进行访问的方式查询这些表来保证执行的性能。
  </para>
  <para>稍后, 这个信息体现在Activiti Explorer。同时它也是报告将生成的信息。
  </para>

  <section id="historyQuery">
    <title>查询历史</title>
    <para>在API中, 提供了对这5种实体的查询方法。类HistoryService 提供了以下几种方法
      <literal>createHistoricProcessInstanceQuery()</literal>, <literal>createHistoricVariableInstanceQuery()</literal>, <literal>createHistoricActivityInstanceQuery()</literal>,
      <literal>createHistoricDetailQuery()</literal> 和 <literal>createHistoricTaskInstanceQuery()</literal>。
    </para>


  <para>下面是一些API中查询历史信息的例子. 这些方法的详细描述可以在 <ulink url="../javadocs/index.html">ZAjavadocs</ulink>中找到, 在包<literal>org.activiti.engine.history</literal> 中</para>
  <section id="historyQueryProcessInstance">
      <title>HistoricProcessInstanceQuery</title>流程实例。
       <para>获取流程定义ID是'XXX'、已经结束、花费时间最长（持续时间最长）的10个<literal>HistoricProcessInstances</literal>
          <programlisting>
historyService.createHistoricProcessInstanceQuery()
  .finished()
  .processDefinitionId("XXX")
  .orderByProcessInstanceDuration().desc()
  .listPage(0, 10);</programlisting>
      </para>
    </section>

  <section id="historyQueryVariableInstance">
      <title>HistoricVariableInstanceQuery</title>
       <para>在ID为'xxx'、已经结束的流程实例中查询所有<literal>HistoricVariableInstances</literal>，并按变量名排序
          <programlisting>
historyService.createHistoricVariableInstanceQuery()
  .processInstanceId("XXX")
  .orderByVariableName.desc()
  .list();</programlisting>
      </para>
    </section>

    <section id="historyQueryActivityInstance">
      <title>HistoricActivityInstanceQuery</title>
       <para>获取所有已经结束的流程定义ID为’XXX'并且类型是'serviceTask'中的最后一个 <literal>HistoricActivityInstance</literal>
  <programlisting>
historyService.createHistoricActivityInstanceQuery()
  .activityType("serviceTask")
  .processDefinitionId("XXX")
  .finished()
  .orderByHistoricActivityInstanceEndTime().desc()
  .listPage(0, 1);</programlisting>
      </para>
    </section>
    <section id="historyQueryDetail">
      <title>HistoricDetailQuery</title>
       <para>下个例子, 获取所有id为123的流程实例中产量的可变更新信息。这个查询只会返回 <literal>HistoricVariableUpdate</literal>s. 注意一些变量名可能包含多个 <literal>HistoricVariableUpdate</literal>
    实体, 每次流程运行时会更新变量。 你可以用 <literal>orderByTime</literal> (变量被更新的时间) 或者 <literal>orderByVariableRevision</literal> (运行更新时变量的版本)来排序查询.
  <programlisting>
historyService.createHistoricDetailQuery()
  .variableUpdates()
  .processInstanceId("123")
  .orderByVariableName().asc()
  .list()</programlisting>
    </para>
   <para>这个例子获取所有流程实例ID为123的流程中，提交任务或者启动流程时的<link linkend="formProperties">form-properties</link> 。 这个查询只会返回 <literal>HistoricFormProperties</literal>s 。
  <programlisting>
historyService.createHistoricDetailQuery()
  .formProperties()
  .processInstanceId("123")
  .orderByVariableName().asc()
  .list()</programlisting>
  </para>

  <para>最后这个例子获取所有在执行ID为123的任务时的变量更新。 返回全部在任务中设置的变量（任务局部变量） <literal>HistoricVariableUpdates</literal> , 不是流程实例变量。</para>
<programlisting>
historyService.createHistoricDetailQuery()
  .variableUpdates()
  .taskId("123")
  .orderByVariableName().asc()
  .list()
  </programlisting>
  <para>
  任务局部变量可以用 <literal>TaskService</literal> 设置或者使用 <literal>DelegateTask</literal>, 在<literal>TaskListener</literal>里设置:
  <programlisting>
taskService.setVariableLocal("123", "myVariable", "Variable value");</programlisting>
  <programlisting>
public void notify(DelegateTask delegateTask) {
  delegateTask.setVariableLocal("myVariable", "Variable value");
}</programlisting>
</para>
    </section>
<section id="historyQueryTaskInstance">
      <title>HistoricTaskInstanceQuery</title>
       <para>获取所有任务中10个花费时间最长（持续时间最长）并已经结束的 <literal>HistoricTaskInstance</literal>s 。
          <programlisting>
historyService.createHistoricTaskInstanceQuery()
  .finished()
  .orderByHistoricTaskInstanceDuration().desc()
  .listPage(0, 10);</programlisting>
      </para>

       <para>获取删除原因包含"无效"，最后分配给用户"kermit"的 <literal>HistoricTaskInstance</literal>s。
          <programlisting>
historyService.createHistoricTaskInstanceQuery()
  .finished()
  .taskDeleteReasonLike("%invalid%")
  .taskAssignee("kermit")
  .listPage(0, 10);</programlisting>
      </para>
    </section>
</section>
  <section id="historyConfig">
    <title>历史配置</title>
	  <para>历史级别可以用编写代码的方法配置, 用枚举类型org.activiti.engine.impl.history.HistoryLevel (或者在5.11之前定义在<literal>ProcessEngineConfiguration</literal>中的常量 <literal>HISTORY_*</literal>):</para>
      <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration
  .createProcessEngineConfigurationFromResourceDefault()
  <emphasis role="bold">.setHistory(HistoryLevel.AUDIT.getKey())</emphasis>
  .buildProcessEngine();
      </programlisting>

      <para>级别可以在配置文件 activiti.cfg.xml 或者在 spring-context中配置:</para>

	  <programlisting>&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration&quot;&gt;
  &lt;property name=&quot;history&quot; value=&quot;audit&quot; /&gt;
  ...
&lt;/bean&gt;</programlisting>

	  <para>历史信息级别可以配置成以下几种:
	  </para>

	  <itemizedlist>
	    <listitem><para><literal>none</literal>: 忽略所有历史存档。这是流程执行时性能最好的状态，但没有任何历史信息可用。 </para></listitem>
	    <listitem><para><literal>activity</literal>: 保存所有流程实例信息和活动实例信息。
	    在流程实例结束时, 最后一个流程实例中的最新的变量值将赋值给历史变量。 不会保存过程中的详细信息。</para></listitem>
	    <listitem><para><literal>audit</literal>: 这个是默认值. 它保存所有流程实例信息,
	    活动信息, 保证所有的变量和提交的表单属性保持同步
	    这样所有用户交互信息都是可追溯的，可以用来审计。</para></listitem>
	    <listitem><para><literal>full</literal>: 这个是最高级别的历史信息存档，同样也是最慢的。  这个级别存储发生在审核以及所有其它细节的信息, 主要是更新流程变量。</para></listitem>
	  </itemizedlist>

     <para><emphasis role="bold">在Activiti 5.11之前, 历史级别都存在数据库中 (表 <literal>ACT_GE_PROPERTY</literal>,属性名为 <literal>historyLevel</literal>). 从Activiti 5.11开始, 这个值不再用，并且从数据库中忽略或者删除掉。
	 这个配置可以在两次启动间修改, 因为是在启动之前修改的，所以不会抛出异常.</emphasis></para>
  </section>

  <section id="historyFormAuditPurposes">
    <title>审计目的的历史</title>

    <para>当<link linkend="historyConfig">配置</link> 在 <literal>audit</literal>级别之上
    。 所有通过
    <literal>FormService.submitStartFormData(String processDefinitionId, Map&lt;String, String&gt; properties)</literal>
    and <literal>FormService.submitTaskFormData(String taskId, Map&lt;String, String&gt; properties)</literal>
    方法提交的属性都会被记录。
    </para>

    <para>表单属性可以通过API查询，如下:</para>

    <programlisting>historyService
      .createHistoricDetailQuery()
      .formProperties()
      ...
      .list();</programlisting>

    <para>上面的例子只有类型为 <literal>HistoricFormProperty</literal>的详细信息会被查询出来。
    </para>

    <para>如果你在调用<literal>IdentityService.setAuthenticatedUserId(String)</literal>提交之前设置了认证用户，那么提交表单的用户将被保存在历史信息中并可以在开始表单中
	使用<literal>HistoricProcessInstance.getStartUserId()</literal>获取，在任务表单中用HistoricActivityInstance.getAssignee()获取。
    </para>

  </section>

</chapter>