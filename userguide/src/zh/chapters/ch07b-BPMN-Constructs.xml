<?xml version="1.0" encoding="UTF-8"?>

<chapter id="bpmnConstructs">
	<title>BPMN 2.0结构</title>

	<para>本章介绍Activiti支持的BPMN 2.0结构，
	以及对BPMN标准的扩展。
</para>

	<section id="bpmnCustomExtensions">

	    <title>自定义扩展</title>

	    <para>
		  BPMN 2.0标准对于各方都是一个好东西。最终用户不用担心会绑死在
		  供应商提供的专有解决方案上。
		  框架，特别是activiti这样的开源框架，可以提供相同功能
		  （甚至是更好的实现），足以和大的供应商媲美。
		  按照BPMN 2.0标准，从大供应商的解决方案迁移到activiti
		  只会经过一个简单而平滑的过程。
	    </para>

	    <para>
		  标准不好的一点是，它常常是不同公司之间大量讨论和妥协的结果。
		  （而且通常是愿景）。
		  作为开发者去阅读流程定义的BPMN 2.0 xml时，有时会感觉
		  用这种结构和方法去做事太麻烦了。
		  因此activiti把简化开发作为最优先的事情，我们会使用一些被称为
		  <emphasis role="bold">'Activiti BPMN扩展'</emphasis>的功能。
		  这些扩展是新的结构或方法来简化对应的结构，
		  它们并不属于BPMN 2.0规范。
	    </para>

	    <para>
		  虽然BPMN 2.0规范清楚的指明了如何开发自定义扩展，
		  但是我们还要确认一下几点：
	      <itemizedlist>
	        <listitem>
	          <para>
			    自定义扩展的前提是
				<emphasis role="bold">总</emphasis>有简单的方法
				转换成<emphasis role="bold">标准方法</emphasis>。
				所以当你决定使用自定义扩展时，不用担心没办法回头。
	          </para>
	        </listitem>
	        <listitem>
	          <para>
			    当使用自定义扩展时，总会清楚的指明使用了
				新的XML元素，属性，等等。
				比如会使用<emphasis role="bold">activiti:</emphasis>命名空间前缀。
	          </para>
	        </listitem>
	        <listitem>
	          <para>
			    这些扩展的目标是最终把它们加入到下一版本的BPMN规范中，
				或者至少可以引起对特定BPMN结构的讨论。
	          </para>
	        </listitem>
	      </itemizedlist>
	    </para>

	    <para>
		  因此无论是是否想要使用自定义扩展，这都取决于你。
		  很多因素会影响决定这个决定（图形编辑器，公司策略，等等）。
		  只是因为我们相信标准里的一些功能可以更简单或更高校，
		  所以才决定提供自定义扩展。请对扩展给予我们（正面或负面）的评价，
		  或者是对自定义扩展的心想法。
		  说不定有一天你的想法就会加入到规范中。
	    </para>

	  </section>

	  <!--

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  													Events

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   -->

	  <section id="bpmnEvents">

	    <title>事件（Event）</title>

	    <para>
		 事件用来表明流程的生命周期中发生了什么事。
		 事件总是画成一个圆圈。

		 在BPMN 2.0中，
		 事件有两大分类：<emphasis>捕获（catching）</emphasis> 或 <emphasis>触发（throwing）</emphasis> 事件。
       <itemizedlist>
         <listitem>
           <para>
             <emphasis role="bold">捕获（Catching）：</emphasis>当流程执行到事件，
			 它会等待被触发。触发的类型是由内部图表或XML中的类型声明来决定的。
			 捕获事件与触发事件在显示方面是根据内部图表是否被填充来区分的（白色的）。
           </para>
         </listitem>
         <listitem>
           <para>
             <emphasis role="bold">触发（Throwing）：</emphasis>当流程执行到事件，
			 会触发一个事件。触发的类型是由内部图表或XML中的类型声明来决定的。
			 触发事件与捕获事件在显示方面是根据内部图表是否被填充来区分的（被填充为黑色）。
           </para>
         </listitem>
       </itemizedlist>

	    </para>

	<!-- //////////////////////////////////////// event definitions introductions -->

	  <section id="eventDefinitions">
	  	<title>事件定义</title>

	  	<para>事件定义决定了事件的语义。如果没有事件定义，这个事件就不做什么特别的事情。
		没有设置事件定义的开始事件不会在启动流程时做任何事情。如果给开始事件添加了一个事件定义
		（比如定时器事件定义）我们就声明了开始流程的事件 &quot;类型 &quot;
		（这时定时器事件监听器会在某个时间被触发）。
	  	</para>

	  </section>

	<!-- //////////////////////////////////////// timer event definitions -->

      <section id="timerEventDefinitions">
          <title>定时器事件定义</title>
          <para>定时器事件是根据指定的时间触发的事件。可以用于
          <link linkend="bpmnTimerStartEvent">开始事件</link>，
              <link linkend="bpmnIntermediateCatchingEvent">中间事件</link>
          或 <link linkend="bpmnTimerBoundaryEvent">边界事件</link></para>

          <para>
		      定时器定义必须下面介绍的一个元素：
              <itemizedlist>
                  <listitem>
                      <para><emphasis role="bold">timeDate</emphasis>。使用 <ulink url="http://en.wikipedia.org/wiki/ISO_8601#Dates">ISO 8601</ulink> 格式指定一个确定的时间，触发事件的时间。示例：

                      <programlisting>
&lt;timerEventDefinition&gt;
    &lt;timeDate&gt;2011-03-11T12:13:14&lt;/timeDate&gt;
&lt;/timerEventDefinition&gt;</programlisting>
                      </para>
                  </listitem>
                  <listitem>
                      <para>
                        <emphasis role="bold">timeDuration</emphasis>。指定定时器之前要等待多长时间，
						<emphasis>timeDuration</emphasis>可以设置为<emphasis>timerEventDefinition</emphasis>的子元素。
						使用<ulink url="http://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</ulink>规定的格式
						（由BPMN 2.0规定）。示例（等待10天）。
                      <programlisting>
&lt;timerEventDefinition&gt;
    &lt;timeDuration&gt;P10D&lt;/timeDuration&gt;
&lt;/timerEventDefinition&gt;</programlisting>

                      </para>
                  </listitem>
                  <listitem>
                      <para><emphasis role="bold">timeCycle</emphasis>。指定重复执行的间隔，
						  可以用来定期启动流程实例，或为超时时间发送多个提醒。
						  timeCycle元素可以使用两种格式。第一种是
						  <ulink url="http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals">ISO 8601</ulink>
						  标准的格式。示例（重复3次，每次间隔10小时）：
                          <programlisting>
&lt;timerEventDefinition&gt;
    &lt;timeCycle&gt;R3/PT10H&lt;/timeCycle&gt;
&lt;/timerEventDefinition&gt;</programlisting>
                      </para>
                      <para>另外，你可以使用cron表达式指定timeCycle，下面的例子是从整点开始，每5分钟执行一次：
                          <programlisting>
0 0/5 * * * ?</programlisting>
                          请参考<ulink url="http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html">教程</ulink>
						  来了解如何使用cron表达式。
                      </para>
                      <para>
                            <emphasis role="bold">注意：</emphasis> 第一个数字表示秒，而不是像通常Unix cron中那样表示分钟。
                      </para>
                      <para>重复的时间周期能更好的处理相对时间，它可以计算一些特定的时间点
					  （比如，用户任务的开始时间），而cron表达式可以处理绝对时间 -
					  这对<link linkend="timerStartEventDescription">定时启动事件</link>特别有用。</para>
                  </listitem>
              </itemizedlist>
          </para>
          <para>
		    你可以在定时器事件定义中使用表达式，这样你就可以通过流程变量来影响那个定时器定义。
			流程定义必须包含ISO 8601（或cron）格式的字符串，以匹配对应的时间类型。
  <programlisting>
  &lt;boundaryEvent id=&quot;escalationTimer&quot; cancelActivity=&quot;true&quot; attachedToRef=&quot;firstLineSupport&quot;&gt;
     <emphasis role="bold">&lt;timerEventDefinition&gt;
      &lt;timeDuration&gt;${duration}&lt;/timeDuration&gt;
    &lt;/timerEventDefinition&gt;</emphasis>
  &lt;/boundaryEvent&gt;
  </programlisting>
          </para>

        <para>
          <emphasis role="bold">注意：</emphasis> 只有启用job执行器之后，定时器才会被触发。
		  （<literal>activiti.cfg.xml</literal>中的<emphasis>jobExecutorActivate</emphasis>需要设置为<literal>true</literal>，
		  不过，默认job执行器是关闭的）。
        </para>

      </section>

	<!-- //////////////////////////////////////// error event definitions -->

      <section id="bpmnErrorEventDefinition">
      <title>错误事件定义</title>
	  错误事件是由指定错误触发的。

        <para>
		      <emphasis role="bold">重要提醒：</emphasis>BPMN错误与Java异常完全不一样。
			  实际上，他俩一点儿共同点都没有。BPMN错误事件是为了对
			  <emphasis>业务异常</emphasis>建模。Java异常是要
			  <link linkend="serviceTaskExceptionHandling">用特定方式</link>处理。
		</para>


		错误事件定义会引用一个error元素。下面是一个error元素的例子，引用了一个错误声明：

		 <programlisting>
&lt;endEvent id=&quot;myErrorEndEvent&quot;&gt;
  &lt;errorEventDefinition errorRef=&quot;myError&quot; /&gt;
&lt;/endEvent&gt;
         </programlisting>

		 引用相同error元素的错误事件处理器会捕获这个错误。
      </section>

<!-- //////////////////////////////////////// signal event definitions -->


   <section id="bpmnSignalEventDefinition">
      	<title>信号事件定义</title>
      	<para>
			信号事件会引用一个已命名的信号。信号全局范围的事件（广播语义）。
			会发送给所有激活的处理器。
      	</para>

        <para>
			信号事件定义使用<code>signalEventDefinition</code>元素。
			<code>signalRef</code>属性会引用<code>definitions</code>根节点里定义的<code>signal</code>子元素。
			下面是一个流程的实例，其中会抛出一个信号，并被中间事件捕获。
<programlisting>
&lt;definitions... &gt;
	&lt;!-- declaration of the signal --&gt;
	&lt;signal id=&quot;alertSignal&quot; name=&quot;alert&quot; /&gt;

	&lt;process id=&quot;catchSignal&quot;&gt;
		&lt;intermediateThrowEvent id=&quot;throwSignalEvent&quot; name=&quot;Alert&quot;&gt;
			&lt;!-- signal event definition --&gt;
			&lt;signalEventDefinition signalRef=&quot;alertSignal&quot; /&gt;
		&lt;/intermediateThrowEvent&gt;
		...
		&lt;intermediateCatchEvent id=&quot;catchSignalEvent&quot; name=&quot;On Alert&quot;&gt;
			&lt;!-- signal event definition --&gt;
			&lt;signalEventDefinition signalRef=&quot;alertSignal&quot; /&gt;
		&lt;/intermediateCatchEvent&gt;
		...
	&lt;/process&gt;
&lt;/definitions&gt;
</programlisting>
<code>signalEventDefinition</code>引用相同的<code>signal</code>元素。
        </para>
        <section id="bpmnSignalEventDefinitionThrow">
        	<title>触发信号事件</title>
	        <para>
				既可以通过bpmn节点由流程实例触发一个信号，也可以通过API触发。
				下面的<code>org.activiti.engine.RuntimeService</code>中的方法
				可以用来手工触发一个信号。
	        	<programlisting>
RuntimeService.signalEventReceived(String signalName);
RuntimeService.signalEventReceived(String signalName, String executionId);
	  			</programlisting>
				<code>signalEventReceived(String signalName);</code>和
				<code>signalEventReceived(String signalName, String executionId);</code>之间的区别是
				第一个方法会把信号发送给全局所有订阅的处理器（广播语义），
				第二个方法只把信息发送给指定的执行。
	        </para>
	    </section>
	    <section id="bpmnSignalEventDefinitionCatch">
	    	<title>捕获信号事件</title>
	    	<para>
				信号事件可以被中间捕获信号事件或边界信息事件捕获。
	    	</para>
	    </section>
	    <section id="bpmnSignalEventDefinitionQuery">
	    	<title>查询信号事件的订阅</title>
			<para>
			可以查询所有订阅了特定信号事件的执行：
	    	<programlisting>
 List&lt;Execution&gt; executions = runtimeService.createExecutionQuery()
      .signalEventSubscriptionName("alert")
      .list();
	    	</programlisting>
			我们可以使用<code>signalEventReceived(String signalName, String executionId)</code>方法
			吧信号发送给这些执行。
			</para>
	    </section>

	    <section id="bpmnSignalEventDefinitionScope">
	       <title>信号事件范围</title>
	       <para>
			   默认，信号会在<emphasis>流程引擎范围内进行广播</emphasis>。就是说，
			   你可以在一个流程实例中抛出一个信号事件，其他不同流程定义的流程实例
			   都可以监听到这个事件。
	       </para>
	       <para>
				然而，有时只希望在<emphasis>同一个流程实例</emphasis>中响应这个信号事件。
				比如一个场景是，流程实例中的同步机制，如果两个或更多活动是互斥的。
	       </para>
	       <para>
			   如果想要限制信号事件的<emphasis>范围</emphasis>，可以使用信号事件定义的<emphasis>scope 属性</emphasis>
			   （不是BPMN2.0的标准属性）：
	           <programlisting>
&lt;signal id=&quot;alertSignal&quot; name=&quot;alert&quot; activiti:scope&quot;processInstance&quot;/&gt;</programlisting>
	           The default value for this is attribute is <emphasis>&quot;global&quot;</emphasis>.
	       </para>
	    </section>

	    <section id="bpmnSignalEventDefinitionExample">
	    	<title>信号事件实例</title>

	    	<para>
				下面是两个不同流程使用信号交互的例子。第一个流程在保险规则更新或改变时启动。
				在修改被参与者处理时，会触发一个信息，通知规则改变：
	    	</para>

	    	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.signal.event.throw.png"/></imageobject></mediaobject>

	    	<para>
				这个时间会被所有感兴趣的流程实例捕获。下面是一个订阅这个事件的流程实例。
	    	</para>

	    	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.signal.event.catch.png"/></imageobject></mediaobject>

	    	<para>
	    		<emphasis role="bold">注意：</emphasis>要了解信号事件是广播给<emphasis role="bold">所有</emphasis> 激活的处理器的。
				这意味着在上面的例子中，所有流程实例都会接收到这个事件。
				这就是我们想要的。然而，有的情况下并不想要这种广播行为。
				考虑下面的流程：
	    	</para>
	    	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.signal.event.warning.1.png"/></imageobject></mediaobject>

	    	<para>
				上述流程描述的模式activiti并不支持。这种想法是执行“do something”任务时出现的错误，会被边界错误事件捕获，
				然后使用信号传播给并发路径上的分支，进而中断"do something inparallel"任务。
				目前，activiti实际运行的结果与期望一致。信号会传播给边界事件并中断任务。
				<emphasis role="bold">但是，根据信号的广播含义，它也会传播给所有其他订阅了信号事件的流程实例。</emphasis>
				所以，这就不是我们想要的结果。
	    	</para>

	    	<para>
	    		<emphasis role="bold">注意：</emphasis> 信号事件不会执行任何与特定流程实例的联系。
				如果你只想把一个信息发给指定的流程实例，需要手工关联，再使用
				<code>signalEventReceived(String signalName, String executionId)</code>和对应的
				<link linkend="bpmnSignalEventDefinitionQuery">查询机制</link>。
	    	</para>
	    </section>

      </section>

      <!-- //////////////////////////////////////// message event definitions -->


   <section id="bpmnMessageEventDefinition">
      	<title>消息事件定义</title>
      	<para>
			消息事件会引用一个命名的消息。每个消息都有名称和内容。和信号不同，
			消息事件总会直接发送个一个接受者。
      	</para>

        <para>
			消息事件定义使用<code>messageEventDefinition</code>元素。
			<code>messageRef</code>属性引用了<code>definitions</code>根节点下的
			一个<code>message</code>子元素。下面是一个使用两个消息事件的流程例子，
			开始事件和中间捕获事件分别声明和引用了两个消息事件。
<programlisting>
&lt;definitions id=&quot;definitions&quot;
  xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
  xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
  targetNamespace=&quot;Examples&quot;
  xmlns:tns=&quot;Examples&quot;&gt;

  &lt;message id=&quot;newInvoice&quot; name=&quot;newInvoiceMessage&quot; /&gt;
  &lt;message id=&quot;payment&quot; name=&quot;paymentMessage&quot; /&gt;

  &lt;process id=&quot;invoiceProcess&quot;&gt;

    &lt;startEvent id=&quot;messageStart&quot; &gt;
    	&lt;messageEventDefinition messageRef=&quot;newInvoice&quot; /&gt;
    &lt;/startEvent&gt;
    ...
    &lt;intermediateCatchEvent id=&quot;paymentEvt&quot; &gt;
    	&lt;messageEventDefinition messageRef=&quot;payment&quot; /&gt;
    &lt;/intermediateCatchEvent&gt;
    ...
  &lt;/process&gt;

&lt;/definitions&gt;</programlisting>
        </para>
        <section id="bpmnMessageEventDefinitionThrow">
        	<title>触发消息事件</title>
        	<para>
				作为一个嵌入式的流程引擎，activiti不能真正接收一个消息。这些环境相关，与平台相关的活动
				比如连接到JMS（Java消息服务）队列或主题或执行WebService或REST请求。
				这个消息的接收是你要在应用或架构的一层实现的，流程引擎则内嵌其中。
        	</para>
	        <para>
				在你的应用接收一个消息之后，你必须决定如何处理它。
				如果消息应该触发启动一个新流程实例，
				在下面的RuntimeService的两个方法中选择一个执行：
	        	<programlisting>
ProcessInstance startProcessInstanceByMessage(String messageName);
ProcessInstance startProcessInstanceByMessage(String messageName, Map&lt;String, Object&gt; processVariables);
ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey, Map&lt;String, Object&gt; processVariables); 		</programlisting>
				这些方法允许使用对应的消息系统流程实例。
	        </para>
	        <para>
				如果消息需要被运行中的流程实例处理，首先要根据消息找到对应的流程实例
				（参考下一节）然后触发这个等待中的流程。
				RuntimeService提供了如下方法可以基于消息事件的订阅来触发流程继续执行：
	        	 	<programlisting>
void messageEventReceived(String messageName, String executionId);
void messageEventReceived(String messageName, String executionId, HashMap&lt;String, Object&gt; processVariables);	</programlisting>
	        </para>
	    </section>
	    <section id="bpmnMessageEventDefinitionQuery">
	    	<title>查询消息事件的订阅</title>
			Activiti支持消息开始事件和中间消息事件。
	    	<itemizedlist>
	    		<listitem>
	    			<para>
					消息开始事件的情况，消息事件订阅分配给一个特定的
	    	<emphasis>process definition</emphasis>。这个消息订阅可以使用<code>ProcessDefinitionQuery</code>查询到：
	    	<programlisting>
ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()
      .messageEventSubscription("newCallCenterBooking")
      .singleResult();
	    	</programlisting>
			因为同时只能有一个流程定义关联到消息的订阅点，查询总是返回0或一个结果。
			如果流程定义更新了，
			那么只有最新版本的流程定义会订阅到消息事件上。
	    			</para>
	    		</listitem>
	    		<listitem>
	    			<para>
						中间捕获消息事件的情况，消息事件订阅会分配给特定的<emphasis>执行</emphasis>。
						这个消息事件订阅可以使用<code>ExecutionQuery</code>查询到：
	    				<programlisting>
Execution execution = runtimeService.createExecutionQuery()
      .messageEventSubscriptionName("paymentReceived")
      .variableValueEquals("orderId", message.getOrderId())
      .singleResult();</programlisting>
						这个查询可以调用对应的查询，通常是流程相关的信息
						（这里，最多只能有一个流程实例对应着orderId）。
	    			</para>
	    		</listitem>
	    	</itemizedlist>
	    </section>

	    <section id="bpmnMessageEventDefinitionExample">
	    	<title>消息事件实例</title>

	    	<para>
				下面是一个使用两个不同消息启动的流程实例：
	    	</para>

	    	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.start.message.event.example.1.png"/></imageobject></mediaobject>

	    	<para>
				可以用在，流程需要不同的方式来区分开始事件，而后最终会进入同样的路径。
	    	</para>

	    </section>

      </section>




      <!-- //////////////////////////////////////// start events -->


	  <section id="bpmnStartEvents">

	   <title>开始事件</title>

	   <para>
		 开始事件用来指明流程在哪里开始。开始事件的类型（流程在接收事件时启动，
		 还是在指定时间启动，等等），定义了流程<emphasis>如何</emphasis>启动，
		 这通过事件中不同的小图表来展示。
		 在XML中，这些类型是通过声明不同的子元素来区分的。
	   </para>

	   <para>
	     开始事件<emphasis role="bold">都是捕获事件</emphasis>：
		 最终这些事件都是（一直）等待着，直到对应的触发时机出现。
	   </para>

	   <para>
	     在开始事件中，可以设置下面的activiti特定属性：
	   </para>

	   <itemizedlist>
       <listitem>
         <para>
           <emphasis role="bold">initiator</emphasis>：当流程启动时，把当前登录的用户保存到哪个变量名中。
		   示例如下：
           <programlisting>&lt;startEvent id=&quot;request&quot; activiti:initiator=&quot;initiator&quot; /&gt;</programlisting>
		   登录的用户必须使用<literal>IdentityService.setAuthenticatedUserId(String)</literal>方法设置，
		   并像这样包含在try-finally代码中：
           <programlisting>try {
  identityService.setAuthenticatedUserId(&quot;bono&quot;);
  runtimeService.startProcessInstanceByKey(&quot;someProcessKey&quot;);
} finally {
  identityService.setAuthenticatedUserId(null);
}
</programlisting>
		  这段代码来自Activiti Explorer，所以它可以和
		  <xref linkend="forms" />一起结合使用。
         </para>
       </listitem>
     </itemizedlist>

	  </section>

	  <!-- //////////////////////////////////////// none start events -->

		<section id="bpmnNoneStartEvent">

			<title>空开始事件</title>

			<section id="noneStartEventDescription">

        <title>描述</title>

        <para>
		  空开始事件技术上意味着没有指定启动流程实例的触发条件。
		  这就是说引擎不能预计什么时候流程实例会启动。
		  空开始事件用于，当流程实例要通过API启动的场景，
		  通过调用<emphasis>startProcessInstanceByXXX</emphasis>方法。
          <programlisting>
ProcessInstance processInstance = runtimeService.startProcessInstanceByXXX();</programlisting>
        </para>

        <para>
          <emphasis>注意：</emphasis> 子流程都有一个空开始事件。
        </para>

      </section>

			<section id="noneStartEventGraphicalNotation">

			  <title>图形标记</title>

			  <para>
			    空开始事件显示成一个圆圈，没有内部图表（没有触发类型）
			    <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.none.start.event.png"/></imageobject></mediaobject>
			  </para>

			</section>

			<section id="noneStartEventXml">

        <title>XML结构</title>

        <para>
		  空开始事件的XML结构是普通的开始事件定义，没有任何子元素
		  （其他开始事件类型都有一个子元素来声明自己的类型）
          <programlisting>
&lt;startEvent id=&quot;start&quot; name=&quot;my start event&quot; /&gt;</programlisting>
        </para>

      </section>
      	<section id="noneStartEventCustomExtension">
      		<title>空开始事件的自定义扩展</title>
	       	 <para>
	           <emphasis role="bold">formKey</emphasis>：引用用户在启动新流程实例时需要填写的表单模板，
			   更多信息可以参考<link linkend="forms">表单章节</link>。
				实例：<programlisting>&lt;startEvent id=&quot;request&quot; activiti:formKey=&quot;org/activiti/examples/taskforms/request.form&quot; /&gt;</programlisting>
	         </para>
	    </section>

		</section>

		<!-- //////////////////////////////////////// timer start events -->

        <section id="bpmnTimerStartEvent">

            <title>定时开始事件</title>

            <section id="timerStartEventDescription">

        <title>描述</title>

        <para>
			定时开始事件用来在指定的时间创建流程实例。
			它可以同时用于只启动一次的流程
			和应该在特定时间间隔启动多次的流程。
        </para>

        <para>
          <emphasis>注意：</emphasis>子流程不能使用定时开始事件。
        </para>
		<para>
	  	  <emphasis>注意：</emphasis>定时开始事件在流程发布后就会开始计算时间。
		  不需要调用startProcessInstanceByXXX，虽然也而已调用启动流程的方法，
		  但是那会导致调用startProcessInstanceByXXX时启动过多的流程。
		</para>
		<para>
		   <emphasis>注意：</emphasis>当包含定时开始事件的新版本流程部署时，
		   对应的上一个定时器就会被删除。这是因为通常不希望自动启动旧版本流程的流程实例。
		</para>

      </section>

            <section id="timerStartEventGraphicalNotation">

              <title>图形标记</title>

              <para>
			    定时开始事件显示为了一个圆圈，内部是一个表。
                <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.clock.start.event.png"/></imageobject></mediaobject>
              </para>

            </section>

            <section id="timerStartEventXml">

        <title>XML内容</title>

        <para>
		  定时开始事件的XML内容是普通开始事件的声明，包含一个定时定义子元素。
		  请参考<link linkend="timerEventDefinitions">定时定义</link>
		  查看配合细节。
         </para>
           <para>示例：流程会启动4次，每次间隔5分钟，从2011年3月11日，12:13开始计时。
           <programlisting>
        &lt;startEvent id=&quot;theStart&quot;&gt;
            &lt;timerEventDefinition&gt;
                &lt;timeCycle&gt;R4/2011-03-11T12:13/PT5M&lt;/timeCycle&gt;
            &lt;/timerEventDefinition&gt;
        &lt;/startEvent&gt;
           </programlisting>
               </para>
            <para>
               示例：流程会根据选中的时间启动一次。
           <programlisting>
        &lt;startEvent id=&quot;theStart&quot;&gt;
            &lt;timerEventDefinition&gt;
                &lt;timeDate&gt;2011-03-11T12:13:14&lt;/timeDate&gt;
            &lt;/timerEventDefinition&gt;
        &lt;/startEvent&gt;
           </programlisting>
        </para>

      </section>

        </section>


        <!-- //////////////////////////////////////// message start events -->

        <section id="bpmnMessageStartEvent">

            <title>消息开始事件</title>
            <section id="messageStartEventDescription">

	        <title>描述</title>

	        <para>
	            <link linkend="bpmnMessageEventDefinition">消息</link>开始事件可以用其使用一个命名的消息来启动流程实例。
				这样可以帮助我们使用消息名称来<emphasis>选择</emphasis>正确的开始事件。
	        </para>

	        <para>
				在<emphasis role="bold">发布</emphasis>包含一个或多个消息开始事件的流程定义时，需要考虑下面的条件：
				<itemizedlist>
					<listitem>
						<para>
							消息开始事件的名称在给定流程定义中不能重复。流程定义不能包含多个名称相同的消息开始事件。
							如果两个或以上消息开始事件应用了相同的事件，或两个或以上消息事件引用的消息名称相同，activiti会在发布流程定义时抛出异常。
						</para>
					</listitem>
					<listitem>
						<para>
							消息开始事件的名称在所有已发布的流程定义中不能重复。
							如果一个或多个消息开始事件引用了相同名称的消息，而这个消息开始事件已经部署到不同的流程定义中，
							activiti就会在发布时抛出一个异常。
						</para>
					</listitem>
					<listitem>
						<para>
							流程版本：在发布新版本的流程定义时，之前订阅的消息订阅会被取消。
							如果新版本中没有消息事件也会这样处理。
						</para>
					</listitem>
				</itemizedlist>
			</para>

			<para>
				<emphasis role="bold">启动</emphasis>流程实例，消息开始事件可以使用
				下列<code>RuntimeService</code>中的方法来触发：
	        	<programlisting>
ProcessInstance startProcessInstanceByMessage(String messageName);
ProcessInstance startProcessInstanceByMessage(String messageName, Map&lt;String, Object&gt; processVariables);
ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey, Map&lt;String, Object&lt; processVariables);
	  			</programlisting>
	  			这里的<code>messageName</code>是<code>messageEventDefinition</code>的<code>messageRef</code>属性引用的<code>message</code>元素的<code>name</code>属性。
				<emphasis role="bold">启动</emphasis>流程实例时，要考虑一下因素：
				<itemizedlist>
					<listitem>
						<para>
							消息开始事件只支持顶级流程。消息开始事件不支持内嵌子流程。
						</para>
					</listitem>
					<listitem>
						<para>
							如果流程定义有多个消息开始事件，<code>runtimeService.startProcessInstanceByMessage(...)</code>
							会选择对应的开始事件。
						</para>
					</listitem>
					<listitem>
						<para>
							如果流程定义有多个消息开始事件和一个空开始事件。
							<code>runtimeService.startProcessInstanceByKey(...)</code>和
							<code>runtimeService.startProcessInstanceById(...)</code>会使用空开始事件启动流程实例。
						</para>
					</listitem>
					<listitem>
						<para>
							如果流程定义有多个消息开始事件，而且没有空开始事件，
							<code>runtimeService.startProcessInstanceByKey(...)</code>和
							<code>runtimeService.startProcessInstanceById(...)</code>会抛出异常。
						</para>
					</listitem>
					<listitem>
						<para>
							如果流程定义只有一个消息开始事件，
							<code>runtimeService.startProcessInstanceByKey(...)</code>和
							<code>runtimeService.startProcessInstanceById(...)</code>会使用这个消息开始事件启动流程实例。
						</para>
					</listitem>
					<listitem>
						<para>
							如果流程被调用环节（callActivity）启动，消息开始事件只支持如下情况：
							<itemizedlist>
								<listitem>
									<para>在消息开始事件以外，还有一个单独的空开始事件</para>
								</listitem>
								<listitem>
									<para>流程只有一个消息开始事件，没有空开始事件。</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</itemizedlist>
			</para>

	      </section>

            <section id="messageStartEventGraphicalNotation">

              <title>图形标记</title>

              <para>
				消息开始事件是一个圆圈，中间是一个消息事件图标。图标是白色未填充的，来表示捕获（接收）行为。
                <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.start.message.event.png"/></imageobject></mediaobject>
              </para>

            </section>

            <section id="messageStartEventXml">

        <title>XML内容</title>

        <para>
		  消息开始事件的XML内容时在普通开始事件申请中包含一个
		  messageEventDefinition子元素：

          <programlisting>
&lt;definitions id=&quot;definitions&quot;
  xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
  xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
  targetNamespace=&quot;Examples&quot;
  xmlns:tns=&quot;Examples&quot;&gt;

  &lt;message id=&quot;newInvoice&quot; name=&quot;newInvoiceMessage&quot; /&gt;

  &lt;process id=&quot;invoiceProcess&quot;&gt;

    &lt;startEvent id=&quot;messageStart&quot; &gt;
    	&lt;messageEventDefinition messageRef=&quot;tns:newInvoice&quot; /&gt;
    &lt;/startEvent&gt;
    ...
  &lt;/process&gt;

&lt;/definitions&gt;</programlisting>

        </para>


      </section>

        </section>



        <!-- //////////////////////////////////////// signal start events -->

        <section id="bpmnSignalStartEvent">

            <title>信号开始事件</title>
            <section id="bpmnSignalStartEventDescription">

            <title>描述</title>

            <para>
                <link linkend="bpmnSignalEventDefinition">signal</link>开始事件，可以用来通过一个已命名的信号（signal）来启动一个流程实例。
				信号可以在流程实例内部使用“中间信号抛出事务”触发，
				也可以通过API(<emphasis>runtimService.signalEventReceivedXXX</emphasis> 方法)触发。两种情况下，
				所有流程实例中拥有相同名称的signalStartEvent都会启动。
            </para>

            <para>
                注意，在两种情况下，都可以选择同步或异步的方式启动流程实例。
            </para>

            <para>
                必须向API传入<code>signalName</code>， 这是<code>signal</code>元素的<code>name</code>属性值，
				它会被<code>signalEventDefinition</code>的<code>signalRef</code>属性引用。
            </para>

          </section>

            <section id="signalStartEventGraphicalNotation">

              <title>图形标记</title>

              <para>
			    信号开始事件显示为一个中间包含信号事件图标的圆圈。标记是无填充的，表示捕获（接收）行为。
                <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.start.signal.event.png"/></imageobject></mediaobject>
              </para>

            </section>

            <section id="signalStartEventXml">

        <title>XML格式</title>

        <para>
		  signalStartEvent的XML格式是标准的startEvent声明，其中包含一个signalEventDefinition子元素：

          <programlisting>
    &lt;signal id=&quot;theSignal&quot; name=&quot;The Signal&quot; /&gt;

    &lt;process id=&quot;processWithSignalStart1&quot;&gt;
        &lt;startEvent id=&quot;theStart&quot;&gt;
          &lt;signalEventDefinition id=&quot;theSignalEventDefinition&quot; signalRef=&quot;theSignal&quot;  /&gt;
        &lt;/startEvent&gt;
        &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;theStart&quot; targetRef=&quot;theTask&quot; /&gt;
        &lt;userTask id=&quot;theTask&quot; name=&quot;Task in process A&quot; /&gt;
        &lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;theTask&quot; targetRef=&quot;theEnd&quot; /&gt;
        &lt;endEvent id=&quot;theEnd&quot; /&gt;
    &lt;/process&gt;</programlisting>

        </para>


      </section>

        </section>



         <!-- //////////////////////////////////////// error start events -->

        <section id="bpmnErrorStartEvent">

            <title>错误开始事件</title>
            <section id="errorStartEventDescription">

	        <title>描述</title>

	        <para>
	            <link linkend="bpmnErrorEventDefinition">错误</link>开始事件可以用来触发一个事件子流程。
	            <emphasis role="bold">错误开始事件不能用来启动流程实例</emphasis>。
	        </para>

	        <para>
	           错误开始事件都是中断事件。
	        </para>

	      </section>

            <section id="errorStartEventGraphicalNotation">

              <title>图形标记</title>

              <para>
			    错误开始事件是一个圆圈，包含一个错误事件标记。标记是白色未填充的，来表示捕获（接收）行为。
                <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.start.error.event.png"/></imageobject></mediaobject>
              </para>

            </section>

            <section id="errorStartEventXml">

        <title>XML内容</title>

        <para>
		  错误开始事件的XML内容是普通开始事件定义中，包含一个
		  errorEventDefinition子元素。

          <programlisting>
&lt;startEvent id=&quot;messageStart&quot; &gt;
	&lt;errorEventDefinition errorRef=&quot;someError&quot; /&gt;
&lt;/startEvent&gt;</programlisting>

        </para>


      </section>

        </section>

	<!-- ////////////////////////////////////// End Events -->

		<section id="bpmnEndEvent">

		  <title>结束事件</title>

		  <para>
		    结束事件表示（子）流程（分支）的结束。
			结束事件<emphasis role="bold">都是触发</emphasis>事件。
			这是说当流程达到结束事件，会触发一个<emphasis>结果</emphasis>。
			结果的类型是通过事件的内部黑色图标表示的。
			在XML内容中，是通过包含的子元素声明的。
		  </para>

		</section>

	<!-- ////////////////////////////////////// None End Event -->

		<section id="bpmnNoneEndEvent">

		  <title>空结束事件</title>

      <section id="noneEndEventDescription">

			 <title>描述</title>

        <para>
		  空结束事件意味着到达事件时不会指定抛出的<emphasis>结果</emphasis>。
		  这样，引擎会直接结束当前执行的分支，不会做其他事情。
        </para>

      </section>

      <section id="bpmnNoneEndEventDescription">

        <title>图形标记</title>

        <para>
		  空结束事件是一个粗边圆圈，内部没有小图表（无结果类型）
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.none.end.event.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnNoneStartEventXml">

        <title>XML内容</title>

        <para>
		  空结束事件的XML内容是普通结束事件定义，不包含子元素
		  （其他结束事件类型都会包含声明类型的子元素）。
          <programlisting>
&lt;endEvent id=&quot;end&quot; name=&quot;my end event&quot; /&gt;</programlisting>
        </para>

      </section>

		</section>

	<!-- ////////////////////////////////////// Error End Events -->

		<section id="bpmnErrorEndEvent">

		  <title>错误结束事件</title>

		  <section id="bpmnErrorEndEventDescription">
		    <title>描述</title>
		    <para>
			  当流程执行到<emphasis role="bold">错误结束事件</emphasis>，
			  流程的当前分支就会结束，并抛出一个错误。
			  这个错误可以<link linkend="bpmnBoundaryErrorEvent">被对应的中间边界错误事件捕获</link>。
			  如果找不到匹配的边界错误事件，就会抛出一个异常。
		    </para>

		  </section>

		  <section id="bpmnErrorEndEventGraphicalNotation">
        <title>图形标记</title>
        <para>
		  错误结束事件是一个标准的结束事件（粗边圆圈），内部有错误图标。
		  错误图表是全黑的，表示触发语法。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.error.end.event.png"/></imageobject></mediaobject>
        </para>
      </section>

      <section id="bpmnErrorEndEventXml">
        <title>XML内容</title>
        <para>
		  错误结束事件的内容是一个错误事件，
		  子元素为<emphasis>errorEventDefinition</emphasis>。
          <programlisting>
&lt;endEvent id=&quot;myErrorEndEvent&quot;&gt;
  &lt;errorEventDefinition errorRef=&quot;myError&quot; /&gt;
&lt;/endEvent&gt;
          </programlisting>
		  <emphasis>errorRef</emphasis>属性引用定义在流程外部的<emphasis>error</emphasis>元素：
          <programlisting>
&lt;error id=&quot;myError&quot; errorCode=&quot;123&quot; /&gt;
...
&lt;process id=&quot;myProcess&quot;&gt;
...
          </programlisting>
		  <emphasis>error</emphasis>的<emphasis role="bold">errorCode</emphasis>用来查找
		  匹配的捕获边界错误事件。
		  如果<emphasis>errorRef</emphasis>与任何<emphasis>error</emphasis>都不匹配，
		  就会使用<emphasis>errorRef</emphasis>来作为<emphasis>errorCode</emphasis>的缩写。
		  这是activiti特定的缩写。
		  更具体的说，见如下代码：
                    <programlisting>
&lt;error id=&quot;myError&quot; errorCode=&quot;error123&quot; /&gt;
...
&lt;process id=&quot;myProcess&quot;&gt;
...
  &lt;endEvent id=&quot;myErrorEndEvent&quot;&gt;
    &lt;errorEventDefinition errorRef=&quot;myError&quot; /&gt;
  &lt;/endEvent&gt;
          </programlisting>
		  等同于
                    <programlisting>
&lt;endEvent id=&quot;myErrorEndEvent&quot;&gt;
  &lt;errorEventDefinition errorRef=&quot;error123&quot; /&gt;
&lt;/endEvent&gt;
          </programlisting>
        </para>
		注意<literal>errorRef</literal>必须与BPMN 2.0格式相符，
		必须是一个合法的QName。
      </section>

		</section>

	<!-- ////////////////////////////////////// Cancel End Event -->

		<section id="bpmnCancelEndEvent">

		  <title>取消结束事件</title>
		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>

		  <section id="bpmnCancelEndEventDescription">
		    <title>描述</title>
		    <para>
				取消结束事件只能与BPMN事务子流程结合使用。
				当到达取消结束事件时，会抛出取消事件，它必须被取消边界事件捕获。
				取消边界事件会取消事务，并触发补偿机制。
		    </para>

		  </section>

		  <section id="bpmnCancelEndEventGraphicalNotation">
        <title>图形标记</title>
        <para>
		  取消结束事件显示为标准的结束事件（粗边圆圈），包含一个取消图标。
		  取消图标是全黑的，表示触发语法。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.cancel.end.event.png"/></imageobject></mediaobject>
        </para>
      </section>

      <section id="bpmnCancelEndEventXml">
        <title>XML内容</title>
        <para>
		  取消结束事件内容是一个结束事件，
		  包含<emphasis>cancelEventDefinition</emphasis>子元素。
          <programlisting>
&lt;endEvent id=&quot;myCancelEndEvent&quot;&gt;
  &lt;cancelEventDefinition /&gt;
&lt;/endEvent&gt;
          </programlisting>
		</para>
      </section>

		</section>

	<!-- ////////////////////////////////////// Boundary Events -->


		<section id="bpmnBoundaryEvent">

		  <title>边界事件</title>

		  <para>
		    边界事件都是<emphasis>捕获</emphasis>事件，它会附在一个环节上。
			（边界事件不可能触发事件）。这意味着，当节点运行时，
			事件会<emphasis>监听</emphasis>对应的触发类型。
			当事件被<emphasis>捕获</emphasis>，节点就会中断，
			同时执行事件的后续连线。
		  </para>

		  <para>
		    所以边界事件的定义方式都一样：
<programlisting>
&lt;boundaryEvent id=&quot;myBoundaryEvent&quot; attachedToRef=&quot;theActivity&quot;&gt;
      &lt;XXXEventDefinition/&gt;
&lt;/boundaryEvent&gt;</programlisting>
		  </para>

		  <para>
		    边界事件使用如下方式进行定义：
		    <itemizedlist>
		      <listitem>
		        <para>
				  唯一标识（流程范围）
		        </para>
		      </listitem>
		      <listitem>
		        <para>
				  使用<emphasis>caught</emphasis>属性
				  引用事件衣服的节点。
				  注意边界事件和它们附加的节点在同一级别上。
				  （比如，边界事件不是包含在节点内的）。
		        </para>
		      </listitem>
		      <listitem>
		        <para>
				  格式为<emphasis>XXXEventDefinition</emphasis>的XML子元素
				  （比如，<emphasis>TimerEventDefinition</emphasis>，<emphasis>ErrorEventDefinition</emphasis>，等等）
				  定义了边界事件的类型。参考对应的边界事件类型，
				  获得更多细节。
		        </para>
		      </listitem>
		    </itemizedlist>
		  </para>

		</section>

		<section id="bpmnTimerBoundaryEvent">

      <title>定时边界事件</title>

      <section id="timerBoundaryEventDescription">

        <title>描述</title>

        <para>
		  定时边界事件就是一个暂停等待警告的时钟。当流程执行到绑定了边界事件的环节，
		  会启动一个定时器。
		  当定时器触发时（比如，一定时间之后），环节就会中断，
		  并沿着定时边界事件的外出连线继续执行。
        </para>

      </section>

      <section id="bpmnTimerBoundaryEventGraphicalNotation">

        <title>图形标记</title>

        <para>
		  定时边界事件是一个标准的边界事件（边界上的一个圆圈），
		  内部是一个定时器小图标。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.timer.event.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnTimerBoundaryEventXml">

        <title>XML内容</title>

        <para>
		  定时器边界任务定义是一个<link linkend="bpmnBoundaryEvent">正规的边界事件</link>。
          指定类型的子元素是<emphasis role="bold">timerEventDefinition</emphasis>元素。
<programlisting>
&lt;boundaryEvent id=&quot;escalationTimer&quot; cancelActivity=&quot;true&quot; attachedToRef=&quot;firstLineSupport&quot;&gt;
   <emphasis role="bold">&lt;timerEventDefinition&gt;
    &lt;timeDuration&gt;PT4H&lt;/timeDuration&gt;
  &lt;/timerEventDefinition&gt;</emphasis>
&lt;/boundaryEvent&gt;
</programlisting>

        请参考<link linkend="timerEventDefinitions">定时事件定义</link>获得更多定时其配置的细节。
        </para>

        <para>
		  在流程图中，可以看到上述例子中的圆圈边线是虚线：

          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.non.interrupting.boundary.timer.event.png"/></imageobject></mediaobject>

          经典场景是发送一个升级邮件，但是不打断正常流程的执行。
        </para>

        <para>
		  因为BPMN 2.0中，中断和非中断的事件还是有区别的。默认是中断事件。
		  非中断事件的情况，<emphasis role="bold">不会</emphasis>中断原始环节，那个环节还停留在原地。
		  对应的，会创建一个新分支，并沿着事件的流向继续执行。
		  在XML内容中，要把<emphasis>cancelActivity</emphasis>属性设置为false：
<programlisting>
&lt;boundaryEvent id=&quot;escalationTimer&quot; cancelActivity=&quot;false&quot; attachedToRef=&quot;firstLineSupport&quot;/&gt;
</programlisting>
        </para>

        <para>
          <emphasis role="bold">注意：</emphasis>边界定时事件只能在job执行器启用时使用。
		  （比如，把<literal>activiti.cfg.xml</literal>中的<emphasis>jobExecutorActivate</emphasis>
		  设置为<literal>true</literal>，因为默认job执行器默认是禁用的）。
        </para>

      </section>

      <section id="bpmnKnownIssueBoundaryEvent">

      <title>边界事件的已知问题</title>

      <para>
	    使用边界事件有一个已知的同步问题。
		目前，不能边界事件后面不能有多条外出连线
		（参考<ulink url="http://jira.codehaus.org/browse/ACT-47">ACT-47</ulink>）。
		解决这个问题的方法是在一个连线后使用并发网关。
        <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.known.issue.boundary.event.png"/></imageobject></mediaobject>
      </para>

    </section>

		</section>


		<!-- ////////////////////// error boundary event -->

		<section id="bpmnBoundaryErrorEvent">
		  <title>错误边界事件</title>

		  <section id="bpmnBoundaryErrorEventDescription">
		    <title>描述</title>
		    <para>
			  节点边界上的中间<emphasis>捕获</emphasis>错误事件，
			  或简写成<emphasis role="bold">边界错误事件</emphasis>，
			  它会捕获节点范围内抛出的错误。
		    </para>

		    <para>
			  定义一个边界错误事件，大多用于<link linkend="bpmnSubProcess">内嵌子流程</link>，
			  或<link linkend="bpmnCallActivity">调用节点</link>，对于子流程的情况，它会为所有内部的节点创建一个作用范围。
			  错误是由<link linkend="bpmnErrorEndEvent">错误结束事件</link>抛出的。
			  这个错误会传递给上层作用域，直到找到一个错误事件定义向匹配的边界错误事件。
		    </para>

		    <para>
			  当捕获了错误事件时，边界任务绑定的节点就会销毁，
			  也会销毁内部所有的执行分支
			  （比如，同步节点，内嵌子流程，等等）。
			  流程执行会继续沿着边界事件的外出连线继续执行。
		    </para>

		  </section>

		  <section id="bpmnBoundaryErrorEventgraphicalNotation">
        <title>图形标记</title>
        <para>
		  边界错误事件显示成一个普通的中间事件（圆圈内部有一个小圆圈）
		  放在节点的标记上，内部有一个错误小图标。错误小图标是白色的，
		  表示它是一个<emphasis>捕获</emphasis>事件。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.error.event.png"/></imageobject></mediaobject>
        </para>
      </section>

      <section id="bpmnBoundaryErrorEventXml">
        <title>Xml内容</title>
        <para>
		  边界错误事件定义为普通的<link linkend="bpmnBoundaryEvent">边界事件</link>：
          <programlisting>
&lt;boundaryEvent id=&quot;catchError&quot; attachedToRef=&quot;mySubProcess&quot;&gt;
  &lt;errorEventDefinition errorRef=&quot;myError&quot;/&gt;
&lt;/boundaryEvent&gt;
          </programlisting>
		  和<link linkend="bpmnErrorEndEvent">错误结束事件</link>一样，
		  <emphasis>errorRef</emphasis>引用了process元素外部的一个错误定义：
		  <programlisting>
&lt;error id=&quot;myError&quot; errorCode=&quot;123&quot; /&gt;
...
&lt;process id=&quot;myProcess&quot;&gt;
...
          </programlisting>
        </para>

        <para>
          <emphasis role="bold">errorCode</emphasis>用来匹配捕获的错误：
          <itemizedlist>
            <listitem>
              <para>
			    如果没有设置<emphasis>errorRef</emphasis>，边界错误事件会捕获
				<emphasis role="bold">所有错误事件</emphasis>，无论<emphasis>错误</emphasis>的errorCode是什么。
              </para>
            </listitem>
            <listitem>
              <para>
			    如果设置了<emphasis>errorRef</emphasis>，并引用了一个已存的<emphasis>错误</emphasis>，
				边界事件就<emphasis role="bold">只捕获错误代码与之相同的错误</emphasis>。
              </para>
            </listitem>
            <listitem>
              <para>
			    如果设置了<emphasis>errorRef</emphasis>，但是BPMN 2.0中没有定义<emphasis>错误</emphasis>，
				<emphasis role="bold">errorRef就会当做errorCode使用</emphasis>
				（和错误结束事件的用法类似）。
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>

      <section id="bpmnBoundaryErrorEventExample">
        <title>实例</title>
        <para>
		  下面的流程实例演示了如何使用错误结束事件。
		  当完成<emphasis>'审核盈利'</emphasis>这个用户任务是，如果没有提供足够的信息，
		  就会抛出错误，错误会被子流程的边界任务捕获，
		  所有<emphasis>'回顾销售'</emphasis>子流程中的所有节点都会销毁。
		  （即使<emphasis>'审核客户比率'</emphasis>还没有完成），
		  并创建一个<emphasis>'提供更多信息'</emphasis>的用户任务。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.error.example.png"/></imageobject></mediaobject>
        </para>

        <para>
		  这个流程也放在demo中了。流程XML和单元测试可以在
		  <emphasis>org.activiti.examples.bpmn.event.error</emphasis>包下找到。
        </para>
      </section>

		</section>

		<!-- ////////////////////// signal boundary event -->

		<section id="bpmnBoundarySignalEvent">
		  <title>信号边界事件</title>

		  <section id="bpmnBoundarySignalEventDescription">
		    <title>描述</title>
		    <para>
			  节点边界的中间<emphasis>捕获</emphasis><link linkend="bpmnSignalEventDefinition">信号</link>，
			  或简称为<emphasis role="bold">边界信号事件</emphasis>，
			  它会捕获信号定义引用的相同信号名的信号。
		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>与其他事件（比如边界错误事件）不同，边界信号事件不只捕获
				它绑定方位的信号。信号事件是一个全局的范围（广播语义），就是说信号可以在任何地方触发，
				即便是不同的流程实例。
		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>和其他事件（比如边界错误事件）不同，捕获信号后，不会停止信号的传播。
				如果你有两个信号边界事件，它们捕获相同的信号事件，两个边界事件都会被触发，
				即使它们在不同的流程实例中。
		    </para>

		  </section>

		  <section id="bpmnBoundarySignalEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  边界信号事件显示为普通的中间事件（圆圈里有个小圆圈），位置在节点的边缘，
			  内部有一个信号小图标。信号图标是白色的（未填充），
			  来表示<emphasis>捕获</emphasis>的意思。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.signal.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnBoundarySignalEventXml">
	        <title>XML内容</title>
	         <para>
			    边界信号事件定义为普通的<link linkend="bpmnBoundaryEvent">边界事件</link>：
          		<programlisting>
&lt;boundaryEvent id=&quot;boundary&quot; attachedToRef=&quot;task&quot; cancelActivity=&quot;true&quot;&gt;
          &lt;signalEventDefinition signalRef=&quot;alertSignal&quot;/&gt;
&lt;/boundaryEvent&gt;
          		</programlisting>
        	</para>
	      </section>

	      <section id="bpmnBoundarySignalEventExample">
	        <title>实例</title>
	        <para>
			    参考<link linkend="bpmnSignalEventDefinition">信号事件定义</link>章节。
	        </para>
	      </section>

      </section>

      <!-- ////////////////////// message boundary event -->

		<section id="bpmnBoundaryMessageEvent">
		  <title>消息边界事件</title>

		  <section id="bpmnBoundaryMessageEventDescription">
		    <title>描述</title>
		    <para>
			  节点边界上的中间<emphasis>捕获</emphasis><link linkend="bpmnMessageEventDefinition">消息</link>，
			  或简称<emphasis role="bold">边界消息事件</emphasis>，根据引用的消息定义捕获相同消息名称的消息。
		    </para>

		  </section>

		  <section id="bpmnBoundaryMessageEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  边界消息事件显示成一个普通的中间事件（圆圈里有个小圆圈），位于节点边缘，
			  内部是一个消息小图标。消息图标是白色（无填充），
			  表示<emphasis>捕获</emphasis>语义。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.message.event.png"/></imageobject></mediaobject>
	          注意，边界消息事件可能是中断（右侧）或非中断（左侧）的。
	        </para>
	      </section>

	      <section id="bpmnBoundaryMessageEventXml">
	        <title>XML内容</title>
	         <para>
			    边界消息事件定义为标准的<link linkend="bpmnBoundaryEvent">边界事件</link>：
			    <programlisting>
&lt;boundaryEvent id=&quot;boundary&quot; attachedToRef=&quot;task&quot; cancelActivity=&quot;true&quot;&gt;
          &lt;messageEventDefinition messageRef=&quot;newCustomerMessage&quot;/&gt;
&lt;/boundaryEvent&gt;
          		</programlisting>
        	</para>
	      </section>

	      <section id="bpmnBoundaryMessageEventExample">
	        <title>实例</title>
	        <para>
			    参考<link linkend="bpmnMessageEventDefinition">消息事件定义</link>章节。
	        </para>
	      </section>

      </section>

      <!-- ////////////////////// cancel boundary event -->

		<section id="bpmnBoundaryCancelEvent">
		  <title>取消边界事件</title>
		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>

		  <section id="bpmnBoundaryCancelEventDescription">
		    <title>描述</title>
		    <para>
			  在事务性子流程的边界上的中间<emphasis>捕获</emphasis>取消，
			  或简称为<emphasis role="bold">边界取消事件 cancel event</emphasis>，
			  当事务取消时触发。当取消边界事件触发时，首先中断当前作用域的所有执行。
			  然后开始补偿事务内的所有激活的补偿边界事件。
			  补偿是同步执行的。例如，离开事务钱，边界事务会等待补偿执行完毕。
			  当补偿完成后，事务子流程会沿着取消边界事务的外出连线继续执行。
		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>每个事务子流程只能有一个取消边界事件。
		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>如果事务子流程包含内嵌子流程，补偿只会触发已经成功完成的子流程。
		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>如果取消边界子流程对应的事务子流程配置为多实例，
				如果一个实例触发了取消，就会取消所有实例。
		    	instances.
		    </para>

		  </section>

		  <section id="bpmnBoundaryCancelEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  取消边界事件显示为了一个普通的中间事件（圆圈里套小圆圈），在节点的边缘，
			  内部是一个取消小图标。取消图标是白色（无填充），
			  表明是<emphasis>捕获</emphasis>语义。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.cancel.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnBoundarySignalEventXml.2">
	        <title>XML内容</title>
	         <para>
			    取消边界事件定义为普通<link linkend="bpmnBoundaryEvent">边界事件</link>：
          		<programlisting>
&lt;boundaryEvent id=&quot;boundary&quot; attachedToRef=&quot;transaction&quot; &gt;
          &lt;cancelEventDefinition /&gt;
&lt;/boundaryEvent&gt;
          		</programlisting>
				因为取消边界事件都是中断的，所以不需要使用<code>cancelActivity</code>属性。
        	</para>
	      </section>

      </section>

       <!-- ////////////////////// compensation boundary event -->

		<section id="bpmnBoundaryCompensationEvent">
		  <title>补偿边界事件</title>
		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>

		  <section id="bpmnBoundaryCompensationEventDescription">
		    <title>描述</title>
		    <para>
			  节点边界的中间<emphasis>捕获</emphasis>补偿，
			  或简称为<emphasis role="bold">补偿边界事件</emphasis>，
			  可以用来设置一个节点的补偿处理器。
		    </para>

		    <para>
				补偿边界事件必须使用直接引用设置唯一的补偿处理器。
		    </para>

		    <para>
				补偿边界事件与其他边界事件的策略不同。
				其他边界事件（比如信号边界事件）当到达关联的节点就会被激活。
				离开节点时，就会挂起，对应的事件订阅也会取消。
				补偿边界事件则不同。补偿边界事件在关联的节点<emphasis role="bold">成功完成</emphasis>时激活。
				当补偿事件触发或对应流程实例结束时，事件订阅才会删除。
				它遵循如下规则：
		    	<itemizedlist>
		    		<listitem>
		    			<para>
							补偿触发时，补偿边界事件对应的补偿处理器会调用相同次数，根据它对应的节点的成功次数。
		    			</para>
		    		</listitem>
		    		<listitem>
		    			<para>
							如果补偿边界事件关联到多实例节点，
							补偿事件会订阅每个实例。
		    			</para>
		    		</listitem>
		    		<listitem>
		    			<para>
							如果补偿边界事件关联的节点中包含循环，
							补偿事件会在每次节点执行时进行订阅。
		    			</para>
		    		</listitem>
		    		<listitem>
		    			<para>
							如果流程实例结束，订阅的补偿事件都会结束。
		    			</para>
		    		</listitem>
		    	</itemizedlist>

		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>补偿边界事件不支持内嵌子流程。
		    </para>

		  </section>

		  <section id="bpmnBoundaryCompensationEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  补偿边界事件显示为标准中间事件（圆圈里套圆圈），位于节点边缘，
			  内部有一个补偿小图标。补偿图标是白色的（无填充），
			  表示<emphasis>捕获</emphasis>语义。另外，下面的图形演示了使用无方向的关联，
			  为边界事件设置补偿处理器。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.compensation.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnBoundaryCompensationEventXml">
	        <title>XML内容</title>
	         <para>
			    补偿边界事件定义为标准<link linkend="bpmnBoundaryEvent">边界事件</link>：
          		<programlisting>
&lt;boundaryEvent id=&quot;compensateBookHotelEvt&quot; attachedToRef=&quot;bookHotel&quot; &gt;
          &lt;compensateEventDefinition /&gt;
&lt;/boundaryEvent&gt;

&lt;association associationDirection=&quot;One&quot; id=&quot;a1&quot;  sourceRef=&quot;compensateBookHotelEvt&quot; targetRef=&quot;undoBookHotel&quot; /&gt;

&lt;serviceTask id=&quot;undoBookHotel&quot; isForCompensation=&quot;true&quot; activiti:class=&quot;...&quot; /&gt;</programlisting>
				因为补偿边界事件在节点成功完成后激活，
				所以不支持<code>cancelActivity</code>属性。
        	</para>
	      </section>

      </section>

      <!-- ////////////////////// intermediate catching events -->

      <section id="bpmnIntermediateCatchingEvent">

          <title>中间捕获事件</title>

		  <para>
			所有中间捕获事件都使用同样的方式定义：
<programlisting>
&lt;intermediateCatchEvent id=&quot;myIntermediateCatchEvent&quot; &gt;
      &lt;XXXEventDefinition/&gt;
&lt;/intermediateCatchEvent&gt;</programlisting>
		  </para>

		  <para>
		   中间捕获事件的定义包括
		    <itemizedlist>
		      <listitem>
		        <para>
				  唯一标识（流程范围内）
		        </para>
		      </listitem>
		      <listitem>
		        <para>
				  一个结构为<emphasis>XXXEventDefinition</emphasis>的XML子元素
				  （比如<emphasis>TimerEventDefinition</emphasis>等）
				  定义了中间捕获事件的类型。参考特定的捕获事件类型，
				  获得更多详情。
		        </para>
		      </listitem>
		    </itemizedlist>
		  </para>

        </section>

        <!-- //////////////////////////////////////// intermediate timer catch  -->

        <section id="bpmnTimerIntermediateEvent">

            <title>定时中间捕获事件</title>

            <section id="bpmnTimerIntermediateEventDescription">
                <title>描述</title>

        <para>
		  定时中间事件作为一个监听器。当执行到达捕获事件节点，
		  就会启动一个定时器。
		  当定时器触发（比如，一段时间之后），流程就会沿着定时中间事件的外出节点继续执行。
        </para>

            </section>

            <section id="bpmnTimerIntermediateEventGraphicalNotation">

              <title>图形标记</title>

              <para>
			    定时器中间事件显示成标准中间捕获事件，内部是一个定时器小图标。
                <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.intermediate.timer.event.png"/></imageobject></mediaobject>
              </para>

            </section>

            <section id="bpmnTimerIntermediateEventXml">

              <title>XML内容</title>

              <para>

		  定时器中间事件定义为标准<link linkend="bpmnIntermediateCatchingEvent">中间捕获事件</link>。
		  指定类型的子元素为<emphasis role="bold">timerEventDefinition</emphasis>元素。
                 <programlisting>
        &lt;intermediateCatchEvent id=&quot;timer&quot;&gt;
            <emphasis role="bold">&lt;timerEventDefinition&gt;
                &lt;timeDuration&gt;PT5M&lt;/timeDuration&gt;
            &lt;/timerEventDefinition&gt;</emphasis>
        &lt;/intermediateCatchEvent&gt;
                 </programlisting>
              参考<link linkend="timerEventDefinitions">定时器事件定义</link>了解配置信息。

              </para>
            </section>

        </section>

        <!-- //////////////////////////////////////// intermediate signal catch  -->

        <section id="bpmnIntermediateSignalEvent">
		  <title>信号中间捕获事件</title>

		  <section id="bpmnIntermediateSignalEventDescription">
		    <title>描述</title>
		    <para>
			  中间<emphasis>捕获</emphasis><link linkend="bpmnSignalEventDefinition">信号</link>事件
			  通过引用信号定义来捕获相同信号名称的信号。
		    </para>

		    <para>
		    	<emphasis role="bold">注意：</emphasis>与其他事件（比如错误事件）不同，信号不会在捕获之后被消费。
				如果你有两个激活的信号边界事件捕获相同的信号事件，两个边界事件都会被触发，
				即便它们在不同的流程实例中。
		    </para>

		  </section>

		  <section id="bpmnIntermediateSignalEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  中间信号捕获事件显示为一个普通的中间事件（圆圈套圆圈），
			  内部有一个信号小图标。信号小图标是白色的（无填充），
			  表示<emphasis>捕获</emphasis>语义。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.intermediate.signal.catch.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnIntermediateSignalEventXml">
	        <title>XML内容</title>
	         <para>
				信号中间事件定义为普通的<link linkend="bpmnIntermediateCatchingEvent">中间捕获事件</link>。
				对应类型的子元素是<emphasis role="bold">signalEventDefinition</emphasis>元素。
                 <programlisting>
&lt;intermediateCatchEvent id=&quot;signal&quot;&gt;
	<emphasis role="bold">&lt;signalEventDefinition signalRef="newCustomerSignal" /&gt;</emphasis>
&lt;/intermediateCatchEvent&gt;
                 </programlisting>
        	</para>
	      </section>

	      <section id="bpmnIntermediateSignalEventExample">
	        <title>实例</title>
	        <para>
	        	参考<link linkend="bpmnSignalEventDefinition">信号事件定义</link>章节。
	        </para>
	      </section>
	    </section>


	      <!-- //////////////////////////////////////// intermediate message catch  -->

        <section id="bpmnIntermediateMessageEvent">
		  <title>消息中间捕获事件</title>

		  <section id="bpmnIntermediateMessageEventDescription">
		    <title>描述</title>
		    <para>
			  一个中间<emphasis>捕获</emphasis><link linkend="bpmnMessageEventDefinition">消息</link>事件，捕获特定名称的消息。
		    </para>

		  </section>

		  <section id="bpmnIntermediateMessageEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  中间捕获消息事件显示为普通中间事件（圆圈套圆圈），
			  内部是一个消息小图标。消息图标是白色的（无填充），
			  表示<emphasis>捕获</emphasis>语义。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.intermediate.message.catch.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnIntermediateSignalEventXml.2">
	        <title>XML内容</title>
	         <para>
				 消息中间事件定义为标准<link linkend="bpmnIntermediateCatchingEvent">中间捕获事件</link>。
				 指定类型的子元素是<emphasis role="bold">messageEventDefinition</emphasis>元素。
                 <programlisting>
&lt;intermediateCatchEvent id=&quot;message&quot;&gt;
	<emphasis role="bold">&lt;messageEventDefinition signalRef="newCustomerMessage" /&gt;</emphasis>
&lt;/intermediateCatchEvent&gt;
                 </programlisting>
        	</para>
	      </section>

	      <section id="bpmnIntermediateMessageEventExample">
	        <title>实例</title>
	        <para>
	        	参考<link linkend="bpmnMessageEventDefinition">消息事件定义</link>章节。
	        </para>
	      </section>

      </section>


    <!-- //////////////////////////////////////// intermediate throwing events introduction -->

    <section id="bpmnIntermediateThrowEvent">
        <title>内部触发事件</title>
        <para>
			所有内部触发事件的定义都是同样的：
<programlisting>
&lt;intermediateThrowEvent id=&quot;myIntermediateThrowEvent&quot; &gt;
      &lt;XXXEventDefinition/&gt;
&lt;/intermediateThrowEvent&gt;</programlisting>
		  </para>

		  <para>
		    内部触发事件定义包含
		    <itemizedlist>
		      <listitem>
		        <para>
				  唯一标识（流程范围）
		        </para>
		      </listitem>
		      <listitem>
		        <para>
				  使用格式为<emphasis>XXXEventDefinition</emphasis>的XML子元素
				  （比如<emphasis>signalEventDefinition</emphasis>等）
				  定义中间触发事件的类型。
				  参考对应触发事件的类型，了解更多信息。
		        </para>
		      </listitem>
		    </itemizedlist>
		  </para>
    </section>

    <!-- //////////////////////////////////////// intermediate throwing none events  -->

    <section id="bpmnIntermediateThrowNoneEvent">
        <title>中间触发空事件</title>
        <para>
		  下面的流程图演示了一个空中间触发事件的例子，
		  它通常用于表示流程中的某个状态。

          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.intermediate.none.event.png"/></imageobject></mediaobject>

		  通过添加<link linkend="#executionListeners">执行监听器</link>，就可以很好地监控一些KPI。

<programlisting>
&lt;intermediateThrowEvent id="noneEvent"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:executionListener class="org.activiti.engine.test.bpmn.event.IntermediateNoneEventTest$MyExecutionListener" event="start" /&gt;
  &lt;/extensionElements&gt;
&lt;/intermediateThrowEvent&gt;
</programlisting>

		  这里你可以添加自己的代码，把事件发送给BAM工具或DWH。引擎不会为这个事件做任何事情，
		  它直接径直通过。
        </para>
    </section>

    <!-- //////////////////////////////////////// intermediate throwing signal events  -->

     <section id="bpmnIntermediateThrowSignalEvent">
		  <title>信号中间触发事件</title>

		  <section id="bpmnIntermediateThrowSignalEventDescription">
		    <title>描述</title>
		    <para>
			  中间<emphasis>触发</emphasis><link linkend="bpmnSignalEventDefinition">信号</link>事件为定义的信号抛出一个信号事件。
		    </para>

		    <para>
				在activiti中，信号会广播到所有激活的处理器中（比如，所以捕获信号事件）。
				信号可以通过同步和异步方式发布。
		    	<itemizedlist>
		    		<listitem>
		    			<para>
							默认配置下，信号是<emphasis role="bold">同步</emphasis>发送的。就是说，
							抛出事件的流程实例会等到信号发送给所有捕获流程实例才继续执行。
							捕获流程实例也会在触发流程实例的同一个事务中执行，
							意味着如果某个监听流程出现了技术问题（抛出异常），所有相关的实例都会失败。
		    			</para>
		    		</listitem>
		    		<listitem>
		    			<para>
							信号也可以<emphasis role="bold">异步</emphasis>发送。这时它会在到达抛出信号事件后决定哪些处理器是激活的。
							对这些激活的处理器，会保存一个异步提醒消息（任务），并发送给jobExecutor。
		    			</para>
		    		</listitem>
		    	</itemizedlist>

		    </para>

		  </section>

		  <section id="bpmnIntermediateThrowSignalEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  中间信号触发事件显示为普通中间事件（圆圈套圆圈），
			  内部又一个信号小图标。信号图标是黑色的（有填充），
			  表示<emphasis>触发</emphasis>语义。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.intermediate.signal.throw.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnIntermediateThrowSignalEventXml">
	        <title>XML内容</title>
	         <para>
			     消息中间事件定义为标准<link linkend="bpmnIntermediateThrowingEvent">中间触发事件</link>。
				 指定类型的子元素是<emphasis role="bold">signalEventDefinition</emphasis>元素。
                 <programlisting>
&lt;intermediateThrowEvent id=&quot;signal&quot;&gt;
	<emphasis role="bold">&lt;signalEventDefinition signalRef="newCustomerSignal" /&gt;</emphasis>
&lt;/intermediateThrowEvent&gt;
                 </programlisting>
        	</para>
        	<para>
        		异步信号事件如下所示：
        		<programlisting>
&lt;intermediateThrowEvent id=&quot;signal&quot;&gt;
	<emphasis role="bold">&lt;signalEventDefinition signalRef="newCustomerSignal" activiti:async=&quot;true&quot; /&gt;</emphasis>
&lt;/intermediateThrowEvent&gt;
                 </programlisting>
        	</para>
	      </section>

	      <section id="bpmnIntermediateSignalEventExample.2">
	        <title>实例</title>
	        <para>
	        	参考<link linkend="bpmnSignalEventDefinition">信号事件定义</link>章节。
	        </para>
	      </section>

      </section>

      <!-- //////////////////////////////////////// intermediate throwing compensation events  -->

     <section id="bpmnIntermediateThrowCompensationEvent">
		  <title>补偿中间触发事件</title>
		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>

		  <section id="bpmnIntermediateThrowCompensationEventDescription">
		    <title>描述</title>
		    <para>
			  中间<emphasis>触发</emphasis><link linkend="bpmnCompensationEventDefinition">补偿</link>事件
			  可以用来触发补偿。
		    </para>
		   	<para>
		   		<emphasis role="bold">触发补偿：</emphasis>
				补偿可以由特定节点或包含补偿事件的作用域触发。
				补偿是通过分配给节点的补偿处理器来完成的。
		   		<itemizedlist>
		   			<listitem>
		   				<para>
							当补偿由节点触发，对应的补偿处理器会根据节点成功完成的次数执行相同次数。
					   	</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							如果补偿由当前作用域触发，当前作用域的所有节点都会执行补偿，
							也包含并发分支。
					   	</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							补偿的触发是继承式的：如果执行补偿的节点是子流程，补偿会作用到子流程中包含的所有节点。
							如果子流程是内嵌节点，补偿会递归触发。
							然而，补偿不会传播到流程的上层：
							如果补偿在子流程中触发，不会传播到子流程范围外。
							bpmn规范定义，由节点触发的流程只会作用到“子流程同一级别”。
						</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							activiti的补偿执行次序与流程执行顺序相反。
							以为着最后完成的节点会最先执行补偿，诸如此类。
						</para>
					</listitem>
		   			<listitem>
						<para>
							中间触发补偿事件可以用来补偿成功完成的事务性子流程。
						</para>
		   			</listitem>
		   		</itemizedlist>
		   	</para>

			<para>
				<emphasis role="bold">注意：</emphasis>
				如果补偿被一个包含子流程的作用域触发，子流程还包含了关联补偿处理器的节点，
				补偿只会传播到子流程，如果它已经成功完成了。
				如果子流程中的节点也完成了，并关联了补偿处理器，
				如果子流程包含的这些节点还没有完成，就不会执行补偿处理器。
				参考下面实例：
				<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.throw.compensation.example1.png"/></imageobject></mediaobject>
				这个流程中，我们有两个并发分支，一些分支时内嵌子流程，一个是“使用信用卡”节点。
				假设两个分支都启动了，第一个分支等待用户完成“审核预定”任务。第二个分支执行“使用信用卡”节点，
				并发生了一个错误，这导致“取消预定”事件，并触发补偿。
				这时，并发子流程还没有结束，意味着补偿事件不会传播给子流程，
				所以“取消旅店预定”这个补偿处理器不会执行。
				如果用户任务（就是内嵌子流程）在“取消预定”之前完成了，
				补偿就会传播给内嵌子流程。
			</para>
			<para>
				<emphasis role="bold">流程变量：</emphasis>
				当补偿内嵌子流程时，用来执行补偿处理器的分支可以访问子流程的本地流程实例，
				因为这时它是子流程完成的分支。
				为了实现这个功能，流程变量的快照会分配给分支（为执行子流程而创建的分支）。
				为此，有以下限制条件：
				<itemizedlist>
					<listitem>
						<para>
							补偿处理器无法访问子流程内部创建的，添加到同步分支的变量。
						</para>
					</listitem>
					<listitem>
						<para>
							分配给分支的流程变量在继承关系上层的（分配给流程实例的流程变量没有包含在快照中）：
							补偿触发时，补偿处理器通过它们所在的地方访问这些流程变量。
						</para>
					</listitem>
					<listitem>
						<para>
							变量快照只用于内嵌子流程，不适用其他节点。
						</para>
					</listitem>
				</itemizedlist>
			</para>

			<para>
				<emphasis role="bold">已知限制：</emphasis>
				<itemizedlist>
					<listitem>
						<para>
							<code>waitForCompletion="false"</code>还不支持。当补偿使用中间触发补偿事件触发时，
							事件没有等待，在补偿成功结束后。
						 </para>
					</listitem>
					<listitem>
						<para>
							补偿自己由并发分支执行。并发分支的执行顺序与被补偿的节点完成次序相反。
							未来activiti可能支持选项来顺序执行补偿。
						</para>
					</listitem>
					<listitem>
						<para>
							补偿不会传播给callActivity调用的子流程实例。
						</para>
					</listitem>
				</itemizedlist>
			</para>
		  </section>

		  <section id="bpmnIntermediateThrowCompensationEventGraphicalNotation">
	        <title>图形标记</title>
	        <para>
			  中间补偿触发事件显示为标准中间事件（圆圈套圆圈），
			  内部是一个补偿小图标。补偿图标是黑色的（有填充），
			  表示<emphasis>触发</emphasis>语义。
	          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.intermediate.compensation.throw.event.png"/></imageobject></mediaobject>
	        </para>
	      </section>

	      <section id="bpmnIntermediateThrowSignalEventXml.2">
	        <title>Xml内容</title>
	         <para>
				 补偿中间事件定义为普通的<link linkend="bpmnIntermediateThrowingEvent">中间触发事件</link>。
				 对应类型的子元素是<emphasis role="bold">compensateEventDefinition</emphasis>元素。
                 <programlisting>
&lt;intermediateThrowEvent id=&quot;throwCompensation&quot;&gt;
	&lt;compensateEventDefinition /&gt;
&lt;/intermediateThrowEvent&gt;</programlisting>
                 另外，可选参数<code>activityRef</code>可以用来触发特定作用域/节点的补偿：
                  <programlisting>
&lt;intermediateThrowEvent id=&quot;throwCompensation&quot;&gt;
	&lt;compensateEventDefinition activityRef=&quot;bookHotel&quot; /&gt;
&lt;/intermediateThrowEvent&gt;</programlisting>
        	</para>

	      </section>

      </section>

</section>


	  <!--

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  												Sequence flows

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   -->


	  <section id="bpmnSequenceFlow">

      <title>顺序流</title>

      <section id="sequenceFlowDescription">

        <title>描述</title>

        <para>
		  顺序流是连接两个流程节点的连线。
		  流程执行完一个节点后，会沿着节点的所有外出顺序流继续执行。
		  就是说，BPMN 2.0默认的行为就是并发的：
		  两个外出顺序流会创造两个单独的，并发流程分支。
        </para>

      </section>

      <section id="sequenceFlowGraphicalNotation">

        <title>图形标记</title>

        <para>
		  顺序流显示为从起点到终点的箭头。
		  箭头总是指向终点。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.sequence.flow.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="sequenceFlowXml">

        <title>XML内容</title>

        <para>
		  顺序流需要流程范围内唯一的<emphasis role="bold">id</emphasis>，
		  以及对<emphasis role="bold">起点</emphasis>与
		  <emphasis role="bold">终点</emphasis>元素的引用。
          <programlisting>
&lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;theStart&quot; targetRef=&quot;theTask&quot; /&gt;</programlisting>
        </para>

      </section>

    <section id="bpmnConditionalSequenceFlow">

      <title>条件顺序流</title>

      <section id="condSeqFlowDescription">

        <title>描述</title>

        <para>
		  可以为顺序流定义一个条件。离开一个BPMN 2.0节点时，
		  默认会计算外出顺序流的条件。
		  如果条件结果为<emphasis>true</emphasis>,
		  就会选择外出顺序流继续执行。当多条顺序流被选中时，
		  就会创建多条<emphasis>分支</emphasis>，
		  流程会继续以并行方式继续执行。
        </para>

        <para>
          <emphasis role="bold">注意：</emphasis>上面的讨论仅涉及BPMN 2.0节点（和事件），
		  不包括网关。网关会用特定的方式处理顺序流中的条件，
		  这与网关类型相关。
        </para>

      </section>

      <section id="conditionalSequenceFlowGraphicalNotation">

        <title>图形标记</title>

        <para>
		  条件顺序流显示为一个正常的顺序流，不过在起点有一个菱形。
		  条件表达式也会显示在顺序流上。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.conditional.sequence.flow.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="conditionalSequenceFlowXml">

        <title>XML内容</title>

        <para>
		  条件顺序流定义为一个正常的顺序流，
		  包含<emphasis role="bold">conditionExpression</emphasis>子元素。
		  注意目前只支持<emphasis>tFormalExpressions</emphasis>，
		  如果没有设置<emphasis>xsi:type=&quot;&quot;</emphasis>,
		  就会默认值支持目前支持的表达式类型。
          <programlisting>&lt;sequenceFlow id=&quot;flow&quot; sourceRef=&quot;theStart&quot; targetRef=&quot;theTask&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;
    &lt;![CDATA[${order.price &gt; 100 &amp;&amp; order.price &lt; 250}]]&gt;
  &lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;</programlisting>
        </para>
        <para>
		  当前条件表达式<emphasis role="bold">只能使用UEL</emphasis>，
		  可以参考<link linkend="apiExpressions">表达式章节</link>获取更多信息。
		  使用的表达式需要返回boolean值，否则会在解析表达式时抛出异常。
          <itemizedlist>
            <listitem>
              <para>
			    下面的例子引用了流程变量的数据，
				通过getter调用JavaBean。
              </para>
              <para>
<programlisting>&lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;
  &lt;![CDATA[${order.price &gt; 100 &amp;&amp; order.price &lt; 250}]]&gt;
&lt;/conditionExpression&gt;</programlisting>
              </para>
            </listitem>
             <listitem>
              <para>
			    这个例子通过调用方法返回一个boolean值。
<programlisting>&lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;
  &lt;![CDATA[${order.isStandardOrder()}]]&gt;
&lt;/conditionExpression&gt;</programlisting>
              </para>
            </listitem>
          </itemizedlist>

        </para>

        <para>
		  在activiti发布包中，包含以下流程实例，使用了值和方法表达式
		  （参考<emphasis>org.activiti.examples.bpmn.expression)</emphasis>包）：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.uel-expression.on.seq.flow.png"/></imageobject></mediaobject>
        </para>

      </section>

    </section>

    <section id="bpmnDefaultSequenceFlow">

      <title>默认顺序流</title>

      <section id="bpmnDefaultSequenceFlowDescription">
        <title>描述</title>
        <para>
		  所有的BPMN 2.0任务和网关都可以设置一个<emphasis role="bold">默认顺序流</emphasis>。
		  只有在节点的其他外出顺序流不能被选中是，才会使用它作为外出顺序流继续执行。
		  默认顺序流的条件设置不会生效。
        </para>
      </section>

      <section id="bpmnDefaultSequenceFlowGraphicalNotation">
        <title>图形标记</title>
        <para>
		  默认顺序流显示为了普通顺序流，起点有一个“斜线”标记。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.default.sequence.flow.png"/></imageobject></mediaobject>
        </para>
      </section>

      <section id="bpmnDefaultSequenceFlowXmlRepresentation">
        <title>XML内容</title>
        <para>
		  默认顺序流通过对应节点的<emphasis role="bold">default属性</emphasis>定义。
		  下面的XML代码演示了排他网关设置了默认顺序流<emphasis>flow 2</emphasis>。
		  只有当<emphasis>conditionA</emphasis>和<emphasis>conditionB</emphasis>都返回false时，
		  才会选择它作为外出连线继续执行。
          <programlisting>
&lt;exclusiveGateway id=&quot;exclusiveGw&quot; name=&quot;Exclusive Gateway&quot; <emphasis role="bold">default=&quot;flow2&quot;</emphasis> /&gt;
&lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;task1&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${conditionA}&lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;
&lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;task2&quot;/&gt;
&lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;task3&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${conditionB}&lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;
          </programlisting>
		  对应下面的图形显示：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.default.sequence.flow.example.png"/></imageobject></mediaobject>
        </para>
      </section>

    </section>

  </section>

	  <!--

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  												Gateways

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   -->


    <section id="bpmnGateways">

      <title>网关</title>

      <para>
	    网关用来控制流程的流向（或像BPMN 2.0里描述的那样，流程的<emphasis>tokens</emphasis>。）
		网关可以<emphasis>消费</emphasis>也可以<emphasis>生成</emphasis>token。
      </para>

      <para>
	    网关显示成菱形图形，内部有有一个小图标。
		图标表示网关的类型。
        <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.gateway.png"/></imageobject></mediaobject>
      </para>

     <!-- ///////////////////////////////////////  Exclusive Gateway -->

    <section id="bpmnExclusiveGateway">

      <title>排他网关</title>

      <section id="exclusiveGatewayDescription">

        <title>描述</title>

        <para>
		  排他网关（也叫<emphasis>异或（XOR）网关</emphasis>，或更技术性的叫法
		  <emphasis>基于数据的排他网关</emphasis>），
		  用来在流程中实现<emphasis role="bold">决策</emphasis>。
		  当流程执行到这个网关，所有外出顺序流都会被处理一遍。
		  其中条件解析为true的顺序流（或者没有设置条件，概念上在顺序流上定义了一个<emphasis>'true'</emphasis>）
		  会被选中，让流程继续运行。
        </para>

        <para>
          <emphasis role="bold">注意这里的外出顺序流
		  与BPMN 2.0通常的概念是不同的。通常情况下，所有条件结果为true的顺序流
		  都会被选中，以并行方式执行，但排他网关只会选择一条顺序流执行。
		  就是说，虽然多个顺序流的条件结果为true，
		  那么XML中的第一个顺序流（也只有这一条）会被选中，并用来继续运行流程。
		  如果没有选中任何顺序流，会抛出一个异常。</emphasis>
        </para>

      </section>

      <section id="exclusiveGatewayGraphNotation">

        <title>图形标记</title>

        <para>
		  排他网关显示成一个普通网关（比如，菱形图形），
		  内部是一个“X”图标，表示<emphasis>异或（XOR）</emphasis>语义。
		  注意，没有内部图标的网关，默认为排他网关。
		  BPMN 2.0规范不允许在同一个流程定义中同时使用没有X和有X的菱形图形。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.exclusive.gateway.notation.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="exclusiveGatewayXML">

        <title>XML内容</title>

        <para>
		  排他网关的XML内容是很直接的：用一行定义了网关，
		  条件表达式定义在外出顺序流中。
		  参考<link linkend="bpmnConditionalSequenceFlow">条件顺序流</link>
		  获得这些表达式的可用配置。
       </para>

       <para>
	      参考下面模型实例：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.exclusive.gateway.png"/></imageobject></mediaobject>
          它对应的XML内容如下：
          <programlisting>&lt;exclusiveGateway id=&quot;exclusiveGw&quot; name=&quot;Exclusive Gateway&quot; /&gt;

&lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;theTask1&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${input == 1}&lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;

&lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;theTask2&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${input == 2}&lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;

&lt;sequenceFlow id=&quot;flow4&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;theTask3&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${input == 3}&lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;</programlisting>
        </para>

      </section>

    </section>

    <!-- ///////////////////////////////////////  Parallel Gateway -->

    <section id="bpmnParallelGateway">

      <title>并行网关</title>

      <section id="bpmnParallelGatewayDescription">

        <title>描述</title>

        <para>
		  网关也可以表示流程中的并行情况。最简单的并行网关是
		  <emphasis role="bold">并行网关</emphasis>，它允许将流程
		  <emphasis>分</emphasis>成多条分支，也可以把多条分支
		  <emphasis>汇聚</emphasis>到一起。
          of execution.
        </para>

        <para>
		  并行网关的功能是基于进入和外出的顺序流的：
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">分支：</emphasis>
				并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">汇聚：</emphasis>
				所有到达并行网关，在此等待的进入分支，
				直到所有进入顺序流的分支都到达以后，
				流程就会通过汇聚网关。
              </para>
            </listitem>
          </itemizedlist>
		  注意，如果同一个并行网关有多个进入和多个外出顺序流，
		  它就同时具有<emphasis role="bold">分支和汇聚功能</emphasis>。
		  这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。
        </para>

        <para>
          <emphasis role="bold">与其他网关的主要区别是，并行网关不会解析条件。
		  即使顺序流中定义了条件，也会被忽略。</emphasis>
        </para>

      </section>

      <section id="bpmnParallelGatewayGraphicalNotation">

        <title>图形标记</title>

        <para>
		  并行网关显示成一个普通网关（菱形）内部是一个“加号”图标，
		  表示“与（AND）”语义。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.parallel.gateway.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnParallelGatewayyXML">

        <title>XML内容</title>

        <para>
		  定义并行网关只需要一行XML：
          <programlisting>&lt;parallelGateway id=&quot;myParallelGateway&quot; /></programlisting>
		  实际发生的行为（分支，聚合，同时分支聚合），
		  要根据并行网关的顺序流来决定。
        </para>

        <para>
		  参考如下代码：
<programlisting>
    &lt;startEvent id=&quot;theStart&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;theStart&quot; targetRef=&quot;fork&quot; /&gt;

    <emphasis role="bold">&lt;parallelGateway id=&quot;fork&quot; /&gt;</emphasis>
    &lt;sequenceFlow sourceRef=&quot;fork&quot; targetRef=&quot;receivePayment&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;fork&quot; targetRef=&quot;shipOrder&quot; /&gt;

    &lt;userTask id=&quot;receivePayment&quot; name=&quot;Receive Payment&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;receivePayment&quot; targetRef=&quot;join&quot; /&gt;

    &lt;userTask id=&quot;shipOrder&quot; name=&quot;Ship Order&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;shipOrder&quot; targetRef=&quot;join&quot; /&gt;

    <emphasis role="bold">&lt;parallelGateway id=&quot;join&quot; /&gt;</emphasis>
    &lt;sequenceFlow sourceRef=&quot;join&quot; targetRef=&quot;archiveOrder&quot; /&gt;

    &lt;userTask id=&quot;archiveOrder&quot; name=&quot;Archive Order&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;archiveOrder&quot; targetRef=&quot;theEnd&quot; /&gt;

    &lt;endEvent id=&quot;theEnd&quot; /&gt;
</programlisting>
        </para>

        <para>
		  上面例子中，流程启动之后，会创建两个任务：
          <programlisting>ProcessInstance pi = runtimeService.startProcessInstanceByKey("forkJoin");
TaskQuery query = taskService.createTaskQuery()
                         .processInstanceId(pi.getId())
                         .orderByTaskName()
                         .asc();

List&lt;Task&gt; tasks = query.list();
assertEquals(2, tasks.size());

Task task1 = tasks.get(0);
assertEquals("Receive Payment", task1.getName());
Task task2 = tasks.get(1);
assertEquals("Ship Order", task2.getName());</programlisting>
		  当两个任务都完成时，第二个并行网关会汇聚两个分支，因为它只有一条外出连线，
		  不会创建并行分支，
		  只会创建<emphasis>归档订单</emphasis>任务。
        </para>

        <para>
		  注意并行网关不需要是“平衡的”（比如，
		  对应并行网关的进入和外出节点数目相等）。
		  并行网关只是等待所有进入顺序流，并为每个外出顺序流创建并发分支，
		  不会受到其他流程节点的影响。
		  所以下面的流程在BPMN 2.0中是合法的：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.unbalanced.parallel.gateway.png"/></imageobject></mediaobject>
        </para>

      </section>

    </section>

    <!-- ///////////////////////////////////////  Inclusive Gateway -->

    <section id="bpmnInclusiveGateway">

      <title>包含网关</title>

      <section id="bpmnInclusiveGatewayDescription">

        <title>描述</title>

        <para>
		  <emphasis role="bold">包含网关</emphasis>可以看做是排他网关和并行网关的结合体。
		  和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。
		  但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。
        </para>

        <para>
		  包含网关的功能是基于进入和外出顺序流的：
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">分支：</emphasis>
				所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行，
				会为每个顺序流创建一个分支。
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">汇聚：</emphasis>
				所有并行分支到达包含网关，会进入等待章台，
				直到每个包含流程token的进入顺序流的分支都到达。
				这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。
				在汇聚之后，流程会穿过包含网关继续执行。
              </para>
            </listitem>
          </itemizedlist>
		  注意，如果同一个包含节点拥有多个进入和外出顺序流，
		  它就会同时<emphasis role="bold">含有分支和汇聚功能</emphasis>。
		  这时，网关会先汇聚所有拥有流程token的进入顺序流，
		  再根据条件判断结果为true的外出顺序流，为它们生成多条并行分支。
        </para>

      </section>

      <section id="bpmnInclusiveGatewayGraphicalNotation">

        <title>图形标记</title>

        <para>
		  并行网关显示为一个普通网关（菱形），内部包含一个圆圈图标。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.inclusive.gateway.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnInclusiveGatewayXML">

        <title>XML内容</title>

        <para>
		  定义一个包含网关需要一行XML：
          <programlisting>&lt;inclusiveGateway id=&quot;myInclusiveGateway&quot; /></programlisting>
		  实际的行为（分支，汇聚或同时分支汇聚），
		  是由连接在包含网关的顺序流决定的。
        </para>

        <para>
		  参考如下代码：
<programlisting>
    &lt;startEvent id=&quot;theStart&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;theStart&quot; targetRef=&quot;fork&quot; /&gt;

    <emphasis role="bold">&lt;inclusiveGateway id=&quot;fork&quot; /&gt;</emphasis>
    &lt;sequenceFlow sourceRef=&quot;fork&quot; targetRef=&quot;receivePayment&quot; &gt;
    &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${paymentReceived == false}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;
    &lt;sequenceFlow sourceRef=&quot;fork&quot; targetRef=&quot;shipOrder&quot; &gt;
    &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${shipOrder == true}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;

    &lt;userTask id=&quot;receivePayment&quot; name=&quot;Receive Payment&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;receivePayment&quot; targetRef=&quot;join&quot; /&gt;

    &lt;userTask id=&quot;shipOrder&quot; name=&quot;Ship Order&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;shipOrder&quot; targetRef=&quot;join&quot; /&gt;

    <emphasis role="bold">&lt;inclusiveGateway id=&quot;join&quot; /&gt;</emphasis>
    &lt;sequenceFlow sourceRef=&quot;join&quot; targetRef=&quot;archiveOrder&quot; /&gt;

    &lt;userTask id=&quot;archiveOrder&quot; name=&quot;Archive Order&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;archiveOrder&quot; targetRef=&quot;theEnd&quot; /&gt;

    &lt;endEvent id=&quot;theEnd&quot; /&gt;
</programlisting>
        </para>

        <para>
		  在上面的例子中，流程开始之后，如果流程变量为paymentReceived == false和shipOrder == true，
		  就会创建两个任务。如果，只有一个流程变量为true，就会只创建一个任务。
		  如果没有条件为true，就会抛出一个异常。
		  如果想避免异常，可以定义一个默认顺序流。下面的例子中，会创建一个任务，发货任务：
          <programlisting>HashMap&lt;String, Object&gt; variableMap = new HashMap&lt;String, Object&gt;();
          variableMap.put("receivedPayment", true);
          variableMap.put("shipOrder", true);
          ProcessInstance pi = runtimeService.startProcessInstanceByKey("forkJoin");
TaskQuery query = taskService.createTaskQuery()
                         .processInstanceId(pi.getId())
                         .orderByTaskName()
                         .asc();

List&lt;Task&gt; tasks = query.list();
assertEquals(1, tasks.size());

Task task = tasks.get(0);
assertEquals("Ship Order", task.getName());</programlisting>
		  当任务完成后，第二个包含网关会汇聚两个分支，
		  因为只有一个外出顺序流，所以不会创建并行分支，
		  只有<emphasis>归档订单</emphasis>任务会被激活。
        </para>

        <para>
		  注意，包含网关不需要“平衡”（比如，
		  对应包含网关的进入和外出数目需要相等）。
		  包含网关会等待所有进入顺序流完成，
		  并为每个外出顺序流创建并行分支，
		  不会受到流程中其他元素的影响。
        </para>

      </section>

    </section>

    <!-- ///////////////////////////////////////  Event-based Gateway -->

    <section id="bpmnEventbasedGateway">

      <title>基于事件网关</title>

      <section id="eventBasedGatewayDescription">

        <title>描述</title>

        <para>
			基于事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。
			当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。
			与此同时，会为每个外出顺序流创建相对的事件订阅。
        </para>

        <para>
			注意基于事件网关的外出顺序流和普通顺序流不同。这些顺序流不会真的&quot;执行&quot;。
			相反，它们让流程引擎去决定执行到基于事件网关的流程需要订阅哪些事件。
			要考虑以下条件：
        	<itemizedlist>
        		<listitem>
        			<para>
						基于事件网关必须有两条或以上外出顺序流。
        			</para>
        		</listitem>
        		<listitem>
        			<para>
						基于事件网关后，只能使用<code>intermediateCatchEvent</code>类型。
						（activiti不支持基于事件网关后连接ReceiveTask。）
        			</para>
        		</listitem>
        		<listitem>
        			<para>
						连接到基于事件网关的<code>intermediateCatchEvent</code>只能有一条进入顺序流。
        			</para>
        		</listitem>
        	</itemizedlist>

        </para>


      </section>

      <section id="eventBasedGatewayGraphNotation">

        <title>图形标记</title>

        <para>
		  基于事件网关和其他BPMN网关一样显示成一个菱形，
		  内部包含指定图标。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.event.based.gateway.notation.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="eventBasedGatewayXML">

        <title>XML内容</title>

        <para>
		  用来定义基于事件网关的XML元素是<code>eventBasedGateway</code>。
        </para>

      </section>

      <section id="eventBasedGatewayExample">
      	<title>实例</title>

      	<para>
			下面的流程是一个使用基于事件网关的例子。当流程执行到基于事件网关时，
			流程会暂停执行。与此同时，流程实例会订阅警告信号事件，并创建一个10分钟后触发的定时器。
			这会产生流程引擎为一个信号事件等待10分钟的效果。如果10分钟内发出信号，定时器就会取消，流程会沿着信号执行。
			如果信号没有出现，流程会沿着定时器的方向前进，信号订阅会被取消。

	      	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.event.based.gateway.example.png"/></imageobject></mediaobject>
<programlisting>
&lt;definitions id=&quot;definitions&quot;
	xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
	xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
	targetNamespace=&quot;Examples&quot;&gt;

	&lt;signal id=&quot;alertSignal&quot; name=&quot;alert&quot; /&gt;

	&lt;process id=&quot;catchSignal&quot;&gt;

		&lt;startEvent id=&quot;start&quot; /&gt;

		&lt;sequenceFlow sourceRef=&quot;start&quot; targetRef=&quot;gw1&quot; /&gt;

		&lt;eventBasedGateway id=&quot;gw1&quot; /&gt;

		&lt;sequenceFlow sourceRef=&quot;gw1&quot; targetRef=&quot;signalEvent&quot; /&gt;
		&lt;sequenceFlow sourceRef=&quot;gw1&quot; targetRef=&quot;timerEvent&quot; /&gt;

		&lt;intermediateCatchEvent id=&quot;signalEvent&quot; name=&quot;Alert&quot;&gt;
			&lt;signalEventDefinition signalRef=&quot;alertSignal&quot; /&gt;
		&lt;/intermediateCatchEvent&gt;

		&lt;intermediateCatchEvent id=&quot;timerEvent&quot; name=&quot;Alert&quot;&gt;
			&lt;timerEventDefinition&gt;
				&lt;timeDuration&gt;PT10M&lt;/timeDuration&gt;
			&lt;/timerEventDefinition&gt;
		&lt;/intermediateCatchEvent&gt;

		&lt;sequenceFlow sourceRef=&quot;timerEvent&quot; targetRef=&quot;exGw1&quot; /&gt;
		&lt;sequenceFlow sourceRef=&quot;signalEvent&quot; targetRef=&quot;task&quot; /&gt;

		&lt;userTask id=&quot;task&quot; name=&quot;Handle alert&quot;/&gt;

		&lt;exclusiveGateway id=&quot;exGw1&quot; /&gt;

		&lt;sequenceFlow sourceRef=&quot;task&quot; targetRef=&quot;exGw1&quot; /&gt;
		&lt;sequenceFlow sourceRef=&quot;exGw1&quot; targetRef=&quot;end&quot; /&gt;

		&lt;endEvent id=&quot;end&quot; /&gt;
&lt;/process&gt;
&lt;/definitions&gt;</programlisting>
      	</para>
      </section>

    </section>


</section>

   	 <!--

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  												Tasks

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   -->

    <section id="bpmnTask">
    	<title> 任务</title>

		<section id="bpmnUserTask">

			<title>用户任务</title>

			<section id="bpmnUserTaskDescription">

			 <title>描述</title>

			 <para>
			   用户任务用来设置必须由人员完成的工作。
			   当流程执行到用户任务，会创建一个新任务，
			   并把这个新任务加入到分配人或群组的任务列表中。
			 </para>

			</section>

			<section id="bpmnUserTaskGraphicalNotation">

			 <title>图形标记</title>

			 <para>
			   用户任务显示成一个普通任务（圆角矩形），左上角有一个小用户图标。
			   <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.user.task.png"/></imageobject></mediaobject>
			 </para>

			</section>

			<section id="bpmnUserTaskXml">

				<title>XML内容</title>

				<para>
				  XML中的用户任务定义如下。<emphasis>id</emphasis>属性是必须的。
				  <emphasis>name</emphasis>属性是可选的。
				  <programlisting>
&lt;userTask id=&quot;theTask&quot; name=&quot;Important task&quot; /&gt;
				  </programlisting>
				</para>

				<para>
				用户任务也可以设置描述。实际上所有BPMN 2.0元素都可以设置描述。
				添加<emphasis role="bold">documentation</emphasis>元素可以定义描述。
				  <programlisting>
&lt;userTask id=&quot;theTask&quot; name=&quot;Schedule meeting&quot; &gt;
  &lt;documentation&gt;
	  Schedule an engineering meeting for next week with the new hire.
  &lt;/documentation&gt;</programlisting>

				  描述文本可以通过标准的java方法来获得：
				  <programlisting>task.getDescription()</programlisting>
				</para>

			</section>
            <section id="bpmnUserTaskDueDate">
              <title>持续时间</title>
              <para>
			    任务可以用一个字段来描述任务的持续时间。可以使用查询API来对持续时间进行搜索，
				根据在时间之前或之后进行搜索。
              </para>
              <para>
			    我们提供了一个节点扩展，在任务定义中设置一个表达式，
				这样在任务创建时就可以为它设置初始持续时间。表达式<emphasis role="bold">应该是<literal>java.util.Date</literal>，
				<literal>java.util.String (ISO8601格式)</literal>，ISO8601 持续时间 (比如PT50M)或<literal>null</literal></emphasis>。
				例如：你可以在流程中使用上述格式输入日期，或在前一个服务任务中计算一个时间。
				这里使用了持续时间，持续时间会基于当前时间进行计算，再通过给定的时间段累加。
				比如，使用"PT30M"作为持续时间，任务就会从现在开始持续30分钟。
              </para>
               <programlisting>
&lt;userTask id=&quot;theTask&quot; name=&quot;Important task&quot; <emphasis role="bold">activiti:dueDate=&quot;${dateVariable}&quot;</emphasis>/&gt;</programlisting>
            </section>
            <para>
			  任务的持续时间也可以通过<literal>TaskService</literal>修改，
			  或在<literal>TaskListener</literal>中通过传入的<literal>DelegateTask</literal>参数修改。
            </para>
			<section id="bpmnUserTaskAssignment">

				<title>用户分配</title>

				<para>
				  用户任务可以直接分配给一个用户。
				  这可以通过<emphasis role="bold">humanPerformer</emphasis>元素定义。
				  <emphasis>humanPerformer</emphasis>定义需要一个
				  <emphasis role="bold">resourceAssignmentExpression</emphasis>来实际定义用户。
				  当前，只支持<emphasis role="bold">formalExpressions</emphasis>。
				  <programlisting>
&lt;process ... &gt;

  ...

  &lt;userTask id='theTask' name='important task' &gt;
    &lt;humanPerformer&gt;
      &lt;resourceAssignmentExpression&gt;
        &lt;formalExpression&gt;kermit&lt;/formalExpression&gt;
      &lt;/resourceAssignmentExpression&gt;
    &lt;/humanPerformer&gt;
  &lt;/userTask&gt;</programlisting>
				</para>

				<para>
				  <emphasis role="bold">只有一个</emphasis>用户可以坐拥任务的执行者分配给用户。
				  在activiti中，用户叫做<emphasis role="bold">执行者</emphasis>。
				  拥有执行者的用户不会出现在其他人的任务列表中，
				  只能出现执行者的<emphasis role="bold">个人任务列表</emphasis>中。
				</para>

				<para>
				  直接分配给用户的任务可以通过TaskService像下面这样获取：
				  <programlisting>List&lt;Task&gt; tasks = taskService.createTaskQuery().taskAssignee(&quot;kermit&quot;).list();</programlisting>
				</para>

        <para>
		  任务也可以加入到人员的<emphasis role="bold">候选任务列表</emphasis>中。
		  这时，需要使用<emphasis role="bold">potentialOwner</emphasis>元素。
		  用法和<emphasis>humanPerformer</emphasis>元素类似。注意它需要指定表达式中的每个项目是人员还是群组
		  （引擎猜不出来）。
          <programlisting>
&lt;process ... &gt;

  ...

  &lt;userTask id='theTask' name='important task' &gt;
    &lt;potentialOwner&gt;
      &lt;resourceAssignmentExpression&gt;
        <emphasis role="bold">&lt;formalExpression&gt;user(kermit), group(management)&lt;/formalExpression&gt;</emphasis>
      &lt;/resourceAssignmentExpression&gt;
    &lt;/potentialOwner&gt;
  &lt;/userTask&gt;</programlisting>
        </para>

        <para>
		  使用<emphasis>potentialOwner</emphasis>元素定义的任务，可以像下面这样获取
		  （使用<emphasis>TaskQuery</emphasis>的发那个发与查询设置了执行者的任务类似）：
          <programlisting>
 List&lt;Task&gt; tasks = taskService.createTaskQuery().taskCandidateUser(&quot;kermit&quot;);</programlisting>

		  这会获取所有kermit为<emphasis role="bold">候选人</emphasis>的任务，
		  例如：表达式中包含<emphasis>user(kermit)</emphasis>。
		  这也会获得所有<emphasis role="bold">分配包含kermit这个成员的群组</emphasis>的任务。
		  （比如，<emphasis>group(management)</emphasis>，前提是kermit是这个组的成员，
		  并且使用了activiti的账号组件）。
		  用户所在的群组是在运行阶段获取的，它们可以通过
		  <link linkend="apiEngine">IdentityService</link>进行管理。
        </para>

        <para>
		  如果没有显示指定设置的是用户还是群组，
		  引擎会默认当做群组处理。所以下面的设置与<emphasis>使用group(accountancy)</emphasis>效果一样。
          <programlisting>
&lt;formalExpression&gt;accountancy&lt;/formalExpression&gt;</programlisting>
        </para>

			</section> <!-- task assignment -->

			<section id="bpmnUserTaskUserAssignmentExtension">

          <title>Activiti对任务分配的扩展</title>

          <para>
		    当分配不复杂时，用户和组的设置非常麻烦。
			为避免复杂性，可以使用用户任务的<link linkend="bpmnCustomExtensions">自定义扩展</link>。
          </para>

          <para>
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">assignee属性</emphasis>：这个自定义扩展可以直接把用户任务分配给指定用户。
                  <programlisting>
&lt;userTask id=&quot;theTask&quot; name=&quot;my task&quot; activiti:assignee=&quot;kermit&quot; /&gt;</programlisting>

                  它和使用<link linkend="bpmnUserTaskAssignment">上面</link>定义的<emphasis role="bold">humanPerformer</emphasis>
				  效果完全一样。
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">candidateUsers属性</emphasis>：这个自定义扩展可以为任务设置候选人。
                  <programlisting>
&lt;userTask id=&quot;theTask&quot; name=&quot;my task&quot; activiti:candidateUsers=&quot;kermit, gonzo&quot; /&gt;</programlisting>

                  它和使用<link linkend="bpmnUserTaskAssignment">上面</link>定义的<emphasis role="bold">potentialOwner</emphasis>
				  效果完全一样。
				  注意它不需要像使用<emphasis>potentialOwner</emphasis>通过<emphasis>user(kermit)</emphasis>声明，
				  因为这个属性只能用于人员。
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">candidateGroups属性</emphasis>：这个自定义扩展可以为任务设置候选组。
                  <programlisting>
&lt;userTask id=&quot;theTask&quot; name=&quot;my task&quot; activiti:candidateGroups=&quot;management, accountancy&quot; /&gt;</programlisting>

                  它和使用<link linkend="bpmnUserTaskAssignment">上面</link>定义的<emphasis role="bold">potentialOwner</emphasis>
				  效果完全一样。
				  注意它不需要像使用<emphasis>potentialOwner</emphasis>通过<emphasis>group(management)</emphasis>声明，
				  因为这个属性只能用于群组。
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>candidateUsers</emphasis> 和 <emphasis>candidateGroups</emphasis> 可以同时设置在同一个用户任务中。
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <para>
		    注意：虽然activiti提供了一个账号管理组件，
			也提供了<link linkend="apiEngine">IdentityService</link>，
			但是账号组件不会检测设置的用户是否村爱。
			它嵌入到应用中，也允许activiti与其他已存的账户管理方案集成。
          </para>

          <para>
		    如果上面的方式还不满足需求，还可以使用创建事件的<link linkend="taskListeners">任务监听器</link>
			来实现自定义的分配逻辑：
            <programlisting>
&lt;userTask id=&quot;task1&quot; name=&quot;My task&quot; &gt;
  &lt;extensionElements&gt;
    &lt;activiti:taskListener event=&quot;create&quot; class=&quot;org.activiti.MyAssignmentHandler&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/userTask&gt;</programlisting>
            <literal>DelegateTask</literal>会传递给<literal>TaskListener</literal>的实现，
			通过它可以设置执行人，候选人和候选组：
            <programlisting>
public class MyAssignmentHandler implements TaskListener {

  public void notify(DelegateTask delegateTask) {
    // Execute custom identity lookups here

    // and then for example call following methods:
    delegateTask.setAssignee(&quot;kermit&quot;);
    delegateTask.addCandidateUser(&quot;fozzie&quot;);
    delegateTask.addCandidateGroup(&quot;management&quot;);
    ...
  }

}</programlisting>
          </para>

          <para>
		    使用spring时，可以使用向上面章节中介绍的自定义分配属性，
			使用<link linkend="springExpressions">表达式</link>
			把<link linkend="taskListeners">任务监听器</link>设置为spring代理的bean，
			让这个监听器监听任务的<emphasis>创建</emphasis>事件。
			下面的例子中，执行者会通过调用<literal>ldapService</literal>这个spring bean的<literal>findManagerOfEmployee</literal>方法获得。
			流程变量<emphasis>emp</emphasis>会作为参数传递给bean。
            <programlisting>&lt;userTask id=&quot;task&quot; name=&quot;My Task&quot; activiti:assignee=&quot;${ldapService.findManagerForEmployee(emp)}&quot;/&gt;</programlisting>
			也可以用来设置候选人和候选组：
            <programlisting>&lt;userTask id=&quot;task&quot; name=&quot;My Task&quot; activiti:candidateUsers=&quot;${ldapService.findAllSales()}&quot;/&gt;</programlisting>
			注意方法返回类型只能为<literal>String</literal>或<literal>Collection&lt;String&gt;</literal>
			（对应候选人和候选组）：
            <programlisting>
public class FakeLdapService {

  public String findManagerForEmployee(String employee) {
    return &quot;Kermit The Frog&quot;;
  }

  public List&lt;String&gt; findAllSales() {
    return Arrays.asList(&quot;kermit&quot;, &quot;gonzo&quot;, &quot;fozzie&quot;);
  }

}</programlisting>
          </para>

        </section> <!-- task assignment extensions -->

		</section>

		<section id="bpmnScriptTask">

		  <title>脚本任务</title>

		  <section id="bpmnScriptTaskDescription">

		    <title>描述</title>

		    <para>
			  脚本任务时一个自动节点。当流程到达脚本任务，
			  会执行对应的脚本。
		    </para>

		  </section>

		  <section id="bpmnScriptTaskGraphicalNotation">

		    <title>图形标记</title>

		    <para>
			  脚本任务显示为标准BPMN 2.0任务（圆角矩形），
			  左上角有一个脚本小图标。
		      <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.scripttask.png"/></imageobject></mediaobject>
		    </para>

		  </section>

		  <section id="bpmnScriptTaskXml">

		    <title>XML内容</title>

		    <para>
			  脚本任务定义需要指定<emphasis role="bold">script</emphasis>
		      和<emphasis role="bold">scriptFormat</emphasis>。
<programlisting>
&lt;scriptTask id=&quot;theScriptTask&quot; name=&quot;Execute script&quot; scriptFormat=&quot;groovy&quot;&gt;
  &lt;script&gt;
    sum = 0
    for ( i in inputArray ) {
      sum += i
    }
  &lt;/script&gt;
&lt;/scriptTask&gt;</programlisting>
		    </para>

		    <para>
			  <emphasis role="bold">scriptFormat</emphasis>的值必须兼容
			  <ulink url="http://jcp.org/en/jsr/detail?id=223">JSR-223</ulink>。
			  （java平台的脚本语言）。默认Javascript会包含在JDK中，不需要额外的依赖。
			  如果你想使用其他（JSR-223兼容）的脚本引擎，
			  需要把对应的jar添加到classpath下，并使用合适的名称。
			  比如，activiti单元测试经常使用groovy，
			  因为语法比java简单太多。
		    </para>

		    <para>
			  注意，groovy脚本引擎放在groovy-all.jar中。在2.0版本之前，
			  脚本引擎是groovy jar的一部分。这样，需要添加如下依赖：
		      <programlisting>
&lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
      &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
      &lt;version&gt;2.x.x&lt;version&gt;
&lt;/dependency&gt;</programlisting>
		    </para>

		  </section>

		  <section id="bpmnScriptTaskVariables">

		    <title>脚本中的变量</title>

		    <para>
			  到达脚本任务的流程可以访问的所有流程变量，都可以在脚本中使用。
			  实例中，脚本变量<emphasis>'inputArray'</emphasis>其实是流程变量
			  （整数数组）。
<programlisting>
&lt;script&gt;
    sum = 0
    for ( i in <emphasis role="bold">inputArray</emphasis> ) {
      sum += i
    }
&lt;/script&gt;</programlisting>
		    </para>

		    <para>
			  也可以在脚本中设置流程变量，直接调用
		      <emphasis>execution.setVariable("variableName", variableValue)</emphasis>。
			  默认，不会自动保存变量（<emphasis role="bold">注意：activiti 5.12之前存在这个问题</emphasis>）。
			  可以在脚本中自动保存任何变量。
			  （比如上例中的<emphasis>sum</emphasis>），只要把<literal>scriptTask</literal>
			  的<literal>autoStoreVariables</literal>属性设置为<literal>true</literal>。
			  然而，<emphasis role="bold">最佳实践是不要用它，而是显示调用execution.setVariable()</emphasis>，
			  因为一些当前版本的JDK对于一些脚本语言，无法实现自动保存变量。
		      参考<ulink url="http://www.jorambarrez.be/blog/2013/03/25/bug-on-jdk-1-7-0_17-when-using-scripttask-in-activiti/">这里</ulink>获得更多信息。
			</para>

		    <para>
<programlisting>
&lt;scriptTask id=&quot;script&quot; scriptFormat=&quot;JavaScript&quot; activiti:autoStoreVariables=&quot;false&quot;>
</programlisting>
			  参数默认为<literal>false</literal>，意思是如果没有为脚本任务定义设置参数，
			  所有声明的变量将只存在于脚本执行的阶段。
		    </para>

		    <para>
			  如何在脚本中设置变量的例子：
<programlisting>
&lt;script&gt;
    def scriptVar = &quot;test123&quot;
    execution.setVariable(&quot;myVar&quot;, scriptVar)
&lt;/script&gt;</programlisting>
		    </para>

		    <para>
			  注意：下面这些命名已被占用，<emphasis role="bold">不能用作变量名</emphasis>：
			  <emphasis role="bold">out, out:print, lang:import, context, elcontext</emphasis>。
		    </para>

		  </section>

		  <section id="bpmnScriptTaskResultValue">

		    <title>脚本结果</title>

		    <para>
			  脚本任务的返回值可以通过制定流程变量的名称，分配给已存或一个新流程变量，
			  使用脚本任务定义的<emphasis>'activiti:resultVariable'</emphasis>属性。
			  任何已存的流程变量都会被脚本执行的结果覆盖。
			  如果没有指定返回变量名，脚本的返回值会被忽略。
<programlisting>
&lt;scriptTask id=&quot;theScriptTask&quot; name=&quot;Execute script&quot; scriptFormat=&quot;juel&quot; activiti:resultVariable=&quot;myVar&quot;&gt;
  &lt;script&gt;#{echo}&lt;/script&gt;
&lt;/scriptTask&gt;</programlisting>

			  上例中，脚本的结果（表达式<emphasis>'#{echo}'</emphasis>的值）
			  在脚本完成后，会设置到<emphasis>'myVar'</emphasis>变量中。
		    </para>

		  </section>

		</section>

		<section id="bpmnJavaServiceTask">

	   <title>Java服务任务</title>

	   <section id="bpmnJavaServiceTaskDescription">

	     <title>描述</title>

	     <para>
	       java服务任务用来调用外部java类。
	     </para>

	   </section>

	   <section id="bpmnJavaServiceTaskGraphicalNotation">

       <title>图形标记</title>

       <para>
	    服务任务显示为圆角矩形，左上角有一个齿轮小图标。
        <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.java.service.task.png"/></imageobject></mediaobject>
       </para>

     </section>

     <section id="bpmnJavaServiceTaskXML">

       <title>XML内容</title>

       <para>
	     有4钟方法来声明java调用逻辑：
       </para>

       <itemizedlist>
         <listitem><para>实现JavaDelegate或ActivityBehavior</para></listitem>
         <listitem><para>执行解析代理对象的表达式</para></listitem>
         <listitem><para>调用一个方法表达式</para></listitem>
         <listitem><para>调用一直值表达式</para></listitem>
       </itemizedlist>

       <para>
	     执行一个在流程执行中调用的类，
		 需要在<emphasis role="bold">'activiti:class'</emphasis>属性中设置全类名。
<programlisting>
&lt;serviceTask id=&quot;javaService&quot;
             name=&quot;My Java Service Task&quot;
             activiti:class=&quot;org.activiti.MyJavaDelegate&quot; /&gt;
</programlisting>
         参考<link linkend="bpmnJavaServiceTaskImplementation"><emphasis>实现</emphasis>章节</link>
		 了解更多使用类的信息。
       </para>

       <para>
	     也可以使用表达式调用一个对象。对象必须遵循一些规则，
		 并使用<literal>activiti:class</literal>属性进行创建。
		 （了解<link linkend="bpmnJavaServiceTaskImplementation">更多</link>）。
         <programlisting> &lt;serviceTask id=&quot;serviceTask&quot; <emphasis role="bold">activiti:delegateExpression=&quot;${delegateExpressionBean}&quot;</emphasis> /&gt;</programlisting>
		 这里，<literal>delegateExpressionBean</literal>是一个实现了<literal>JavaDelegate</literal>接口的bean，
		 它定义在实例的spring容器中。
       </para>

       <para>
	     要指定执行的UEL方法表达式，
		 需要使用<emphasis role="bold">activiti:expression</emphasis>。
<programlisting>
&lt;serviceTask id=&quot;javaService&quot;
             name=&quot;My Java Service Task&quot;
             activiti:expression=&quot;#{printer.printMessage()}&quot; /&gt;
</programlisting>
         方法<literal>printMessage</literal>（无参数）会调用
		 名为<literal>printer</literal>对象的方法。
       </para>
       <para>
	     也可以为表达式中的方法传递参数。
       	<programlisting>
&lt;serviceTask id=&quot;javaService&quot;
             name=&quot;My Java Service Task&quot;
             activiti:expression=&quot;#{printer.printMessage(execution, myVar)}&quot; /&gt;
</programlisting>
		这会调用名为<literal>printer</literal>对象上的方法<literal>printMessage</literal>。
		第一个参数是<literal>DelegateExecution</literal>，在表达式环境中默认名称为<literal>execution</literal>。
		第二个参数传递的是当前流程的名为<literal>myVar</literal>的变量。
       </para>

       <para>
	     要指定执行的UEL值表达式，
		 需要使用<emphasis role="bold">activiti:expression</emphasis>属性。
<programlisting>
&lt;serviceTask id=&quot;javaService&quot;
             name=&quot;My Java Service Task&quot;
             activiti:expression=&quot;#{split.ready}&quot; /&gt;
</programlisting>
		 <literal>ready</literal>属性的getter方法，<literal>getReady</literal>（无参数），
		 会作用于名为<literal>split</literal>的bean上。
		 这个对象会被解析为流程对象和
		 （如果合适）spring环境中的对象。
       </para>

     </section>

     <section id="bpmnJavaServiceTaskImplementation">

      <title>实现</title>

      <para>
	    要在流程执行中实现一个调用的类，这个类需要实现<emphasis>org.activiti.engine.delegate.JavaDelegate</emphasis>接口，
		并在<emphasis>execute</emphasis>方法中提供对应的业务逻辑。
		当流程执行到特定阶段，它会指定方法中定义好的业务逻辑，
		并按照默认BPMN 2.0中的方式离开节点。
      </para>

      <para>
	    让我们创建一个java类的例子，它可以流程变量中字符串转换为大写。
		这个类需要实现<emphasis>org.activiti.engine.delegate.JavaDelegate</emphasis>接口，
		这要求我们实现<emphasis>execute(DelegateExecution)</emphasis>方法。
		它包含的业务逻辑会被引擎调用。流程实例信息，如流程变量和其他信息，
		可以通过
		<ulink url="http://activiti.org/javadocs/org/activiti/engine/delegate/DelegateExecution.html">DelegateExecution</ulink>
		接口访问和操作（点击对应操作的javadoc的链接，获得更多信息）。
<programlisting>
public class ToUppercase implements JavaDelegate {

  public void execute(DelegateExecution execution) throws Exception {
    String var = (String) execution.getVariable(&quot;input&quot;);
    var = var.toUpperCase();
    execution.setVariable(&quot;input&quot;, var);
  }

}
</programlisting>
      </para>
      <para>
	    注意：<emphasis role="bold">serviceTask定义的class只会创建一个java类的实例</emphasis>。
		所有流程实例都会共享相同的类实例，并调用<emphasis>execute(DelegateExecution)</emphasis>。
		这意味着，类不能使用任何成员变量，必须是线程安全的，它必须能模拟在不同线程中执行。
		这也影响着<link linkend="serviceTaskFieldInjection">属性注入</link>的处理方式。
      </para>
      <para>
	    流程定义中引用的类（比如，使用<literal>activiti:class</literal>）<emphasis role="bold">不会
        在部署时实例化</emphasis>。只有当流程第一次执行到使用类的时候，
		类的实例才会被创建。如果找不到类，会抛出一个<literal>ActivitiException</literal>。
		这个原因是部署环境（更确切是的<emphasis>classpath</emphasis>）和真实环境往往是不同的。
		比如当使用<emphasis>ant</emphasis>或业务归档上传到Activiti Explorer来发布流程
		classpath没有包含引用的类。
      </para>
      <para><link linkend="internal"><emphasis role="bold">[内部：非公共实现类]</emphasis></link>
	    也可以提供实现
        <emphasis>org.activiti.engine.impl.pvm.delegate.ActivityBehavior</emphasis>接口的类。
		实现可以访问更强大的<emphasis>ActivityExecution</emphasis>,
		它可以影响流程的流向。注意，这不是一个很好的实践，
		应该尽量避免。所以，建议只有在高级情况下并且你确切知道你要做什么的情况下，
		再使用<emphasis>ActivityBehavior</emphasis>接口。
      </para>


     </section>

     <section id="serviceTaskFieldInjection">

      <title>属性注入</title>

        <para>
		  可以为代理类的属性注入数据。支持如下类型的注入：
          <itemizedlist>
            <listitem><para>固定的字符串</para></listitem>
            <listitem><para>表达式</para></listitem>
          </itemizedlist>
        </para>
        <para>
		  如果有效的话，数值会通过代理类的setter方法注入，遵循java bean的命名规范（比如<literal>fistName</literal>属性对应<literal>setFirstName(...)</literal>方法）。
		  如果属性没有对应的setter方法，数值会直接注入到私有属性中。
		  一些环境的SecurityManager不允许修改私有属性，所以最好还是把你想注入的属性暴露出对应的setter方法来。
		  <emphasis role="bold">无论流程定义中的数据是什么类型，注入目标的属性类型都应该是
		  <literal>org.activiti.engine.delegate.Expression</literal>。</emphasis>
        </para>
        <para>
		  下面代码演示了如何把一个常量注入到属性中。
		  属性注入可以使用<emphasis>'class'</emphasis>属性。
		  注意我们需要<emphasis role="bold">定义一个'extensionElements' XML元素，
		  在声明实际的属性注入之前</emphasis>，这是BPMN 2.0 XML格式要求的。
          <programlisting>
&lt;serviceTask id=&quot;javaService&quot;
    name=&quot;Java service invocation&quot;
    activiti:class=&quot;org.activiti.examples.bpmn.servicetask.ToUpperCaseFieldInjected&quot;&gt;
    <emphasis role="bold">&lt;extensionElements&gt;
      &lt;activiti:field name=&quot;text&quot; stringValue=&quot;Hello World&quot; /&gt;
  &lt;/extensionElements&gt;</emphasis>
&lt;/serviceTask&gt;
          </programlisting>
		  <literal>ToUpperCaseFieldInjected</literal>类有一个<literal>text</literal>属性，
		  类型是<literal>org.activiti.engine.delegate.Expression</literal>。
		  调用<literal>text.getValue(execution)</literal>时，会返回定义的字符串<literal>Hello World</literal>。
        </para>
        <para>
		  也可以使用长文字（比如，内嵌的email），可以使用<emphasis>'activiti:string'</emphasis>子元素：
          <programlisting>
&lt;serviceTask id=&quot;javaService&quot;
    name=&quot;Java service invocation&quot;
    activiti:class=&quot;org.activiti.examples.bpmn.servicetask.ToUpperCaseFieldInjected&quot;&gt;
  &lt;extensionElements&gt;
    &lt;activiti:field name=&quot;text&quot;&gt;
        <emphasis role="bold">&lt;activiti:string&gt;
          Hello World
      &lt;/activiti:string&gt;</emphasis>
    &lt;/activiti:field&gt;
  &lt;/extensionElements&gt;
&lt;/serviceTask&gt;
          </programlisting>
        </para>

        <para>
		可以使用表达式，实现在运行期动态解析注入的值。这些表达式可以使用流程变量或spring定义的bean（如果使用了spring）。
		像<link linkend="bpmnJavaServiceTaskImplementation">服务任务实现</link>里说的那样，服务任务中的java类实例会在所有流程实例中共享。
		为了动态注入属性的值，我们可以在<literal>org.activiti.engine.delegate.Expression</literal>中使用值和方法表达式，
		它会使用传递给<literal>execute</literal>方法的<literal>DelegateExecution</literal>参数进行解析。
<programlisting>
&lt;serviceTask id=&quot;javaService&quot; name=&quot;Java service invocation&quot;
  activiti:class=&quot;org.activiti.examples.bpmn.servicetask.ReverseStringsFieldInjected&quot;&gt;

  &lt;extensionElements&gt;
    &lt;activiti:field name=&quot;text1&quot;&gt;
      <emphasis role="bold">&lt;activiti:expression&gt;${genderBean.getGenderString(gender)}&lt;/activiti:expression&gt;</emphasis>
    &lt;/activiti:field&gt;
    &lt;activiti:field name=&quot;text2&quot;&gt;
       <emphasis role="bold">&lt;activiti:expression&gt;Hello ${gender == 'male' ? 'Mr.' : 'Mrs.'} ${name}&lt;/activiti:expression&gt;</emphasis>
    &lt;/activiti:field&gt;
  &lt;/ extensionElements&gt;
&lt;/ serviceTask&gt;
</programlisting>
  </para>
  <para>
  下面的例子中，注入了表达式，并使用在传入的当前<literal>DelegateExecution</literal>解析它们。
  完整代码可以参考<literal>org.activiti.examples.bpmn.servicetask.JavaServiceTaskTest.testExpressionFieldInjection</literal>。
<programlisting>

public class ReverseStringsFieldInjected implements JavaDelegate {

  private Expression text1;
  private Expression text2;

  public void execute(DelegateExecution execution) {
    String value1 = (String) text1.getValue(execution);
    execution.setVariable("var1", new StringBuffer(value1).reverse().toString());

    String value2 = (String) text2.getValue(execution);
    execution.setVariable("var2", new StringBuffer(value2).reverse().toString());
  }
}
</programlisting>
  </para>
  <para>
  另外，你也可以把表达式设置成一个属性，而不是字元素，让XML更简单一些。
<programlisting>
&lt;activiti:field name=&quot;text1&quot; <emphasis role="bold">expression=&quot;${genderBean.getGenderString(gender)}&quot;</emphasis> /&gt;
&lt;activiti:field name=&quot;text1&quot; <emphasis role="bold">expression=&quot;Hello ${gender == 'male' ? 'Mr.' : 'Mrs.'} ${name}&quot;</emphasis> /&gt;
</programlisting>
        </para>
        <para>
          <emphasis role="bold">
		    因为java类实例会被重用，注入只会发生一次，当服务任务调用第一次的时候。
			当你的代码中的属性改变了，值也不会重新注入，
			所以你应该把它们看做是不变的，不用修改它们。
          </emphasis>
        </para>

     </section>

     <section id="serviceTaskResultValue">

         <title>服务任务结果</title>

         <para>
		   服务流程返回的结果（使用表达式的服务任务）可以分配给已经存在的或新的流程变量，
		   可以通过指定服务任务定义的<emphasis>'activiti:resultVariable'</emphasis>属性来实现。
		   指定的路程比那两的值会被服务流程的返回结果覆盖。
		   如果没有指定返回变量名，就会忽略返回结果。
<programlisting>
&lt;serviceTask id=&quot;aMethodExpressionServiceTask&quot;
    activiti:expression=&quot;#{myService.doSomething()}&quot;
    activiti:resultVariable=&quot;myVar&quot; /&gt;
</programlisting>

		   在上面的例子中，服务流程的返回值（在<emphasis>'myService'</emphasis>上调用<emphasis>'doSomething()'</emphasis>方法的返回值，
		   myService可能是流程变量，也可能是spring的bean），会设置到名为<emphasis>'myVar'</emphasis>的流程变量里，
		   在服务执行完成之后。
         </para>

     </section>

     <section id="serviceTaskExceptionHandling">

      <title>处理异常</title>
      <para>
	    执行自定义逻辑时，常常需要捕获对应的业务异常，在流程内部进行处理。
		activiti提供了不同的方式来处理这个问题。
      </para>

        <section id="serviceTaskBpmnErrors">

          <title>抛出BPMN Errors</title>

          <para>
		    可以在服务任务或脚本任务的代码里抛出BPMN error。
			为了实现这个，要从JavaDelegate，脚本，表达式和代理表达式中抛出名为
			<emphasis>BpmnError</emphasis>的特殊ActivitiExeption。
			引擎会捕获这个异常，把它转发到对应的错误处理中。
			比如，边界错误事件或错误事件子流程。
            <programlisting>
public class ThrowBpmnErrorDelegate implements JavaDelegate {

  public void execute(DelegateExecution execution) throws Exception {
    try {
      executeBusinessLogic();
    } catch (BusinessException e) {
      throw new BpmnError(&quot;BusinessExceptionOccured&quot;);
    }
  }

}</programlisting>
			构造参数是错误代码，会被用来决定
			哪个错误处理器会来响应这个错误。
			参考<link linkend="bpmnBoundaryErrorEvent">边界错误事件</link>
			获得更多捕获BPMN error的信息。
          </para>
          <para>
			这个机制应该<emphasis role="bold">只用于业务失败</emphasis>，
			它应该被流程定义中设置的边界错误事件或错误事件子流程处理。
			技术上的错误应该使用其他异常类型，通常不会在流程里处理。
          </para>

        </section>

        <section id="serviceTaskExceptionSequenceFlow">

          <title>异常顺序流</title>

          <para>
            <link linkend="internal">
              <emphasis role="bold">[内部，公开实现类]</emphasis>
            </link>
			另一种选择是在一些异常发生时，让路程进入其他路径。
			下面的代码演示了如何实现。
            <programlisting>
&lt;serviceTask id=&quot;javaService&quot;
  name=&quot;Java service invocation&quot;
  activiti:class=&quot;org.activiti.ThrowsExceptionBehavior&quot;&gt;
&lt;/serviceTask&gt;

&lt;sequenceFlow id=&quot;no-exception&quot; sourceRef=&quot;javaService&quot; targetRef=&quot;theEnd&quot; /&gt;
&lt;sequenceFlow id=&quot;exception&quot; sourceRef=&quot;javaService&quot; targetRef=&quot;fixException&quot; /&gt;</programlisting>
			这里的服务任务有两个外出顺序流，分别叫<literal>exception</literal>和
			<literal>no-exception</literal>。异常出现时会使用顺序流的id来决定流向：
            <programlisting>
public class ThrowsExceptionBehavior implements ActivityBehavior {

  public void execute(ActivityExecution execution) throws Exception {
    String var = (String) execution.getVariable(&quot;var&quot;);

    PvmTransition transition = null;
    try {
      executeLogic(var);
      transition = execution.getActivity().findOutgoingTransition(&quot;no-exception&quot;);
    } catch (Exception e) {
      transition = execution.getActivity().findOutgoingTransition(&quot;exception&quot;);
    }
    execution.take(transition);
  }

}</programlisting>
          </para>
        </section>

		</section>

		<section id="serviceTaskCallActivitiService">

          <title>在JavaDelegate里使用activiti服务</title>

          <para>
		    一些场景下，需要在java服务任务中使用activiti服务
			（比如，通过RuntimeService启动流程实例，而callActivity不满足你的需求）。
			<emphasis>org.activiti.engine.delegate.DelegateExecution</emphasis>允许通过
			<emphasis>org.activiti.engine.EngineServices</emphasis>接口直接获得这些服务：
            <programlisting>
public class StartProcessInstanceTestDelegate implements JavaDelegate {

  public void execute(DelegateExecution execution) throws Exception {
    RuntimeService runtimeService = execution.getEngineServices().getRuntimeService();
    runtimeService.startProcessInstanceByKey(&quot;myProcess&quot;);
  }

}
            </programlisting>
			所有activiti服务的API都可以通过这个接口获得。
            </para>

            <para>
			使用这些API调用出现的所有数据改变，都是在当前事务中的。
			在像spring和CDI这样的依赖注入环境也会起作用，无论是否启用了JTA数据源。
			比如，下面的代码功能与上面的代码一致，
			这是RuntimeService是通过依赖注入获得的，而不是通过<emphasis>org.activiti.engine.EngineServices</emphasis>接口。
            <programlisting>
@Component(&quot;startProcessInstanceDelegate&quot;)
public class StartProcessInstanceTestDelegateWithInjection {

    @Autowired
    private RuntimeService runtimeService;

    public void startProcess() {
      runtimeService.startProcessInstanceByKey(&quot;oneTaskProcess&quot;);
    }

}
            </programlisting>
          </para>

          <para>
            <emphasis role="bold">重要技术提示：</emphasis>因为服务调用是在当前事务里，
			数据的产生或改变，在服务任务执行完<emphasis>之前</emphasis>，还没有提交到数据库。
			所有API对于数据库数据的操作，意味着未提交的操作在服务任务的API调用中都是不可见的。
          </para>

        </section>

     </section>

<section id="bpmnWebserviceTask">
	<title>Web Service任务</title><link linkend="experimental">
		<emphasis role="bold">[EXPERIMENTAL]</emphasis>
	</link>

	<section id="bpmnWebserviceTaskDescription">

		<title>描述</title>

		<para>
			Web Service任务可以用来同步调用一个外部的Web service。
		</para>

	</section>

	<section id="bpmnWebserviceTaskGraphicalNotation">

		<title>图形标记</title>

		<para>
			Web Service任务与Java服务任务显示效果一样。
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/bpmn.web.service.task.png" />
				</imageobject>
			</mediaobject>
		</para>

	</section>

	<section id="bpmnWebserviceTaskXML">

		<title>XML内容</title>

		<para>
			要使用Web Service我们需要导入它的操作和类型。
			可以自动使用import标签来指定Web Service的WSDL：
       </para>

		<programlisting>
&lt;import importType=&quot;http://schemas.xmlsoap.org/wsdl/&quot;
	location=&quot;http://localhost:63081/counter?wsdl&quot;
	namespace=&quot;http://webservice.activiti.org/&quot; /&gt;</programlisting>

		<para>
			上面的声明告诉activiti导入WSDL定义，但没有创建item定义和消息。
			假设我们想调用一个名为'prettyPrint'的方法，
			我们必须创建为请求和响应信息对应的消息和item定义：
		</para>

		<programlisting>
&lt;message id=&quot;prettyPrintCountRequestMessage&quot; itemRef=&quot;tns:prettyPrintCountRequestItem&quot; /&gt;
&lt;message id=&quot;prettyPrintCountResponseMessage&quot; itemRef=&quot;tns:prettyPrintCountResponseItem&quot; /&gt;

&lt;itemDefinition id=&quot;prettyPrintCountRequestItem&quot; structureRef=&quot;counter:prettyPrintCount&quot; /&gt;
&lt;itemDefinition id=&quot;prettyPrintCountResponseItem&quot; structureRef=&quot;counter:prettyPrintCountResponse&quot; /&gt;</programlisting>

		<para>
			在申请服务任务之前，我们必须定义实际引用Web Service的BPMN接口和操作。
			基本上，我们定义接口和必要的操作。对每个奥做我们都会重用上面定义的信息作为输入和输出。
			比如，下面定义了'counter'接口和'prettyPrintCountOperation'操作：
		</para>

		<programlisting>
&lt;interface name=&quot;Counter Interface&quot; implementationRef=&quot;counter:Counter&quot;&gt;
	&lt;operation id=&quot;prettyPrintCountOperation&quot; name=&quot;prettyPrintCount Operation&quot;
			implementationRef=&quot;counter:prettyPrintCount&quot;&gt;
		&lt;inMessageRef&gt;tns:prettyPrintCountRequestMessage&lt;/inMessageRef&gt;
		&lt;outMessageRef&gt;tns:prettyPrintCountResponseMessage&lt;/outMessageRef&gt;
	&lt;/operation&gt;
&lt;/interface&gt;</programlisting>

		<para>
			然后我们可以定义Web Service任务使用##WebService实现，
			并引用Web Service操作。
		</para>

		<programlisting>
&lt;serviceTask id=&quot;webService&quot;
	name=&quot;Web service invocation&quot;
	implementation=&quot;##WebService&quot;
	operationRef=&quot;tns:prettyPrintCountOperation&quot;&gt;</programlisting>
	</section>

	<section id="bpmnWebserviceTaskIOSpecification">
		<title>Web Service任务IO规范</title>

		<para>
			除非我们使用简化方式处理数据输入和输出关联（如下所示），每个Web Service任务可以定义任务的输入输出IO规范。
			配置方式与BPMN 2.0完全兼容，下面格式化后的例子，我们根据之前定义item定义，定义了输入和输出。
		</para>

		<programlisting>
&lt;ioSpecification&gt;
	&lt;dataInput itemSubjectRef=&quot;tns:prettyPrintCountRequestItem&quot; id=&quot;dataInputOfServiceTask&quot; /&gt;
	&lt;dataOutput itemSubjectRef=&quot;tns:prettyPrintCountResponseItem&quot; id=&quot;dataOutputOfServiceTask&quot; /&gt;
	&lt;inputSet&gt;
		&lt;dataInputRefs&gt;dataInputOfServiceTask&lt;/dataInputRefs&gt;
	&lt;/inputSet&gt;
	&lt;outputSet&gt;
		&lt;dataOutputRefs&gt;dataOutputOfServiceTask&lt;/dataOutputRefs&gt;
	&lt;/outputSet&gt;
&lt;/ioSpecification&gt;</programlisting>
	</section>

	<section id="bpmnWebserviceTaskDataInputAssociation">
		<title>Web Service任务数据输入关联</title>

		<para>
			有两种方式指定数据输入关联：
		</para>

		<itemizedlist>
         	<listitem><para>使用表达式</para></listitem>
         	<listitem><para>使用简化方式</para></listitem>
        </itemizedlist>

       <para>
			要使用表达式指定数据输入关联，我们需要定义来源和目的item，并指定每个item属性之间的对应关系。
			下面的例子中我们分配了这些item的前缀和后缀：
       </para>

       <programlisting>
&lt;dataInputAssociation&gt;
	&lt;sourceRef&gt;dataInputOfProcess&lt;/sourceRef&gt;
	&lt;targetRef&gt;dataInputOfServiceTask&lt;/targetRef&gt;
	&lt;assignment&gt;
		&lt;from&gt;${dataInputOfProcess.prefix}&lt;/from&gt;
		&lt;to&gt;${dataInputOfServiceTask.prefix}&lt;/to&gt;
	&lt;/assignment&gt;
	&lt;assignment&gt;
		&lt;from&gt;${dataInputOfProcess.suffix}&lt;/from&gt;
		&lt;to&gt;${dataInputOfServiceTask.suffix}&lt;/to&gt;
	&lt;/assignment&gt;
&lt;/dataInputAssociation&gt;</programlisting>

       <para>
			另外，我们可以使用更简单的简化方式。'sourceRef'元素是activiti的变量名，
			'targetRef'元素是item定义的一个属性。在下面的例子中，我们把'PrefixVariable'变量的值分配给'field'属性，
			把'SuffixVariable'变量的值分配给'suffix'属性。
       </para>

       <programlisting>
&lt;dataInputAssociation&gt;
	&lt;sourceRef&gt;PrefixVariable&lt;/sourceRef&gt;
	&lt;targetRef&gt;prefix&lt;/targetRef&gt;
&lt;/dataInputAssociation&gt;
&lt;dataInputAssociation&gt;
	&lt;sourceRef&gt;SuffixVariable&lt;/sourceRef&gt;
	&lt;targetRef&gt;suffix&lt;/targetRef&gt;
&lt;/dataInputAssociation&gt;</programlisting>
	</section>

	<section id="bpmnWebserviceTaskDataOutputAssociation">
		<title>Web Service任务数据输出关联</title>

		<para>
			有两种方式指定数据输出关联：
		</para>

		<itemizedlist>
         	<listitem><para>使用表达式</para></listitem>
         	<listitem><para>使用简化方式</para></listitem>
        </itemizedlist>

        <para>
			要使用表达式指定数据输出关联，我们需要定义目的变量和来源表达式。
			方法和数据输入关联完全一样：
       </para>

       <programlisting>
&lt;dataOutputAssociation&gt;
	&lt;targetRef&gt;dataOutputOfProcess&lt;/targetRef&gt;
	&lt;transformation&gt;${dataOutputOfServiceTask.prettyPrint}&lt;/transformation&gt;
&lt;/dataOutputAssociation&gt;</programlisting>

       <para>
			另外，我们可以使用更简单的简化方式。'sourceRef'元素是item定义的一个属性，
			'targetRef'元素是activiti的变量名。
			方法和数据输入关联完全一样：
       </para>

       <programlisting>
&lt;dataOutputAssociation&gt;
	&lt;sourceRef&gt;prettyPrint&lt;/sourceRef&gt;
	&lt;targetRef&gt;OutputVariable&lt;/targetRef&gt;
&lt;/dataOutputAssociation&gt;</programlisting>
	</section>
</section>


	<section id="bpmnBusinessRuleTask">
		<title>业务规则任务</title>
		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>

		<section id="bpmnBusinessRuleTaskDescription">

			<title>描述</title>

			<para>
				业务规则用户用来同步执行一个或多个规则。activiti使用drools规则引擎执行业务规则。
				目前，包含业务规则的.drl文件必须和流程定义一起发布，流程定义里包含了执行这些规则的业务规则任务。
				意味着流程使用的所有.drl文件都必须打包在流程BAR文件里，比如任务表单。
				更多使用Drools Expert创建业务规则的信息，请参考<ulink url="http://www.jboss.org/drools/documentation">JBoss Drools</ulink>的文档。
			</para>

			<para>
			  如果想要使用你的规则任务的实现，比如，因为你想用不同方式使用drools，或你想使用完全不同的规则引擎，
			  你可以使用BusinessRuleTask上的class或表达式属性，它用起来就和
			  <ulink url="#bpmnJavaServiceTask">ServiceTask</ulink>一样。
			</para>

		</section>

		<section id="bpmnBusinessRuleTaskGraphicalNotation">

			<title>图形标记</title>

			<para>
				业务规则任务使用一个表格小图标进行显示。
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/bpmn.business.rule.task.png" />
					</imageobject>
				</mediaobject>
			</para>

		</section>

		<section id="bpmnBusinessRuleTaskXML">
			<title>XML内容</title>
			<para>
				要执行部署流程定义的BAR文件中的一个或多个业务规则，我们需要定义输入和输出变量。
				对于输入变量定义，可以使用逗号分隔的一些流程变量。
				输出变量定义智能包含一个变量名，，它会把执行业务规则后返回的对象保存到对应的流程变量中。
				注意，结果变量会包含一个对象列表。如果没有指定输出变量名称，默认会使用
				org.activiti.engine.rules.OUTPUT。
	   	</para>
	   	<para>
		下面的业务规则任务会执行和流程定义一起部署的素有业务规则：
        <programlisting>
&lt;process id=&quot;simpleBusinessRuleProcess&quot;&gt;

  &lt;startEvent id=&quot;theStart&quot; /&gt;
  &lt;sequenceFlow sourceRef=&quot;theStart&quot; targetRef=&quot;businessRuleTask&quot; /&gt;

  <emphasis role="bold">&lt;businessRuleTask id=&quot;businessRuleTask&quot; activiti:ruleVariablesInput=&quot;${order}&quot;
      activiti:resultVariable=&quot;rulesOutput&quot; /&gt;</emphasis>

  &lt;sequenceFlow sourceRef=&quot;businessRuleTask&quot; targetRef=&quot;theEnd&quot; /&gt;

  &lt;endEvent id=&quot;theEnd&quot; /&gt;

&lt;/process&gt;
			  </programlisting>
			</para>
			<para>
				业务规则任务也可以配置成只执行部署的.drl文件中的一些规则。
				这时要设置逗号分隔的规则名。
				<programlisting>
&lt;businessRuleTask id=&quot;businessRuleTask&quot; activiti:ruleVariablesInput=&quot;${order}&quot;
      activiti:rules=&quot;rule1, rule2&quot; /&gt;
			  </programlisting>
			  这时，只会执行rule1和rule2。
	   	</para>
	   	<para>
				你也可以定义哪些规则不用执行。
				<programlisting>
&lt;businessRuleTask id=&quot;businessRuleTask&quot; activiti:ruleVariablesInput=&quot;${order}&quot;
      activiti:rules=&quot;rule1, rule2&quot; exclude=&quot;true&quot; /&gt;
			  </programlisting>
			  这时除了rule1和rule2以外，所有部署到流程定义同一个BAR文件中的规则都会执行。
			</para>

	   	<para>
				像之前提到的，可以用一个选项修改BusinessRuleTask的实现：
				<programlisting>
&lt;businessRuleTask id=&quot;businessRuleTask&quot; activiti:class=&quot;${MyRuleServiceDelegate}&quot; /&gt;
			  </programlisting>
			  注意BusinessRuleTask的功能和ServiceTask一样，但是我们使用BusinessRuleTask的图标来表示
			  我们在这里要执行业务规则。
			</para>
		</section>
	</section>


  <section id="bpmnEmailTask">

		  <title>邮件任务</title>

		  <para>
		    activiti强化了业务流程，支持了自动邮件任务，它可以发送邮件给一个或多个参与者，
			包括支持cc, bcc, HTML内容等等。
			注意邮件任务<emphasis role="bold">不是</emphasis>BPMN 2.0规范定义的官方任务。
			（它也没有对应的图标）。
			因此，activiti中邮件任务是用专门的服务任务实现的。
		  </para>


		  <section id="bpmnEmailTaskServerConfiguration">

		    <title>邮件服务器配置</title>

		    <para>
			  activiti引擎要通过支持SMTP功能的外部邮件服务器发送邮件。
			  为了实际发送邮件，引擎穾知道如何访问邮件服务器。
			  下面的配置可以设置到<emphasis>activiti.cfg.xml</emphasis>配置文件中：
		      <table>
		        <title>邮件服务器配置</title>
            <tgroup cols='3'>
            <thead>
              <row>
                <entry>属性</entry>
                <entry>是否必须</entry>
                <entry>描述</entry>
              </row>
            </thead>
            <tbody>
		          <row>
		            <entry>mailServerHost</entry>
		            <entry>否</entry>
		            <entry>邮件服务器的主机名（比如：mail.mycorp.com）。默认为<literal>localhost</literal></entry>
		          </row>
		          <row>
                <entry>mailServerPort</entry>
                <entry>是，如果没有使用默认端口</entry>
                <entry>邮件服务器上的SMTP传输端口。默认为<emphasis>25</emphasis></entry>
              </row>
              <row>
                <entry>mailServerDefaultFrom</entry>
                <entry>否</entry>
                <entry>如果用户没有指定发送邮件的邮件地址，默认设置的发送者的邮件地址。默认为<emphasis>activiti@activiti.org</emphasis></entry>
              </row>
              <row>
                <entry>mailServerUsername</entry>
                <entry>如果服务器需要</entry>
                <entry>一些邮件服务器需要认证才能发送邮件。默认不设置。</entry>
              </row>
              <row>
                <entry>mailServerPassword</entry>
                <entry>如果服务器需要</entry>
                <entry>一些邮件服务器需要认证才能发送邮件。默认不设置。</entry>
              </row>
              <row>
                <entry>mailServerUseSSL</entry>
                <entry>如果服务器需要</entry>
                <entry>一些邮件服务器需要ssl交互。默认为false。</entry>
              </row>
              <row>
                <entry>mailServerUseTLS</entry>
                <entry>如果服务器需要</entry>
                <entry>一些邮件服务器（比如gmail）需要支持TLS。默认为false。</entry>
              </row>
            </tbody>
            </tgroup>
          </table>
		    </para>

		  </section>

		  <section id="bpmnEmailTaskUsage">

		    <title>定义一个邮件任务</title>

		    <para>
			  邮件任务是一个专用的<link linkend="bpmnJavaServiceTask">服务任务</link>，
			  这个服务任务的<emphasis>type</emphasis>设置为<emphasis>'mail'</emphasis>。
		      <programlisting>
&lt;serviceTask id=&quot;sendMail&quot; <emphasis role="bold">activiti:type=&quot;mail&quot;</emphasis>&gt;
		      </programlisting>
		    </para>

        <para>
			  邮件任务是通过<link linkend="serviceTaskFieldInjection">属性注入</link>进行配置的。
			  所有这些属性都可以使用EL表达式，可以在流程执行中解析。
			  下面的属性都可以设置：
		      <table>
	         <title>邮件服务器配置</title>
	         <tgroup cols='3'>
	           <thead>
	             <row>
	               <entry>属性</entry>
	               <entry>是否必须</entry>
	               <entry>描述</entry>
	             </row>
	           </thead>
	           <tbody>
	             <row>
	               <entry>to</entry>
	               <entry>是</entry>
	               <entry>邮件的接受者。可以使用逗号分隔多个接受者</entry>
	             </row>
	             <row>
                 <entry>from</entry>
                 <entry>否</entry>
                 <entry>邮件发送者的地址。如果不提供，会使用<link linkend="bpmnEmailTaskServerConfiguration">默认配置</link>的地址。</entry>
               </row>
                <row>
                 <entry>subject</entry>
                 <entry>否</entry>
                 <entry>邮件的主题</entry>
               </row>
                <row>
                 <entry>cc</entry>
                 <entry>否</entry>
                 <entry>邮件抄送人。可以使用逗号分隔多个接收者</entry>
               </row>
                <row>
                 <entry>bcc</entry>
                 <entry>否</entry>
                 <entry>邮件暗送人。可以使用逗号分隔多个接收者</entry>
               </row>
               <row>
                 <entry>charset</entry>
                 <entry>否</entry>
                 <entry>可以修改邮件的字符集，对很多非英语语言是必须设置的。
                 </entry>
               </row>
                <row>
                 <entry>html</entry>
                 <entry>否</entry>
                 <entry>作为邮件内容的HTML。</entry>
               </row>
               <row>
                 <entry>text</entry>
                 <entry>否</entry>
                 <entry>邮件的内容，在需要使用原始文字（非富文本）的邮件时使用。
				 可以与<emphasis>html</emphasis>一起使用，对于不支持富客户端的邮件客户端。
				 客户端会降级到仅显示文本的方式。
                 </entry>
               </row>
                <row>
                 <entry>htmlVar</entry>
                 <entry>否</entry>
                 <entry>使用对应的流程变量作为e-mail的内容。它和html的不同之处是它内容中包含的表达式会在mail任务发送之前被替换掉。</entry>
               </row>
                <row>
                 <entry>textVar</entry>
                 <entry>否</entry>
                 <entry>使用对应的流程变量作为e-mail的纯文本内容。它和html的不同之处是它内容中包含的表达式会在mail任务发送之前被替换掉。</entry>
               </row>
               <row>
                  <entry>ignoreException</entry>
                  <entry>否</entry>
                  <entry>处理邮件失败时，是否忽略异常，不抛出ActivitiException，默认为false。</entry>
               </row>
               <row>
                  <entry>exceptionVariableName</entry>
                  <entry>否</entry>
                  <entry>当设置了<emphasis>ignoreException = true</emphasis>处理email时不抛出异常，可以指定一个变量名来存储失败信息。</entry>
               </row>
             </tbody>
	         </tgroup>
	        </table>
        </para>

		  </section>

		  <section id="bpmnEmailTaskExampleUsage">

		    <title>使用实例</title>


		    <para>
			  下面的XML演示了使用邮件任务的例子。
		      <programlisting>
&lt;serviceTask id=&quot;sendMail&quot; activiti:type=&quot;mail&quot;&gt;
  &lt;extensionElements&gt;
    &lt;activiti:field name=&quot;from&quot; stringValue=&quot;order-shipping@thecompany.com&quot; /&gt;
    &lt;activiti:field name=&quot;to&quot; expression=&quot;${recipient}&quot; /&gt;
    &lt;activiti:field name=&quot;subject&quot; expression=&quot;Your order ${orderId} has been shipped&quot; /&gt;
    &lt;activiti:field name=&quot;html&quot;&gt;
      &lt;activiti:expression&gt;
        &lt;![CDATA[
          &lt;html&gt;
            &lt;body&gt;
              Hello ${male ? 'Mr.' : 'Mrs.' } ${recipientName},&lt;br/&gt;&lt;br/&gt;

              As of ${now}, your order has been &lt;b&gt;processed and shipped&lt;/b&gt;.&lt;br/&gt;&lt;br/&gt;

              Kind regards,&lt;br/&gt;

              TheCompany.
            &lt;/body&gt;
          &lt;/html&gt;
        ]]&gt;
      &lt;/activiti:expression&gt;
    &lt;/activiti:field&gt;
  &lt;/extensionElements&gt;
&lt;/serviceTask&gt;
		      </programlisting>
			  结果如下：
		      <mediaobject><imageobject><imagedata align="center" fileref="images/email.task.result.png"/></imageobject></mediaobject>
		    </para>
		  </section>

		</section>

  <section id="bpmnMuleTask">

		  <title>Mule任务</title>

		  <para>
		    mule任务可以向mule发送消息，以强化activiti的集成能力。
			注意mule任务<emphasis role="bold">不是</emphasis>BPMN 2.0规范定义的官方任务。
			（它也没有对应的图标）。
			因此，activiti中mule任务是用专门的服务任务实现的。
		  </para>

		  <section id="bpmnMuleTaskUsage">

		    <title>定义一个mule任务</title>

		    <para>
			  mule任务是一个专用的<link linkend="bpmnJavaServiceTask">服务任务</link>，
			  这个服务任务的<emphasis>type</emphasis>设置为<emphasis>'mule'</emphasis>。
		      <programlisting>
&lt;serviceTask id=&quot;sendMule&quot; <emphasis role="bold">activiti:type=&quot;mule&quot;</emphasis>&gt;
		      </programlisting>
		    </para>

        <para>
			  mule任务是通过<link linkend="serviceTaskFieldInjection">属性注入</link>进行配置的。
			  所有这些属性都可以使用EL表达式，可以在流程执行中解析。
			  下面的属性都可以设置：
		      <table>
	         <title>Mule服务器配置</title>
	         <tgroup cols='3'>
	           <thead>
	             <row>
	               <entry>属性</entry>
	               <entry>是否必须</entry>
	               <entry>描述</entry>
	             </row>
	           </thead>
	           <tbody>
	             <row>
	               <entry>endpointUrl</entry>
	               <entry>是</entry>
	               <entry>希望调用的Mule终端</entry>
	             </row>
	             <row>
                 <entry>language</entry>
                 <entry>是</entry>
                 <entry>你要使用解析荷载表达式（payloadExpression）属性的语言。</entry>
               </row>
                <row>
                 <entry>payloadExpression</entry>
                 <entry>是</entry>
                 <entry>作为消息荷载的表达式。</entry>
               </row>
                <row>
                 <entry>resultVariable</entry>
                 <entry>否</entry>
                 <entry>将要保存调用结果的变量名称。</entry>
               </row>
             </tbody>
	         </tgroup>
	        </table>
        </para>

		  </section>

		  <section id="bpmnMuleTaskExampleUsage">

		    <title>应用实例</title>


		    <para>
			  下面是一个使用mule任务的例子。
		      <programlisting>
  &lt;extensionElements&gt;
    &lt;activiti:field name=&quot;endpointUrl&quot;&gt;
      &lt;activiti:string&gt;vm://in&lt;/activiti:string&gt;
    &lt;/activiti:field&gt;
    &lt;activiti:field name=&quot;language&quot;&gt;
      &lt;activiti:string&gt;juel&lt;/activiti:string&gt;
    &lt;/activiti:field&gt;
    &lt;activiti:field name=&quot;payloadExpression&quot;&gt;
      &lt;activiti:string&gt;&quot;hi&quot;&lt;/activiti:string&gt;
    &lt;/activiti:field&gt;
    &lt;activiti:field name=&quot;resultVariable&quot;&gt;
      &lt;activiti:string&gt;theVariable&lt;/activiti:string&gt;
    &lt;/activiti:field&gt;
  &lt;/extensionElements&gt;
		      </programlisting>
		    </para>
		  </section>

		</section>

    <section id="bpmnCamelTask">

      <title>Camel任务</title>

      <para>
	    Camel任务可以从Camel发送和介绍消息，由此强化了activiti的集成功能。
		注意camel任务<emphasis role="bold">不是</emphasis>BPMN 2.0规范定义的官方任务。
		（它也没有对应的图标）。
		在activiti中，camel任务时由专用的服务任务实现的。
		要使用camel任务功能时，也要记得吧activiti camel包含到项目里。
      </para>

      <section id="bpmnCamelTaskUsage">

        <title>定义camel任务</title>

        <para>
		  camel任务是一个专用的<link linkend="bpmnJavaServiceTask">服务任务</link>，
		  这个服务任务的<emphasis>type</emphasis>设置为<emphasis>'camel'</emphasis>。
          <programlisting>
&lt;serviceTask id=&quot;sendCamel&quot; <emphasis role="bold">activiti:type=&quot;camel&quot;</emphasis>&gt;
          </programlisting>
        </para>

        <para>
		  流程定义只需要在服务任务中定义camel类型。
		  集成逻辑都会代理给camel容器。默认activiti引擎会在spring容器中查找camelContext bean。
		  camelContext定义了camel容器加载的路由规则。下面的例子中路由规则是从指定的java包下加载的。
		  但是你也可以通过spring配置直接定义路由规则。
         <programlisting>
&lt;camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring"&gt;
  &lt;packageScan&gt;
    &lt;package&gt;org.activiti.camel.route&lt;/package&gt;
  &lt;/packageScan&gt;
&lt;/camelContext&gt;</programlisting>
        </para>

        <para>
          如果想了解更多关于camel路由的信息，可以访问<ulink url="http://camel.apache.org/">Camel的网站</ulink>。
		  在这里只通过很小的例子演示了基础的概念。
		  在第一个例子中，我们会通过activiti工作流实现最简单的Camel调用。我们称其为SimpleCamelCall。
		</para>
		<para>
		如果想定义多个Camel环境bean，并且（或者）想使用不同的bean名称，可以重载CamelTask的定义，如下所示：
		<programlisting>
&lt;serviceTask id="serviceTask1" activiti:type="camel"&gt;
	&lt;extensionElements&gt;
		&lt;activiti:field name="camelContext" stringValue="customCamelContext" /&gt;
	&lt;/extensionElements&gt;
&lt;/serviceTask&gt;
		</programlisting>
		</para>
		</section>
		<section id="bpmnCamelTaskSimpleCamelCall">

		<title>简单Camel调用</title>
<para>
		这个例子对应的文件都可以在activiti camel模块的org.activiti.camel.examples.simpleCamelCall包下找到。我们的目标是简单激活一个特定的camel路由。
		首先，我们需要一个Spring环境，它要包含之前介绍的路由。这些文件的目的如下：
</para>

		<programlisting>
&lt;camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring"&gt;
	&lt;packageScan&gt;
		&lt;package&gt;org.activiti.camel.examples.simpleCamelCall&lt;/package&gt;
	&lt;/packageScan&gt;
&lt;/camelContext>
         </programlisting>
	   包含名为SimpleCamelCallRoute的路由的类文件，放在PackageScan标签的扫描目录下。
	   下面就是路由的定义：

         <programlisting>
public class SimpleCamelCallRoute extends RouteBuilder {

  @Override
  public void configure() throws Exception {

	  from("activiti:SimpleCamelCallProcess:simpleCall").to("log: org.activiti.camel.examples.SimpleCamelCall");
  }
}
</programlisting>
这个规则仅仅打印消息体，不会做其他事情。注意终端的格式。它包含三部分：
<table>
<title>终端URL：</title>
	         <tgroup cols='2'>
	           <thead>
	             <row>
	               <entry>部分</entry>
	               <entry>说明</entry>
	             </row>
	           </thead>
	           <tbody>
	             <row>
	               <entry>终端URL</entry>
	               <entry>引用activiti终端</entry>
	             </row>
	             <row>
	               <entry>SimpleCamelCallProcess</entry>
	               <entry>流程名</entry>
	             </row>
                <row>
                 <entry>simpleCall</entry>
                 <entry>流程中的Camel服务</entry>
               </row>
             </tbody>
	         </tgroup>
	        </table>
	OK，我们的规则已经配置好，也可以让Camel使用了。
	现在看工作流部分。工作流看起来像这样：

          <programlisting>
&lt;process id="SimpleCamelCallProcess"&gt;
        &lt;startEvent id="start"/&gt;
        &lt;sequenceFlow id="flow1" sourceRef="start" targetRef="simpleCall"/&gt;
		<emphasis role="bold">
        &lt;serviceTask id="simpleCall" activiti:type="camel"/&gt;
		</emphasis>
        &lt;sequenceFlow id="flow2" sourceRef="simpleCall" targetRef="end"/&gt;
        &lt;endEvent id="end"/&gt;
&lt;/process&gt;
          </programlisting>
在serviceTask部分，它只注明服务的类型是Camel，目标规则名为simpleCall。这与上面的activiti终端相匹配。初始化流程后，我们会看到一个空的日志。
好，我们已经完成了这个最简单的例子了。
      </section>
	  <section id="bpmnCamelTaskPingPong">

		<title>乒乓实例</title>
		<para>
我们的例子成功执行了，但是Camel和Activiti之间没有任何交互，而且这样做也没有任何优势。在这个例子里，我们尝试向Camel发送和接收数据。
我们发送一个字符串，camel进行一些处理，然后返回结果。
发送部分很简单，我们把变量里的消息发送给camel。这里是我们的调用代码：
		</para>
        <programlisting>
@Deployment
public void testPingPong() {
  Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();

  variables.put("input", "Hello");
  Map&lt;String, String&gt; outputMap = new HashMap&lt;String, String&gt;();
  variables.put("outputMap", outputMap);

  runtimeService.startProcessInstanceByKey("PingPongProcess", variables);
  assertEquals(1, outputMap.size());
  assertNotNull(outputMap.get("outputValue"));
  assertEquals("Hello World", outputMap.get("outputValue"));
}
	</programlisting>
	<para>
	变量"input"是Camel规则的实际输入，outputMap会记录camel返回的结果。流程应该像是这样：
	</para>
    <programlisting>
&lt;process id="PingPongProcess"&gt;
  &lt;startEvent id="start"/&gt;
  &lt;sequenceFlow id="flow1" sourceRef="start" targetRef="ping"/&gt;
  &lt;serviceTask id="ping" activiti:type="camel"/&gt;
  &lt;sequenceFlow id="flow2" sourceRef="ping" targetRef="saveOutput"/&gt;
  &lt;serviceTask id="saveOutput"  activiti:class="org.activiti.camel.examples.pingPong.SaveOutput" /&gt;
  &lt;sequenceFlow id="flow3" sourceRef="saveOutput" targetRef="end"/&gt;
  &lt;endEvent id="end"/&gt;
&lt;/process&gt;
    </programlisting>
	<para>
	注意，SaveOuput这个serviceTask，会把"Output"变量的值从上下文保存到上面提到的OutputMap中。
	现在，我们必须了解变量是如何发送给Camel，再返回的。这里就要涉及到camel实际执行的行为了。
	变量提交给camel的方法是由CamelBehavior控制的。这里我们使用默认的配置，其他的会在后面提及。
	使用这些代码，我们就可以配置一个期望的camel行为：
	</para>
    <programlisting>
&lt;serviceTask id="serviceTask1" activiti:type="camel"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:field name="camelBehaviorClass" stringValue="org.activiti.camel.impl.CamelBehaviorCamelBodyImpl" /&gt;
  &lt;/extensionElements&gt;
&lt;/serviceTask&gt;
	</programlisting>
	<para>
	如果你没有特别指定一个行为，就会使用org.activiti.camel.impl.CamelBehaviorDefaultImpl。
	这个行为会把变量复制成名称相同的Camel属性。
	在返回时，无论选择什么行为，如果camel消息体是一个map，每个元素都会复制成一个变量，
	否则整个对象会复制到指定名称为"camelBody"的变量中。
	了解这些后，就可以看看我们第二个例子的camel规则了：
	</para>
    <programlisting>
@Override
public void configure() throws Exception {
  from("activiti:PingPongProcess:ping").transform().simple("${property.input} World");
}
	</programlisting>
	<para>
		在这个规则中，字符串"world"会被添加到"input"属性的后面，结果会写入消息体。
		这时可以检查javaServiceTask中的"camelBody"变量，复制到"outputMap"中，并在testcase进行判断。
		现在这个例子是在默认的行为下运行的，然后我们看一起其他的方案。
		在启动的所有camel规则中，流程实例id会复制到camel的名为"PROCESS_ID_PROPERTY"的属性中。
		后续可以用它关联流程实例和camel规则。他也可以在camel规则中直接使用。
	</para>
	<para>
		Activiti中可以使用三种不同的行为。这些行为可以通过在规则URL中指定对应的环节来实现覆盖。
		这里有一个在URL中覆盖现存行为的例子：
		<programlisting>
from("activiti:asyncCamelProcess:serviceTaskAsync2?copyVariablesToProperties=true").
		</programlisting>
下面的表格提供了三种camel行为的概述：
<table>
<title>已有的camel行为：</title>
	         <tgroup cols='3'>
	           <thead>
	             <row>
	               <entry>行为</entry>
	               <entry>URL</entry>
				   <entry>描述</entry>
	             </row>
	           </thead>
	           <tbody>
	             <row>
	               <entry>CamelBehaviorDefaultImpl</entry>
	               <entry>copyVariablesToProperties</entry>
				   <entry>把Activiti变量复制为Camel属性</entry>
	             </row>
	             <row>
				    <entry>CamelBehaviorCamelBodyImpl</entry>
 	                <entry>copyCamelBodyToBody</entry>
				    <entry>只把名为"camelBody"Activiti变量复制成camel的消息体</entry>
	             </row>
                <row>
				    <entry>CamelBehaviorBodyAsMapImpl</entry>
	               <entry>copyVariablesToBodyAsMap</entry>
				   <entry>把activiti的所有变量复制到一个map里，作为Camel的消息体</entry>
               </row>
             </tbody>
	         </tgroup>
	        </table>
	上面的表格解释和activiti变量如何传递给camel。下面的表格解释和camel的变量如何返回给activiti。
	它只能配置在规则URL中。
<table>
<title>已有的camel行为：</title>
	         <tgroup cols='3'>
	           <thead>
	             <row>
	               <entry>Url</entry>
				   <entry>描述</entry>
	             </row>
	           </thead>
	           <tbody>
	             <row>
				    <entry>默认</entry>
 	                <entry>如果Camel消息体是一个map，把每个元素复制成activiti的变量，否则把整个camel消息体作为activiti的"camelBody"变量。</entry>
	             </row>
	             <row>
	               <entry>copyVariablesFromProperties</entry>
	               <entry>将Camel属性以相同名称复制为Activiti变量</entry>
	             </row>
                <row>
				   <entry>copyCamelBodyToBodyAsString</entry>
	               <entry>和默认一样，但是如果camel消息体不是map时，先把它转换成字符串，再设置为"camelBody"。</entry>
               </row>

                <row>
				   <entry>copyVariablesFromHeader</entry>
	               <entry>额外把camel头部以相同名称复制成Activiti变量</entry>
               </row>
             </tbody>
	         </tgroup>
	        </table>
		例子的源码放在activiti-camel模块的org.activiti.camel.examples.pingPong包下。
	</para>


	</section>
	<section id="bpmnCamelTaskAsyncPingPong">

		<title>异步乒乓实例</title>
		<para>
		之前的例子都是同步的。流程会等到camel规则返回之后才会停止。
		一些情况下，我们需要activiti工作流继续运行。这时camelServiceTask的异步功能就特别有用。
		你可以通过设置camelServiceTask的async属性来启用这个功能。
		<programlisting>
&lt;serviceTask id="serviceAsyncPing" activiti:type="camel" activiti:async="true"/&gt;
		</programlisting>
		通过设置这个功能，camel规则会被activiti的jobExecutor异步执行。
		当你在camel规则中定义了一个队列，activiti流程会在camelServiceTask执行时继续运行。
		camel规则会以完全异步的方式执行。
		如果你想在什么地方等待camelServiceTask的返回值，你可以使用一个receiveTask。
		<programlisting>
&lt;receiveTask id="receiveAsyncPing" name="Wait State" /&gt;
		</programlisting>
		</para>
		流程实例会等到接收一个signal，比如来自camel。在camel中你可以发送一个signal给流程实例，通过对应的activiti终端发送消息。
		<programlisting>
 from("activiti:asyncPingProcess:serviceAsyncPing").to("activiti:asyncPingProcess:receiveAsyncPing");
		</programlisting>
	 对于一个常用的终端，会使用冒号分隔的三个部分：
	 	<itemizedlist>
	        <listitem>
	          <para>
			   常量字符串"activiti"
			  </para>
			</listitem>
	        <listitem>
	          <para>
			    流程名称
			  </para>
			</listitem>
	        <listitem>
	          <para>
			    接收任务名
			  </para>
			</listitem>
	 	</itemizedlist>
	</section>
	<section id="bpmnCamelTaskAsyncPingPong.2">

		<title>从camel规则中实例化工作流</title>
		<para>
		之前的所有例子中，activiti工作流会先启动，然后在流程中启动camel规则。
		也可以使用另外一种方法。在已经启动的camel规则中启动一个工作流。
		这会触发一个receiveTask十分类似，除了最后的部分。这是一个实例规则：
	<programlisting>
from("direct:start").to("activiti:camelProcess");
	</programlisting>
	我们看到url有两个部分，第一个部分是常量字符串"activiti"，第二部分是流程的名称。
	很明显，流程应该已经部署完成，并且是可以启动的。
		</para>
	</section>

    </section>

		<section id="bpmnManualTask">

		  <title>手工任务</title>

		  <section id="bpmnManualTaskDescription">

		    <title>描述</title>

		    <para>
			  <emphasis>手工任务</emphasis>定义了BPM引擎外部的任务。
			  用来表示工作需要某人完成，而引擎不需要知道，也没有对应的系统和UI接口。
			  对于引擎，手工任务是<emphasis role="bold">直接通过的活动</emphasis>，
			  流程到达它之后会自动向下执行。
		    </para>

		  </section>

		  <section id="bpmnManualTaskGraphicalNotation">

		    <title>图形标记</title>

		    <para>
			  手工任务显示为一个圆角矩形，左上角是一个手型小图标。
		      <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.manual.task.png"/></imageobject></mediaobject>
		    </para>

		  </section>

		  <section id="bpmnManualTaskXml">

		    <title>XML内容</title>

		    <para>
		      <programlisting>&lt;manualTask id=&quot;myManualTask&quot; name=&quot;Call client for more information&quot; /></programlisting>
		    </para>

		  </section>

		</section>

		<section id="bpmnReceiveTask">

		  <title>Java接收任务</title>

		  <section id="bpmnReceiveTaskDescription">

		    <title>描述</title>

		    <para>
		  接收任务是一个简单任务，它会等待对应消息的到达。
		  当前，我们只实现了这个任务的java语义。
		  当流程达到接收任务，流程状态会保存到存储里。
		  意味着流程会等待在这个等待状态，
		  直到引擎接收了一个特定的消息，
		  这会触发流程穿过接收任务继续执行。
		    </para>

		  </section>

		  <section>

		    <title>图形标记</title>

        <para>
		  接收任务显示为一个任务（圆角矩形），右上角有一个消息小标记。
		  消息是白色的（黑色图标表示发送语义）
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.receive.task.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section>

        <title>XML内容</title>

        <para>
          <programlisting>&lt;receiveTask id=&quot;waitState&quot; name=&quot;wait&quot; />    </programlisting>
        </para>

        <para>
		  要在接收任务等待的流程实例继续执行，
		  可以调用<emphasis>runtimeService.signal(executionId)</emphasis>，传递接收任务上流程的id。
		  下面的代码演示了实际是如何工作的：
          <programlisting>
ProcessInstance pi = runtimeService.startProcessInstanceByKey(&quot;receiveTask&quot;);
Execution execution = runtimeService.createExecutionQuery()
  .processInstanceId(pi.getId())
  .activityId(&quot;waitState&quot;)
  .singleResult();
assertNotNull(execution);

<emphasis role="bold">runtimeService.signal(execution.getId());</emphasis>
          </programlisting>
        </para>

      </section>

		</section>

		<section id="bpmnShellTask">
			<title>Shell任务</title>
			<section id="bpmnShellTaskDescription">
				<title>描述</title>
				<para>
				shell任务可以执行shell脚本和命令。
				注意shell任务<emphasis role="bold">不是</emphasis>BPMN 2.0规范定义的官方任务。
				（它也没有对应的图标）。
				</para>
			</section>
			<section id="bpmnShellTaskUsage">
				<title>定义shell任务</title>
				<para>shell任务是一个专用的<link linkend="bpmnJavaServiceTask">服务任务</link>，
				这个服务任务的<emphasis>type</emphasis>设置为<emphasis>'shell'</emphasis>。
		      <programlisting>
&lt;serviceTask id=&quot;shellEcho&quot; <emphasis role="bold">activiti:type=&quot;shell&quot;</emphasis>&gt;
		      </programlisting>
		    </para>
        <para>
			  shell任务使用<link linkend="serviceTaskFieldInjection">属性注入</link>进行配置。
			  所有属性都可以包含EL表达式，会在流程执行过程中解析。
			  可以配置以下属性：
		      <table>
	         <title>Shell任务参数配置</title>
	         <tgroup cols='5'>
	           <thead>
	             <row>
	               <entry>属性</entry>
	               <entry>是否必须</entry>
	               <entry>类型</entry>
	               <entry>描述</entry>
	               <entry>默认值</entry>
	             </row>
	           </thead>
	           <tbody>
	             <row>
	               <entry>command</entry>
	               <entry>是</entry>
	               <entry>String</entry>
	               <entry>执行的shell命令</entry>
	               <entry></entry>
	             </row>
	             <row>
	               <entry>arg0-5</entry>
	               <entry>否</entry>
	               <entry>String</entry>
	               <entry>参数0至5</entry>
	               <entry></entry>
	             </row>
	             <row>
	               <entry>wait</entry>
	               <entry>否</entry>
	               <entry>true/false</entry>
	               <entry>是否需要等待到shell进程结束</entry>
	               <entry>true</entry>

	             </row>
	             <row>
	               <entry>redirectError</entry>
	               <entry>否</entry>
	               <entry>true/false</entry>
	               <entry>把标准错误打印到标准流中</entry>
	               <entry>false</entry>
	             </row>
	             <row>
	               <entry>cleanEnv</entry>
	               <entry>否</entry>
	               <entry>true/false</entry>
	               <entry>shell进行不继承当前环境</entry>
	               <entry>false</entry>
	             </row>
	             <row>
	               <entry>outputVariable</entry>
	               <entry>否</entry>
	               <entry>String</entry>
	               <entry>保存输出的变量名</entry>
				   <entry>不会记录输出结果</entry>
	             </row>
	             <row>
	               <entry>errorCodeVariable</entry>
	               <entry>否</entry>
	               <entry>String</entry>
	               <entry>包含结果错误代码的变量名</entry>
				   <entry>不会注册错误级别</entry>

	             </row>
	             <row>
	               <entry>directory</entry>
	               <entry>否</entry>
	               <entry>String</entry>
	               <entry>shell进程的默认目录</entry>
	               <entry>当前目录</entry>
	             </row>


             </tbody>
	         </tgroup>
	        </table>
        </para>


		</section>

			<section id="bpmnShellTaskExampleUsage">

		    <title>应用实例</title>


		    <para>
			  下面的代码演示了使用shell任务的实例。它会执行shell脚本"cmd /c echo EchoTest"，等到它结束，再把输出结果保存到resultVar中。
		      <programlisting>
&lt;serviceTask id=&quot;shellEcho&quot; activiti:type=&quot;shell&quot; &gt;
  &lt;extensionElements&gt;
    &lt;activiti:field name=&quot;command&quot; stringValue=&quot;cmd&quot; /&gt;
    &lt;activiti:field name=&quot;arg1&quot; stringValue=&quot;/c&quot; /&gt;
    &lt;activiti:field name=&quot;arg2&quot; stringValue=&quot;echo&quot; /&gt;
    &lt;activiti:field name=&quot;arg3&quot; stringValue=&quot;EchoTest&quot; /&gt;
    &lt;activiti:field name=&quot;wait&quot; stringValue=&quot;true&quot; /&gt;
    &lt;activiti:field name=&quot;outputVariable&quot; stringValue=&quot;resultVar&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/serviceTask&gt;
		      </programlisting>

		    </para>
		  </section>


		</section>


		<section id="executionListeners">
      <title>执行监听器</title>
      <para><emphasis role="bold">兼容性提醒</emphasis>：在发布5.3后，我们发现执行监听器，
	  任务监听器，表达式还是非公开API。这些类在<literal>org.activiti.engine.impl...</literal>的子包，
	  包名中有一个<literal>impl</literal>。
      <literal>org.activiti.engine.impl.pvm.delegate.ExecutionListener</literal>,
      <literal>org.activiti.engine.impl.pvm.delegate.TaskListener</literal> and
      <literal>org.activiti.engine.impl.pvm.el.Expression</literal>已经废弃了。
	  从现在开始，应该使用<literal>org.activiti.engine.delegate.ExecutionListener</literal>,
      <literal>org.activiti.engine.delegate.TaskListener</literal> 和 <literal>org.activiti.engine.delegate.Expression</literal>。
	  在新的公开API中，删除了<literal>ExecutionListenerExecution.getEventSource()</literal>。
	  因为已经设置了废弃编译警告，所以已存的代码应该可以正常运行。但是要考虑切换到新的公共API接口
	  （包名中没有.impl.）。
      </para>

      <para>执行监听器可以执行外部java代码或执行表达式，当流程定义中发生了某个事件。
	  可以捕获的事件有：
      <itemizedlist>
        <listitem><para>流程实例的启动和结束。</para></listitem>
        <listitem><para>选中一条连线。</para></listitem>
        <listitem><para>节点的开始和结束。</para></listitem>
        <listitem><para>网关的开始和结束。</para></listitem>
        <listitem><para>中间事件的开始和结束。</para></listitem>
        <listitem><para>开始时间结束或结束事件开始。</para></listitem>
      </itemizedlist>
      </para>
      <para>
	    下面的流程定义包含了3个流程监听器：
        <programlisting>
  &lt;process id=&quot;executionListenersProcess&quot;&gt;

    <emphasis role="bold">&lt;extensionElements&gt;
      &lt;activiti:executionListener class=&quot;org.activiti.examples.bpmn.executionlistener.ExampleExecutionListenerOne&quot; event=&quot;start&quot; /&gt;
    &lt;/extensionElements&gt;</emphasis>

    &lt;startEvent id=&quot;theStart&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;theStart&quot; targetRef=&quot;firstTask&quot; /&gt;

    &lt;userTask id=&quot;firstTask&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;firstTask&quot; targetRef=&quot;secondTask&quot;&gt;
    <emphasis role="bold">&lt;extensionElements&gt;
      &lt;activiti:executionListener class=&quot;org.activiti.examples.bpmn.executionListener.ExampleExecutionListenerTwo&quot; /&gt;
    &lt;/extensionElements&gt;</emphasis>
    &lt;/sequenceFlow&gt;

    &lt;userTask id=&quot;secondTask&quot; &gt;
    <emphasis role="bold">&lt;extensionElements&gt;
      &lt;activiti:executionListener expression=&quot;${myPojo.myMethod(execution.event)}&quot; event=&quot;end&quot; /&gt;
    &lt;/extensionElements&gt;</emphasis>
    &lt;/userTask&gt;
    &lt;sequenceFlow sourceRef=&quot;secondTask&quot; targetRef=&quot;thirdTask&quot; /&gt;

    &lt;userTask id=&quot;thirdTask&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;thirdTask&quot; targetRef=&quot;theEnd&quot; /&gt;

    &lt;endEvent id=&quot;theEnd&quot; /&gt;

  &lt;/process&gt;</programlisting>
        </para>
        <para>第一个流程监听器监听流程开始。监听器是一个外部java类（像是<literal>ExampleExecutionListenerOne</literal>），
		需要实现<literal>org.activiti.engine.delegate.ExecutionListener</literal>接口。
		当事件发生时（这里是<literal>end</literal>事件），
		会调用<literal>notify(ExecutionListenerExecution execution)</literal>方法。
        <programlisting>
public class ExampleExecutionListenerOne implements <emphasis role="bold">ExecutionListener</emphasis> {

  <emphasis role="bold">public void notify(ExecutionListenerExecution execution) throws Exception {</emphasis>
    execution.setVariable("variableSetInExecutionListener", "firstValue");
    execution.setVariable("eventReceived", execution.getEventName());
  }
}</programlisting>
		也可以使用实现<literal>org.activiti.engine.delegate.JavaDelegate</literal>接口的代理类。
		代理类可以在结构中重用，比如serviceTask的代理。
        </para>
        <para>
		   第二个流程监听器在连线执行时调用。注意这个<literal>listener</literal>元素不能定义<literal>event</literal>，
		   因为连线只能触发<literal>take</literal>事件。
		   <emphasis role="bold">为连线定义的监听器的<literal>event</literal>属性会被忽略。</emphasis>
        </para>
        <para>
		  最后一个流程监听器在节点<literal>secondTask</literal>结束时调用。这里使用<literal>expression</literal>
		  代替<literal>class</literal>来在事件触发时执行/调用。
        </para>
        <programlisting>
&lt;activiti:executionListener expression=&quot;<emphasis role="bold">${myPojo.myMethod(execution.eventName)}</emphasis>&quot; event=&quot;end&quot; /&gt;</programlisting>
        <para>
		  和其他表达式一样，流程变量可以处理和使用。因为流程实现对象有一个保存事件名称的属性，
		  可以在方法中使用<literal>execution.eventName</literal>获的事件名称。
        </para>
        <para>
		  流程监听器也支持使用<literal>delegateExpression</literal>,
          <link linkend="bpmnJavaServiceTaskXML">和服务任务相同</link>。
          <programlisting>&lt;activiti:executionListener event=&quot;start&quot; delegateExpression=&quot;${myExecutionListenerBean}&quot; /&gt;</programlisting>
        </para>
        <para>
		  在activiti 5.12中，我们也介绍了新的流程监听器，org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener。
		  这个脚本流程监听器可以为某个流程监听事件执行一段脚本。
<programlisting>
&lt;activiti:executionListener event=&quot;start&quot; class=&quot;org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener&quot; &gt;
  &lt;activiti:field name="script"&gt;
    &lt;activiti:string&gt;
      def bar = "BAR";  // local variable
      foo = "FOO"; // pushes variable to execution context
      execution.setVariable("var1", "test"); // test access to execution instance
      bar // implicit return value
    &lt;/activiti:string&gt;
  &lt;/activiti:field&gt;
  &lt;activiti:field name="language" stringValue="groovy" /&gt;
  &lt;activiti:field name="resultVariable" stringValue="myVar" /&gt;
&lt;activiti:executionListener&gt;</programlisting>
        </para>

      <section id="executionListenerFieldInjection">

        <title>流程监听器的属性注入</title>
        <para>
		 使用流程监听器时，可以配置<literal>class</literal>属性，可以使用属性注入。
		 这和使用<link linkend="serviceTaskFieldInjection">服务任务属性注入</link>相同，
		 参考它可以获得属性注入的很多信息。
        </para>
        <para>
		 下面的代码演示了使用了属性注入的流程监听器的流程的简单例子。
        <programlisting>
 &lt;process id=&quot;executionListenersProcess&quot;&gt;
    <emphasis role="bold">&lt;extensionElements&gt;
      &lt;activiti:executionListener class=&quot;org.activiti.examples.bpmn.executionListener.ExampleFieldInjectedExecutionListener&quot; event=&quot;start&quot;&gt;
        &lt;activiti:field name=&quot;fixedValue&quot; stringValue=&quot;Yes, I am &quot; /&gt;
        &lt;activiti:field name=&quot;dynamicValue&quot; expression=&quot;${myVar}&quot; /&gt;
      &lt;/activiti:executionListener&gt;
    &lt;/extensionElements&gt;</emphasis>

    &lt;startEvent id=&quot;theStart&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;theStart&quot; targetRef=&quot;firstTask&quot; /&gt;

    &lt;userTask id=&quot;firstTask&quot; /&gt;
    &lt;sequenceFlow sourceRef=&quot;firstTask&quot; targetRef=&quot;theEnd&quot; /&gt;

    &lt;endEvent id=&quot;theEnd&quot; /&gt;
  &lt;/process&gt;
        </programlisting>
        </para>
        <para>
          <programlisting>
public class ExampleFieldInjectedExecutionListener implements ExecutionListener {

  <emphasis role="bold">private Expression fixedValue;

  private Expression dynamicValue;</emphasis>

  public void notify(ExecutionListenerExecution execution) throws Exception {
    execution.setVariable("var", <emphasis role="bold">fixedValue.getValue(execution).toString()</emphasis> + <emphasis role="bold">dynamicValue.getValue(execution).toString()</emphasis>);
  }
}
          </programlisting>
		  <literal>ExampleFieldInjectedExecutionListener</literal>类串联了两个注入的属性。
		  （一个是固定的，一个是动态的），把他们保存到流程变量'<literal>var</literal>'中。
        </para>
        <para>
        <programlisting>
@Deployment(resources = {"org/activiti/examples/bpmn/executionListener/ExecutionListenersFieldInjectionProcess.bpmn20.xml"})
public void testExecutionListenerFieldInjection() {
  Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();
  <emphasis role="bold">variables.put("myVar", "listening!");</emphasis>

  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("executionListenersProcess", variables);

  Object varSetByListener = runtimeService.getVariable(processInstance.getId(), "var");
  assertNotNull(varSetByListener);
  assertTrue(varSetByListener instanceof String);

  // Result is a concatenation of fixed injected field and injected expression
  <emphasis role="bold">assertEquals("Yes, I am listening!", varSetByListener);</emphasis>
}
        </programlisting>
        </para>
        </section>
         </section>

  <section id="taskListeners">

    <title>任务监听器</title>

    <para>
      <emphasis>任务监听器</emphasis>可以在发生对应的任务相关事件时执行自定义java逻辑
	  或表达式。
    </para>

    <para>
	  任务监听器只能添加到流程定义中的<link linkend="bpmnUserTask">用户任务</link>中。
	  注意它必须定义在<emphasis>BPMN 2.0 extensionElements</emphasis>的子元素中，
	  并使用<emphasis>activiti</emphasis>命名空间，因为任务监听器是activiti独有的结构。
      <programlisting>
&lt;userTask id=&quot;myTask&quot; name=&quot;My Task&quot; &gt;
  &lt;extensionElements&gt;
    <emphasis role="bold">&lt;activiti:taskListener event=&quot;create&quot; class=&quot;org.activiti.MyTaskCreateListener&quot; /&gt;</emphasis>
  &lt;/extensionElements&gt;
&lt;/userTask&gt;</programlisting>
      <emphasis>任务监听器</emphasis>支持以下属性：
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">event</emphasis>（必选）：任务监听器会被调用的任务类型。
			可能的类型为：
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">create</emphasis>：任务创建并<emphasis role="bold">设置所有属性后</emphasis>触发。
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">assignment</emphasis>：任务分配给一些人时触发。
				  当流程到达userTask， <emphasis>assignment</emphasis>事件
				  会在<emphasis>create</emphasis>事件<emphasis role="bold">之前</emphasis>发生。
				  这样的顺序似乎不自然，但是原因很简单：当获得<emphasis>create</emphasis>时间时，
				  我们想获得任务的所有属性，包括执行人。
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">complete</emphasis>：当任务完成，并尚未从运行数据中删除时触发。
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">delete</emphasis>：只在任务删除之前发生。
				  注意在通过completeTask正常完成时，也会执行。
                </para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">class</emphasis>：必须调用的代理类。
			这个类必须实现<literal>org.activiti.engine.delegate.TaskListener</literal>接口。
            <programlisting>
public class MyTaskCreateListener implements TaskListener {

  public void notify(DelegateTask delegateTask) {
    // Custom logic goes here
  }

}</programlisting>

			可以使用<link linkend="serviceTaskFieldInjection">属性注入</link>把流程变量或执行传递给代理类。
			注意代理类的实例是在部署时创建的
			（和activiti中其他类代理的情况一样），这意味着所有流程实例都会共享同一个实例。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">expression</emphasis>：（无法同时与<emphasis>class</emphasis>属性一起使用）：
			指定事件发生时执行的表达式。
			可以把<literal>DelegateTask</literal>对象和事件名称（使用<literal>task.eventName</literal>）
			作为参数传递给调用的对象。
            <programlisting>&lt;activiti:taskListener event=&quot;create&quot; expression=&quot;${myObject.callMethod(task, task.eventName)}&quot; /&gt;</programlisting>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">delegateExpression</emphasis>可以指定一个表达式，解析一个实现了<literal>TaskListener</literal>接口的对象，
			<link linkend="bpmnJavaServiceTaskXML">这与服务任务一致</link>。
            <programlisting>&lt;activiti:taskListener event=&quot;create&quot; delegateExpression=&quot;${myTaskListenerBean}&quot; /&gt;</programlisting>
          </para>
        </listitem>
        <listitem>
          <para>
		  在activiti 5.12中，我们也介绍了新的任务监听器，org.activiti.engine.impl.bpmn.listener.ScriptTaskListener。
		  脚本任务监听器可以为任务监听器事件执行脚本。
<programlisting>
&lt;activiti:taskListener event=&quot;complete&quot; class=&quot;org.activiti.engine.impl.bpmn.listener.ScriptTaskListener&quot; &gt;
  &lt;activiti:field name="script"&gt;
    &lt;activiti:string&gt;
      def bar = "BAR";  // local variable
      foo = "FOO"; // pushes variable to execution context
      task.setOwner("kermit"); // test access to task instance
      bar // implicit return value
    &lt;/activiti:string&gt;
  &lt;/activiti:field&gt;
  &lt;activiti:field name="language" stringValue="groovy" /&gt;
  &lt;activiti:field name="resultVariable" stringValue="myVar" /&gt;
&lt;activiti:taskListener&gt;</programlisting>
        </para>
        </listitem>
      </itemizedlist>
    </para>

  </section>

    <section id="bpmnMultiInstance">

      <title>多实例（循环）</title>

      <section id="bpmnMultiInstanceDescription">

        <title>描述</title>

        <para>
		  <emphasis>多实例节点</emphasis>是在业务流程中定义重复环节的一个方法。
		  从开发角度讲，多实例和<emphasis role="bold">循环</emphasis>是一样的：
		  它可以根据给定的集合，为每个元素执行一个环节甚至一个完整的子流程，
		  <emphasis role="bold">既可以顺序依次执行也可以并发同步执行</emphasis>。
        </para>

        <para>
		  <emphasis>多实例</emphasis>是在一个普通的节点上添加了额外的属性定义
		  （所以叫做<emphasis>'多实例</emphasis>特性'），这样运行时节点就会执行多次。
		  下面的节点都可以成为一个<emphasis>多实例节点：</emphasis>
          <itemizedlist>
            <listitem><para><link linkend="bpmnUserTask">User Task</link></para></listitem>
            <listitem><para><link linkend="bpmnScriptTask">Script Task</link></para></listitem>
            <listitem><para><link linkend="bpmnJavaServiceTask">Java Service Task</link></para></listitem>
            <listitem><para><link linkend="bpmnWebserviceTask">Web Service Task</link></para></listitem>
            <listitem><para><link linkend="bpmnBusinessRuleTask">Business Rule Task</link></para></listitem>
            <listitem><para><link linkend="bpmnEmailTask">Email Task</link></para></listitem>
            <listitem><para><link linkend="bpmnManualTask">Manual Task</link></para></listitem>
            <listitem><para><link linkend="bpmnReceiveTask">Receive Task</link></para></listitem>
            <listitem><para><link linkend="bpmnSubProcess">(Embedded) Sub-Process</link></para></listitem>
            <listitem><para><link linkend="bpmnCallActivity">Call Activity</link></para></listitem>
          </itemizedlist>
          <link linkend="bpmnGateways">网关</link>和<link linkend="bpmnEvents">事件</link>
		  <emphasis role="bold">不能</emphasis>设置多实例。
        </para>

        <para>
		  根据规范的要求，每个上级流程为每个实例创建分支时都要提供如下变量：
          <itemizedlist>
            <listitem><para><emphasis role="bold">nrOfInstances</emphasis>：实例总数</para></listitem>
            <listitem><para><emphasis role="bold">nrOfActiveInstances</emphasis>：当前活动的，比如，还没完成的，实例数量。
			对于顺序执行的多实例，值一直为1。</para></listitem>
            <listitem><para><emphasis role="bold">nrOfCompletedInstances</emphasis>：已经完成实例的数目。</para></listitem>
          </itemizedlist>
		  可以通过<literal>execution.getVariable(x)</literal>方法获得这些变量。
        </para>

        <para>
		  另外，每个创建的分支都会有分支级别的本地变量（比如，其他实例不可见，
		  不会保存到流程实例级别）：
          <itemizedlist>
            <listitem><para><emphasis role="bold">loopCounter</emphasis>：表示特定实例的<emphasis>在循环的索引值</emphasis>。可以使用activiti的<emphasis role="bold">elementIndexVariable</emphasis>属性修改loopCounter的变量名。</para></listitem>

          </itemizedlist>
        </para>

      </section>

      <section id="bpmnMultiInstanceGraphicalNotation">

        <title>图形标记</title>

        <para>
		  如果节点是多实例的，会在节点底部显示三条短线。
		  三条<emphasis>竖</emphasis>线表示实例会并行执行。
		  三条<emphasis>横</emphasis>线表示顺序执行。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.multi.instance.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnMultiInstanceXml">

        <title>Xml内容</title>

        <para>
		 要把一个节点设置为多实例，节点xml元素必须设置一个<literal>multiInstanceLoopCharacteristics</literal>子元素。
         <programlisting>
&lt;multiInstanceLoopCharacteristics isSequential=&quot;false|true&quot;&gt;
 ...
&lt;/multiInstanceLoopCharacteristics&gt;</programlisting>
         <emphasis role="bold">isSequential</emphasis>属性表示节点是进行
		 顺序执行还是并行执行。
        </para>

        <para>
		  实例的数量会<emphasis role="bold">在进入节点时计算一次</emphasis>。
		  有一些方法配置它。一种方法是使用<emphasis role="bold">loopCardinality</emphasis>子元素直接指定一个数字。
          <programlisting>
&lt;multiInstanceLoopCharacteristics isSequential=&quot;false|true&quot;&gt;
  &lt;loopCardinality&gt;5&lt;/loopCardinality&gt;
&lt;/multiInstanceLoopCharacteristics&gt;</programlisting>
		  也可以使用结果为整数的表达式：
          <programlisting>
&lt;multiInstanceLoopCharacteristics isSequential=&quot;false|true&quot;&gt;
  &lt;loopCardinality&gt;${nrOfOrders-nrOfCancellations}&lt;/loopCardinality&gt;
&lt;/multiInstanceLoopCharacteristics&gt;</programlisting>
        </para>

        <para>
		  另一个定义实例数目的方法是，通过<literal>loopDataInputRef</literal>子元素，设置一个类型为集合的流程变量名。
		  对于集合中的每个元素，都会创建一个实例。
		  也可以通过<literal>inputDataItem</literal>子元素指定集合。
		  下面的代码演示了这些配置：
          <programlisting>
&lt;userTask id=&quot;miTasks&quot; name=&quot;My Task ${loopCounter}&quot; activiti:assignee=&quot;${assignee}&quot;&gt;
  &lt;multiInstanceLoopCharacteristics isSequential=&quot;false&quot;&gt;
    &lt;loopDataInputRef&gt;assigneeList&lt;/loopDataInputRef&gt;
    &lt;inputDataItem name=&quot;assignee&quot; /&gt;
  &lt;/multiInstanceLoopCharacteristics&gt;
&lt;/userTask&gt;</programlisting>
		  假设<literal>assigneeList</literal>变量包含这些值<literal>[kermit, gonzo, foziee]</literal>。
		  在上面代码中，三个用户任务会同时创建。每个分支都会拥有一个用名为<literal>assignee</literal>的流程变量，
		  这个变量会包含集合中的对应元素，在例子中会用来设置用户任务的分配者。
        </para>

        <para>
		  <literal>loopDataInputRef</literal>和<literal>inputDataItem</literal>的缺点是1）名字不好记，
		  2）根据BPMN 2.0格式定义，它们不能包含表达式。activiti通过在
		  <literal>multiInstanceCharacteristics</literal>中设置
		  <emphasis role="bold">collection</emphasis>和
		  <emphasis role="bold">elementVariable</emphasis>属性解决了这个问题：
          <programlisting>
&lt;userTask id=&quot;miTasks&quot; name=&quot;My Task&quot; activiti:assignee=&quot;${assignee}&quot;&gt;
  &lt;multiInstanceLoopCharacteristics isSequential=&quot;true&quot;
     <emphasis role="bold">activiti:collection=&quot;${myService.resolveUsersForTask()}&quot; activiti:elementVariable=&quot;assignee&quot; </emphasis>&gt;
  &lt;/multiInstanceLoopCharacteristics&gt;
&lt;/userTask&gt;</programlisting>
        </para>

        <para>
		  多实例节点在所有实例都完成时才会结束。也可以指定一个表达式在每个实例结束时执行。
		  如果表达式返回true，所有其他的实例都会销毁，多实例节点也会结束，流程会继续执行。
		  这个表达式必须定义在<emphasis role="bold">completionCondition</emphasis>子元素中。
          <programlisting>
&lt;userTask id=&quot;miTasks&quot; name=&quot;My Task&quot; activiti:assignee=&quot;${assignee}&quot;&gt;
  &lt;multiInstanceLoopCharacteristics isSequential=&quot;false&quot;
     activiti:collection=&quot;assigneeList&quot; activiti:elementVariable=&quot;assignee&quot; &gt;
    <emphasis role="bold">&lt;completionCondition&gt;${nrOfCompletedInstances/nrOfInstances >= 0.6 }&lt;/completionCondition&gt;</emphasis>
  &lt;/multiInstanceLoopCharacteristics&gt;
&lt;/userTask&gt;</programlisting>
		  在这里例子中，会为<literal>assigneeList</literal>集合的每个元素创建一个并行的实例。
		  当60%的任务完成时，其他任务就会删除，流程继续执行。
        </para>

      </section>

      <section id="bpmnMultiInstanceBoundaryEvent">

        <title>边界事件和多实例</title>

        <para>
		  因为多实例是一个普通节点，它也可以在边缘使用<link linkend="bpmnBoundaryEvent">边界事件</link>。
		  对于中断型边界事件，当捕获事件时，<emphasis role="bold">所有激活的实例</emphasis>都会销毁。
		  参考以下多实例子流程：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.multi.instance.boundary.event.png"/></imageobject></mediaobject>
		  这里，子流程的所有实例都会在定时器触发时销毁，无论有多少实例，
		  也不管内部哪个节点没有完成。
        </para>

      </section>

    </section>

<section id="bpmnCompensationHandlers">
	<title>补偿处理器</title>


	 <section id="bpmnCompensationHandlerDescription">

        <title>描述</title>
		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>
        <para>
		 如果一个节点用来补偿另一个节点的业务，它可以声明为一个补偿处理器。
		 补偿处理器不包含普通的流，只在补偿事件触发时执行。
        </para>

        <para>
			补偿处理器不能包含进入和外出顺序流。
        </para>

        <para>
			补偿处理器必须使用直接关联分配给一个补偿边界事件。
        </para>

      </section>

      <section id="bpmnCompensationHandlerGraphicalNotation">

        <title>图形标志</title>

        <para>
		  如果节点是补偿处理器，补偿事件图标会显示在中间底部区域。下面的流程图显示了一个服务任务，附加了一个补偿边界事件，
		  并分配了一个补偿处理器。
		  注意"cancel hotel reservation"服务任务中间底部区域显示的补偿处理器图标。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.boundary.compensation.event.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnCompensationHandlerXml">

        <title>XML内容</title>
		为了声明作为补偿处理器的节点，我们需要把<code>isForCompensation</code>设置为<code>true</code>：
      	<programlisting>
&lt;serviceTask id=&quot;undoBookHotel&quot; isForCompensation=&quot;true&quot; activiti:class=&quot;...&quot;&gt;
&lt;/serviceTask&gt;</programlisting>
      </section>
	</section>
</section>
       	 <!--

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  												Subprocesses

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   -->
<section id="bpmnSubprocessAndCallActivity">

	<title>子流程和调用节点</title>

		<section id="bpmnSubProcess">

		  <title>子流程</title>

		  <section id="bpmnSubProcessDescription">

		    <title>描述</title>

		    <para>
			  <emphasis>子流程（Sub-process）</emphasis>是一个包含其他节点，网关，事件等等的节点。
			  它自己就是一个流程，同时是更大流程的一部分。
			  <emphasis>子流程</emphasis>是完全定义在父流程里的
			  （这就是为什么叫做<emphasis>内嵌</emphasis>子流程）。
		    </para>

		    <para>
			  子流程有两种主要场景：
		      <itemizedlist>
		        <listitem>
		          <para>
				    子流程可以使用<emphasis role="bold">继承式建模</emphasis>。
					很多建模工具的子流程可以<emphasis>折叠</emphasis>，
					把子流程的内部细节隐藏，显示一个高级别的端对端的业务流程总览。
		          </para>
		        </listitem>
		        <listitem>
		          <para>
				    子流程会创建一个新的<emphasis role="bold">事件作用域</emphasis>。
					子流程运行过程中抛出的事件，可以被子流程边缘定义的
					<link linkend="bpmnBoundaryEvent">边界事件</link>捕获，
					这样就可以创建一个仅限于这个子流程的事件作用范围。
		          </para>
		        </listitem>
		      </itemizedlist>
		    </para>

		    <para>
			  使用子流程要考虑如下限制：
		      <itemizedlist>
		        <listitem>
		          <para>
				    子流程只能包含<emphasis role="bold">一个空开始事件</emphasis>，
					不能使用其他类型的开始事件。子路程必须<emphasis role="bold">
					至少有一个结束节点</emphasis>。注意，BPMN 2.0规范允许忽略子流程的
					开始和结束节点，但是当前activiti的实现并不支持。
		          </para>
		        </listitem>
		        <listitem>
		          <para>
		            <emphasis role="bold">顺序流不能跨越子流程的边界。</emphasis>
		          </para>
		        </listitem>
		      </itemizedlist>
		    </para>

		  </section>

		  <section id="bpmnSubProcessGraphicalNotation">

        <title>图形标记</title>

        <para>
		  子流程显示为标准的节点，圆角矩形。
		  这时子流程是<emphasis>折叠的</emphasis>，只显示名称和一个加号标记，
		  展示了高级别的流程总览：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.collapsed.subprocess.png"/></imageobject></mediaobject>
        </para>

        <para>
		  这时子流程是<emphasis>展开的</emphasis>，子流程的步骤都显示在子流程边界内：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.expanded.subprocess.png"/></imageobject></mediaobject>
        </para>

        <para>
		  使用子流程的主要原因，是定义对应事件的作用域。
		  下面流程模型演示了这个功能：<emphasis>调查软件/调查引荐</emphasis>任务需要同步执行，
		  两个任务需要在同时完成，在<emphasis>二线支持</emphasis>解决之前。
		  这里，定时器的作用域（比如，节点需要及时完成）是由子流程限制的。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.subprocess.with.boundary.timer.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnSubProcessXML">

        <title>XML内容</title>

        <para>
		  子流程定义为<emphasis>subprocess</emphasis>元素。
		  所有节点，网关，事件，等等。它是子流程的一部分，需要放在这个元素里。
          <programlisting>
&lt;subProcess id=&quot;subProcess&quot;&gt;

  &lt;startEvent id=&quot;subProcessStart&quot; /&gt;

  ... other Sub-Process elements ...

  &lt;endEvent id=&quot;subProcessEnd&quot; /&gt;

 &lt;/subProcess&gt;
          </programlisting>
        </para>

      </section>

		</section>

		<!-- ///////////////////////////////////////// Event Sub-Process -->

		<section id="bpmnEventSubprocess">

		  <title>事件子流程</title>

		  <section id="bpmnEventSubprocessDescription">

		    <title>描述</title>

		    <para>
			  事件子流程是BPMN 2.0中的新元素。事件子流程是由事件触发的子流程。
			  事件子流程可以添加到流程级别或任意子流程级别。用于触发事件子流程的事件是使用开始事件配置的。
			  为此，事件子流程是不支持空开始事件的。
			  事件子流程可以被消息事件，错误事件，信号事件，定时器事件，或补偿事件触发。
			  开始事件的订阅在包含事件子流程的作用域（流程实例或子流程）创建时就会创建。
			  当作用域销毁也会删除订阅。
		    </para>

			<para>
				事件子流程可以是中断的或非中断的。一个中断的子流程会取消当前作用域内的所有流程。
				非中断事件子流程会创建那一个新的同步分支。中断事件子流程只会被每个激活状态的宿主触发一次，
				非中断事件子流程可以触发多次。子流程是否是终端的，配置使用事件子流程的开始事件配置。
		   	</para>

		   	<para>
				事件子流程不能有任何进入和外出流程。当事件触发一个事件子流程时，输入顺序流是没有意义的。
				当事件子流程结束时，无论当前作用域已经结束了（中断事件子流程的情况），
				或为非中断子流程生成同步分支会结束。
		   	</para>

		   	<para>
		   		<emphasis role="bold">当前的限制：</emphasis>
		   		<itemizedlist>
		   			<listitem>
		   				<para>
							activiti只支持中断事件子流程。
		   				</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							activiti只支持使用错误开始事件或消息开始事件的事件子流程。
		   				</para>
		   			</listitem>
		   		</itemizedlist>
		   	</para>

		  </section>

		  <section id="bpmnEventSubprocessGraphicalNotation">

        <title>图像标记</title>

        <para>
		  事件子流程可以显示为边框为虚线的<link linkend="bpmnSubProcessGraphicalNotation">内嵌子流程</link>。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.subprocess.eventSubprocess.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnEventSubprocessXMLRepresentation">

        <title>XML内容</title>

        <para>
			事件子流程的XML内容与<link linkend="bpmnSubProcessXMLRepresentation">内嵌子流程</link>是一样的。
			另外，要把<code>triggeredByEvent</code>属性设置为<code>true</code>：
<programlisting>
&lt;subProcess id=&quot;eventSubProcess&quot; triggeredByEvent=&quot;true&quot;&gt;
	...
&lt;/subProcess&gt;
</programlisting>
        </para>

      </section>

      <section id="bpmnEventSubprocessExample">

        <title>实例</title>

        <para>
			下面是一个使用错误开始事件触发的事件子流程的实例。事件子流程是放在“流程级别”的，
			意思是，作用于流程实例：
  			<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.subprocess.eventSubprocess.example.1.png"/></imageobject></mediaobject>
			事件子流程的XML如下所示：
<programlisting>
&lt;subProcess id=&quot;eventSubProcess&quot; triggeredByEvent=&quot;true&quot;&gt;
	&lt;startEvent id=&quot;catchError&quot;&gt;
		&lt;errorEventDefinition errorRef=&quot;error&quot; /&gt;
	&lt;/startEvent&gt;
	&lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;catchError&quot; targetRef=&quot;taskAfterErrorCatch&quot; /&gt;
	&lt;userTask id=&quot;taskAfterErrorCatch&quot; name=&quot;Provide additional data&quot; /&gt;
&lt;/subProcess&gt;
</programlisting>
        </para>

        <para>
			如上面所述，事件子流程也可以添加成内嵌子流程。如果添加为内嵌子流程，它其实是边界事件的一种替代方案。
			考虑下面两个流程图。两种情况内嵌子流程会抛出一个错误事件。两种情况错误都会被捕获并使用一个用户任务处理。
        	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.subprocess.eventSubprocess.example.2a.png"/></imageobject></mediaobject>
        	<para>相对于：</para>
        	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.subprocess.eventSubprocess.example.2b.png"/></imageobject></mediaobject>
			 两种场景都会执行相同的任务。然而，两种建模的方式是不同的：
        	<itemizedlist>
        		<listitem>
        			<para>
						内嵌子流程是使用与执行作用域宿主相同的流程执行的。意思是内嵌子流程可以访问它作用域内的内部变量。
						当使用边界事件时，执行内嵌子流程的流程会删除，并生成一个流程根据边界事件的顺序流继续执行。
						这意味着内嵌子流程创建的变量不再起作用了。
        			</para>
        		</listitem>
        		<listitem>
        			<para>
						当使用事件子流程时，事件是完全由它添加的子流程处理的。
						当使用边界事件时，事件由父流程处理。
        			</para>
        		</listitem>
        	</itemizedlist>
			这两个不同点可以帮助我们决定是使用边界事件还是内嵌事件子流程来解决特定的流程建模/实现问题。
        </para>
      </section>
    </section>


    	<!-- ///////////////////////////////////////// transaction subprocess -->

		<section id="bpmnTransactionSubprocess">

		  <title>事务子流程</title>

		<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>

		  <section id="bpmnTransactionSubprocessDescription">

		    <title>描述</title>

		    <para>
			  事务子流程是内嵌子流程，可以用来把多个流程放到一个事务里。
			  事务是一个逻辑单元，可以把一些单独的节点放在一起，这样它们就可以一起成功或一起失败。
		    </para>

		    <para>
		    	<emphasis role="bold">事务可能的结果：</emphasis>
		    	事务可以有三种可能的结果：
		    	<itemizedlist>
		    		<listitem>
		    			<para>
							事务<emphasis>成功</emphasis>，如果没有取消也没有因为问题终结。如果事务子流程是成功的，
							就会使用外出顺序流继续执行。
							如果流程后来抛出了一个补偿事件，成功的事务可能被补偿。
							   	<para>
							   		<emphasis role="bols">注意：</emphasis>和普通内嵌子流程一样，事务可能在成功后，
									使用中间补偿事件进行补偿。
							   	</para>
		    			</para>
		    		</listitem>
		    		<listitem>
		    			<para>
							事务<emphasis>取消</emphasis>，如果流程到达取消结束事件。这时，
							所有流程都会终结和删除。触发补偿的一个单独的流程，会通过取消边界事件继续执行。
							在补偿完成之后，事务子流程会使用取消边界事务的外出顺序流向下执行。
		    			</para>
		    		</listitem>
		    		<listitem>
		    			<para>
							事务被<emphasis>问题</emphasis>结束，如果跑出了一个错误事件，
							而且没有在事务子流程中捕获。（如果错误被事务子流程的边界事件处理了，也会这样应用。）
							这时，不会执行补偿。
		    			</para>
		    		</listitem>
		    	</itemizedlist>
				下面的图形演示了三种不同的结果：
		    	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.transaction.subprocess.example.1.png"/></imageobject></mediaobject>
		    </para>

			<para>
				<emphasis role="bold">与ACID事务的关系：</emphasis>一定不要吧bpmn事务子流程与技术（ACID）事务相混淆。
				bpmn事务子流程不是技术事务领域的东西。要理解activiti中的事务管理，请参考
				<link linkend="bpmnConcurrencyAndTransactions">并发与事务</link>。
				bpmn事务和技术事务有以下不同点：
		   		<itemizedlist>
		   			<listitem>
		   				<para>
							ACID事务一般是短期的，bpmn事务可能持续几小时，几天，甚至几个月才能完成。
							（考虑事务中包含的节点可能有用户任务，一般人员响应的时间比应用时间要长。或者，
							或者，在其他情况下，bpmn事务可能要等待发生一些事务事件，就像要根据某种次序执行。）
							这种操作通常要相比更新数据库的一条数据，或把一条信息保存到事务性队列中，消耗更长的时间来完成。
		   				</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							因为不能在整个业务节点的过程中保持一个技术性的事务，所以bpmn事务一般要跨越多个ACID事务。
		   				</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							因为bpmn事务会跨越多个ACID事务，所以会丧失ACID的特性。比如，考虑上述例子。
							假设“约定旅店”和“刷信用卡”操作在单独的ACID事务中执行。
							也假设“预定旅店”节点已经成功了。现在我们处于一个中间不稳定状态，因为我们预定了酒店，但是还没有刷信用卡。
							现在，在一个ACID事务中，我们要依次执行不同的操作，也会有一个中间不稳定状态。
							不同的是，这个中间状态对事务的外部是可见的。
							比如，如果通过外部预定服务进行了预定，其他使用相同预定服务的部分就可以看到旅店被预定了。
							这意味着实现业务事务时，我们完全失去了隔离属性
							（注：我们也经常放弃隔离性，来为ACID事务获得更高的并发，但是我们可以完全控制，中间不稳定状态也只持续很短的时间）。
		   				</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							bpmn业务事务也不能使用通常的方式回滚。因为它跨越了多个事务，bpmn事务取消时一些ACID事务可能已经提交了。
							这时，它们不能被回滚了。
		   				</para>
		   			</listitem>
		   		</itemizedlist>
		   	</para>

		   	<para>
				因为bpmn事务实际上运行时间很长，缺乏隔离性和回滚机制都需要被区别对待。
				实际上，这里也没有更好的办法在特定领域处理这些问题：
		   		<itemizedlist>
		   			<listitem>
		   				<para>
							使用补偿执行回滚。如果事务范围抛出了取消事件，会影响已经执行成功的节点，
							并使用补偿处理器执行补偿。
		   				</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							隔离性的缺乏通常使用特定领域的解决方法来解决。比如，上面的例子中，
							一个旅店房间可能会展示给第二个客户，在我们确认第一个客户付费之前。
							虽然这可能与业务预期不符，预定服务可能选择允许一些过度的预约。
		   				</para>
		   			</listitem>
		   			<listitem>
		   				<para>
							另外，因为事务会因为风险而中断，预定服务必须处理这种情况，已经预定了旅店，但是一直没有付款的情况。
							（因为事务被中断了）。这时预定服务需要选择一个策略，在旅店房间预定超过最大允许时间后，
							如果还没有付款，预定就会取消。
		   				</para>
		   			</listitem>
		   		</itemizedlist>
				综上所述：ACID处理的是通常问题（回滚，隔离级别和启发式结果），
				在实现业务事务时，我们需要找到特定领域的解决方案来处理这些问题。
		   	</para>

		   	<para>
		   		<emphasis role="bold">目前的限制：</emphasis>
		   		<itemizedlist>
		   			<listitem>
		   				<para>
							bpmn规范要求流程引擎能根据底层事务的协议处理事件，比如如果底层协议触发了取消事件，事务就会取消。
							作为内嵌引擎，activiti目前不支持这项功能。（对此造成的后果，可以参考下面的一致性讨论）。
		   				</para>
		   			</listitem>
		   		</itemizedlist>
		   	</para>

		   	<para>
		   		<emphasis role="bold">ACID事务顶层的一致性和优化并发：</emphasis>
				bpmn事务保证一致性，要么所有节点都成功，或者一些节点成功，对其他成功的节点进行补偿。
				无论哪种方式，都会有一致性的结果。不过要讨论一些activiti内部的情况，bpmn事务的一致性模型是叠加在流程的一致性模型之上的。
				activiti执行流程是事务性的。并发使用了乐观锁。在activiti中，bpmn错误，取消和补偿事件都建立在同样的acid事务与乐观锁之上。
				比如，取消结束事件只能触发它实际到达的补偿。如果之前服务任务抛出了未声明的异常。或者，
				补偿处理器的效果无法提交，如果底层的acid事务的参与者把事务设置成必须回滚。
				或者当两个并发流程到达了取消结束事件，可能会触发两次补偿，并因为乐观锁异常失败。
				所有这些都说明activiti中实现bpmn事务时，相同的规则也作用域普通的流程和子流程。
				所以为了保证一致性，重要的是使用一种方式考虑实现乐观事务性的执行模型。
		   	</para>

		  </section>

		  <section id="bpmnEventSubprocessGraphicalNotation.2">

        <title>图形标记</title>

        <para>
		  事务子流程显示为<link linkend="bpmnSubProcessGraphicalNotation">内嵌子流程</link>，使用双线边框。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.transaction.subprocess.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnEventSubprocessXMLRepresentation.2">

        <title>XML内容</title>

        <para>
			事务子流程使用<code>transaction</code>标签：
<programlisting>
&lt;transaction id=&quot;myTransaction&quot; &gt;
	...
&lt;/transaction&gt;
</programlisting>
        </para>

      </section>

      <section id="bpmnEventSubprocessExample.2">

        <title>实例</title>

        <para>
			下面是事务子流程的实例：
        	<mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.transaction.subprocess.example.2.png"/></imageobject></mediaobject>
        </para>

      </section>
    </section>

		<!-- ///////////////////////////////////////// call activity -->

		<section id="bpmnCallActivity">

		  <title>调用活动（子流程）</title>

		  <section id="bpmnCallActivityDescription">

		    <title>描述</title>

		    <para>
			  bpmn 2.0区分了普通<emphasis><link linkend="bpmnSubProcess">子流程</link></emphasis>，
			  也叫做<emphasis>内嵌子流程</emphasis>，和调用节点，看起来很相似。
			  上概念上讲，当流程抵达及诶单时，两者都会调用子流程。
		    </para>

		    <para>
			  不同点是调用节点引用流程定义外部的一个流程，<emphasis><link linkend="bpmnSubProcess">子流程</link></emphasis>
			  会内嵌到原始的流程定义中。使用调用节点的主要场景是需要重用流程定义，
			  这个流程定义需要被很多其他流程定义调用的时候。
		    </para>

		    <para>
			  当流程执行到<emphasis>调用节点</emphasis>，会创建一个新分支，它是到达调用节点的流程的分支。
			  这个分支会用来执行子流程，默认创建并行子流程，就像一个普通的流程。
			  上级流程会等待子流程完成，然后才会继续向下执行。
		    </para>

		  </section>

		  <section id="bpmnCallActivityGraphicalNotation">

        <title>图形标记</title>

        <para>
		  调用节点显示与<link linkend="bpmnSubProcessGraphicalNotation">子流程</link>相同，
		  不过是粗边框（无论是折叠和展开的）。
		  根据不同的建模工具，调用节点也可以展开，但是显示为折叠的子流程。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.collapsed.call.activity.png"/></imageobject></mediaobject>
        </para>

      </section>

      <section id="bpmnCallActivityXMLRepresentation">

        <title>XML内容</title>

        <para>
          A call activity is a regular activity, that requires a <emphasis>calledElement</emphasis>
          that references a process definition by its <emphasis role="bold">key</emphasis>.
          In practice, this means that the <emphasis role="bold">id of the process</emphasis> is
          used in the <emphasis>calledElement</emphasis>.
<programlisting>
&lt;callActivity id=&quot;callCheckCreditProcess&quot; name=&quot;Check credit&quot; calledElement=&quot;checkCreditProcess&quot; /&gt;
</programlisting>
        </para>

        <para>
		  注意，子流程的流程定义是<emphasis role="bold">在执行阶段解析的</emphasis>。
		  就是说子流程可以与调用的流程分开部署，如果需要的话。
        </para>

      </section>

      <section id="bpmnCallActivityPassVariables">
        <title>传递变量</title>
        <para>
		  可以把流程变量传递给子流程，反之亦然。数据会复制给子流程，当它启动的时候，
		  并在它结束的时候复制回主流程。
<programlisting>
&lt;callActivity id=&quot;callSubProcess&quot; calledElement=&quot;checkCreditProcess&quot; &gt;
  &lt;extensionElements&gt;
	  &lt;activiti:in source=&quot;someVariableInMainProcess&quot; target=&quot;nameOfVariableInSubProcess&quot; /&gt;
	  &lt;activiti:out source=&quot;someVariableInSubProcss&quot; target=&quot;nameOfVariableInMainProcess&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/callActivity&gt;
</programlisting>
		  我们使用activiti扩展来简化BPMN标准元素调用<emphasis>dataInputAssociation</emphasis>和
		  <emphasis>dataOutputAssociation</emphasis>，这只在你使用BPMN 2.0标准方式声明流程变量才管用。
        </para>

        <para>
		  这里也可以使用表达式：
<programlisting>
&lt;callActivity id=&quot;callSubProcess&quot; calledElement=&quot;checkCreditProcess&quot; &gt;
	&lt;extensionElements&gt;
	  &lt;activiti:in sourceExpression=&quot;${x+5}"&quot; target=&quot;y&quot; /&gt;
	  &lt;activiti:out source=&quot;${y+5}&quot; target=&quot;z&quot; /&gt;
	&lt;/extensionElements&gt;
&lt;/callActivity&gt;
</programlisting>
		  最后z = y + 5 = x + 5 + 5
        </para>

      </section>

      <section id="bpmnCallActivityExample">

        <title>实例</title>

        <para>
		 下面的流程图演示了简单订单处理。先判断客户端信用，这可能与很多其他流程相同。
		  <emphasis>检查信用阶段</emphasis>这里设计成调用节点。
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.call.activity.super.process.png"/></imageobject></mediaobject>
		  流程看起来像下面这样：
<programlisting>
&lt;startEvent id=&quot;theStart&quot; /&gt;
&lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;theStart&quot; targetRef=&quot;receiveOrder&quot; /&gt;

&lt;manualTask id=&quot;receiveOrder&quot; name=&quot;Receive Order&quot; /&gt;
&lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;receiveOrder&quot; targetRef=&quot;callCheckCreditProcess&quot; /&gt;

<emphasis role="bold">&lt;callActivity id=&quot;callCheckCreditProcess&quot; name=&quot;Check credit&quot; calledElement=&quot;checkCreditProcess&quot; /&gt;</emphasis>
&lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;callCheckCreditProcess&quot; targetRef=&quot;prepareAndShipTask&quot; /&gt;

&lt;userTask id=&quot;prepareAndShipTask&quot; name=&quot;Prepare and Ship&quot; /&gt;
&lt;sequenceFlow id=&quot;flow4&quot; sourceRef=&quot;prepareAndShipTask&quot; targetRef=&quot;end&quot; /&gt;

&lt;endEvent id=&quot;end&quot; /&gt;
</programlisting>
		  子流程看起来像下面这样：
          <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.call.activity.sub.process.png"/></imageobject></mediaobject>
		  子流程的流程定义没有什么特别的。
		  它也可以单独使用，不用其他流程调用。
        </para>

      </section>

    </section>

</section>



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
     -->

<section id="bpmnConcurrencyAndTransactions">

	<title>事务和并发</title>

	<section id="asyncContinuations">

        <title>异步操作</title>

        <para>
		activiti通过事务方式执行流程，可以根据你的需求定制。现在开始看一下activiti通常是如何处理事务的。
		如果触发了activiti的操作（比如，开始流程，完成任务，触发流程继续执行），
		activiti会推进流程，直到每个分支都进入等待状态。更抽象的说，它会流程图执行深度优先搜索，
		如果每个分支都遇到等待状态，就会返回。等待状态是&quot;稍后&quot;需要执行任务，
		就是说activiti会把当前状态保存到数据库中，然后等待下一次触发。
		触发可能来自外部，比如用户任务或接收到一个消息，也可能来自activiti本身，比如我们设置了定时器事件。
		下面图片展示了这种操作：

        <mediaobject><imageobject><imagedata align="center" fileref="images/activiti.async.example.no.async.PNG"/></imageobject></mediaobject>

		我们可以看到包含用户任务，服务任务和定时器事件的流程。完成用户任务，和校验地址是在同一个工作单元中，
		所以它们的成功和失败是原子性的。意味着如果服务任务抛出异常，我们要回滚当前事务，
		这样流程会退回到用户任务，用户任务就依然在数据库里。
		这就是activiti默认的行为。在（1）中应用或客户端线程完成任务。这会执行服务，流程推进，直到遇到一个等待状态，
		这里就是定时器（2）。然后它会返回给调用者（3），并提交事务（如果事务是由activiti开启的）。
    </para>

    <para>
		有的时候，这不是我们想要的。有时我们需要自己控制流程中事务的边界，这样就能把业务逻辑包裹在一起。
		这就需要使用异步执行了。参考下面的流程（判断）：

        <mediaobject><imageobject><imagedata align="center" fileref="images/activiti.async.example.async.PNG"/></imageobject></mediaobject>

		这次我们完成了用户任务，生成一个发票，把发票发送给客户。
		这次生成发票不在同一个工作单元内了，所以我们不想对用户任务进行回滚，如果生成发票出错了。
		所以，我们想让activiti实现的是完成用户任务（1），提交事务，返回给调用者应用。然后在后台的线程中，异步执行生成发票。
		后台线程就是activiti的job执行器（其实是一个线程池）周期对数据库的job进行扫描。
		所以后面的场景，当我们到达&quot;generate invoice&quot;任务，我们为activiti创建一个稍后执行的job&quot;消息&quot;，
		并把它保存到数据库。
		job会被job执行器获取并执行。我们也会给本地job执行器一个提醒，告诉它有一个新job，来增加性能。
	</para>

    <para>
		要想使用这个特性，我们要使用<emphasis>activiti:async="true"</emphasis>扩展。例子中，服务任务看起来就是这样：
        <programlisting>
&lt;serviceTask id=&quot;service1&quot; name=&quot;Generate Invoice&quot; activiti:class=&quot;my.custom.Delegate&quot; activiti:async=&quot;true&quot; /&gt;
        </programlisting>
        activiti:async可以使用到如下bpmn任务类型中：
        task, serviceTask, scriptTask, businessRuleTask, sendTask, receiveTask, userTask, subProcess, callActivity
    </para>

    <para>
		对于userTask，receiveTask和其他等待装填，异步执行的作用是让开始流程监听器运行在一个单独的线程/事务中。
    </para>

	</section>
	<section id="exclusiveJobs">

        <title>排他任务</title>

		从activiti 5.9开始，JobExecutor能保证同一个流程实例中的job不会并发执行。为啥呢？

        <section>
        	<title>为什么要使用排他任务？</title>


	        <para>参考如下流程定义：</para>

	        <mediaobject><imageobject><imagedata align="center" fileref="images/bpmn.why.exclusive.jobs.png"/></imageobject></mediaobject>

	        <para>我们有一个并行网关，后面有三个服务任务，它们都设置为异步执行。这样会添加三个job到数据库里。
			一旦job进入数据库，它就可以被jobExecutor执行了。JobExecutor会获取job，把它们代理到工作线程的线程池中，会在那里真正执行job。
			就是说，使用异步执行，你可以吧任务分配给这个线程池（在集群环境，可能会使用多个线程池）。这通常是个好事情。
			然而它也会产生问题：一致性。考虑一下服务任务后的汇聚。
			当服务任务完成后，我们到达并发汇聚节点，需要决定是等待其他分支，还是继续向下执行。
			就是说，对每个到达并行汇聚的分支，我们都需要判断是继续还是等待其他分支的一个或多个分支。</para>

	        <para>
			为什么这就是问题了呢？因为服务任务配置成使用异步执行，可能相关的job都在同一时间被获取，被JobExecutor分配给不同的工作线程执行。
			结果是三个单独的服务执行使用的事务在到达并发汇聚时可能重叠。如果出现了这个问题，这些事务是互相不可见的，
			其他事务同时到达了相同的并发汇聚，假设它们都在等待其他分支。然而，每个事务都假设它们在等待其他分支，
			所以没有分支会越过并发汇聚继续执行，流程实例会一直在等待状态，无法继续执行。
	         </para>

	         <para>
			 activiti是如何解决这个问题的？activiti使用了乐观锁。当我们基于判断的数据看起来不是最新的时
			 （因为其他事务可能在我们提交之前进行了修改，我们会在每个事务里增加数据库同一行的版本）。这时，第一个提交的事务会成功，
			 其他会因为乐观锁异常导致失败。这就解决了我们上面讨论的流程的问题：如果多个分支同步到达并行汇聚，
			 它们会假设它们都在登录，并增加它们父流程的版本号（流程实例）然后尝试提交。
			 第一个分支会成功提交，其他分支会因为乐观锁导致失败。因为流程是被job触发的，
			 activiti会尝试在等待一段时间后尝试执行同一个job，想这段时间可以同步网关的状态。
	         </para>

	         <para>
			 这是一个很好的解决方案吗？像我们看到的一样，乐观锁允许activiti避免非一致性。它确定我们不会“堵在汇聚网关”，
			 意思是：或者所有分支都通过网关，或者数据库中的job正在尝试通过。然而，虽然这是一个对于持久性和一致性的完美解决方案，
			 但对于上层来说不一定是期望的行为：

	          <itemizedlist>
			      <listitem>
			        <para>
					  activiti只会对同一个job重试估计次数（默认配置为3）。之后，job还会在数据库里，但是不会再重试了。
					  意味着这个操作必须手工执行job的触发。
			        </para>
			      </listitem>
			      <listitem>
			        <para>
					  如果job有非事务方面的效果，它不会因为失败的事务回滚。比如，如果“预定演唱会门票”服务没有与activiti共享事务，
					  重试job可能导致我们预定了过多门票。
			        </para>
			      </listitem>
			    </itemizedlist>

	         </para>
			 在activiti中，我们推荐了新的概念，并已经在jbpm4中实现了，叫做“排他job”。

         </section>
         <section>
        	<title>什么是排他job？</title>
        	<para>
				对于一个流程实例，排他任务不能同时执行两个。考虑上面的流程：
				如果我们把服务任务申请为排他任务，JobExecutor会保证对应的job不会并发执行。
				相反，它会保证无论什么时候获取一个流程实例的排他任务，都会把同一个流程实例的其他任务都取出来，放在同一个工作线程中执行。
				它保证job是顺序执行的。
        	</para>

        	<para>
				如何启用这个特性？从activiti 5.9开始，排他任务已经是默认配置了。所以异步执行和定时器事件默认都是排他任务。
				另外，如果你想把job设置为非塔牌，可以使用<code>activiti:exclusive="false"</code>进行配置。
				比如，下面的服务任务就是异步但是非排他的。

        		<programlisting>
&lt;serviceTask id=&quot;service&quot; activiti:expression=&quot;${myService.performBooking(hotel, dates)}&quot; activiti:async=&quot;true&quot; activiti:exclusive=&quot;false&quot; /&gt;
        		</programlisting>
        	</para>

        	<para>
				这是一个好方案吗？
				有一些人文我们这是否是一个好方案。他们的结论会帮你在并发和性能问题方面节省时间。
				这个问题上需要考虑两件事情：
        		  <itemizedlist>
			      <listitem>
			        <para>
					  如果是你专家并且知道自己在做什么时（理解“为什么排他任务”这章的内容），也可以关闭这个功能，
					  否则，对于大多数使用异步执行和定时器的用户来说，这个功能是没问题的。
			        </para>
			      </listitem>
			      <listitem>
			        <para>
					  它也没有性能问题，在高负载的情况下性能是个问题。高负载意味着JobExecutor的所有工作线程都一直在忙碌着。
					  使用排他任务，activiti可以简单的分布不同的负载。排他任务意味着同一个流程实例的异步执行会由相同的线程顺序执行。
					  但是要考虑：如果你有多个流程实例时。
					  所有其他流程实例的job也会分配给其他线程同步执行。
					  意味着虽然activiti不会同时执行一个流程实例的排他job，但是还会同步执行多个流程实例的一步执行。
				通过一个总体的预测，在大多数场景下，它都会让单独的实例运行的更迅速。
				而且，对于同一流程实例中的job，需要用到的数据也会利用执行的集群节点的缓存。
				如果任务没有在同一个节点执行，数据就必须每次从数据库重新读取了。
			        </para>
			      </listitem>
			    </itemizedlist>

        	</para>
        </section>
      </section>
	</section>
  <section id="security">
      <title>流程实例授权</title>
	  默认所有人在部署的流程定义上启动一个新流程实例。通过流程初始化授权功能定义的用户和组，web客户端可以限制哪些用户可以启动一个新流程实例。
	  <emphasis role="bold">注意</emphasis>：activiti引擎<emphasis role="bold">不会</emphasis>校验授权定义。
	  这个功能只是为减轻web客户端开发者实现校验规则的难度。
	  设置方法与用户任务用户分配类似。
	  用户或组可以使用&lt;activiti:potentialStarter&gt;标签分配为流程的默认启动者。下面是一个例子：
 <programlisting>
   &lt;process id="potentialStarter"&gt;
     &lt;extensionElements&gt;
       &lt;activiti:potentialStarter&gt;
         &lt;resourceAssignmentExpression&gt;
           &lt;formalExpression>group2, group(group3), user(user3)&lt;/formalExpression&gt;
         &lt;/resourceAssignmentExpression&gt;
       &lt;/activiti:potentialStarter&gt;
     &lt;/extensionElements&gt;
   &lt;startEvent id="theStart"/&gt;
   ...
 </programlisting>
上面的XML中，user(user3)是直接引用了用户user3，group(group3)是引用了组group3。如果没显示设置，默认认为是群组。
也可以使用&lt;process&gt;标签的属性，&lt;activiti:candidateStarterUsers&gt;和&lt;activiti:candidateStarterGroups&gt;。
下面是一个例子：

  <programlisting>
      &lt;process id="potentialStarter" activiti:candidateStarterUsers="user1, user2"
                                        activiti:candidateStarterGroups="group1"&gt;
      ...
  </programlisting>
<para>
可以同时使用这两个属性。
</para>
<para>
定义流程初始化授权后，开发者可以使用如下方法获得授权定义。
这些代码可以获得给定的用户可以启动哪些流程定义：
   <programlisting>
      processDefinitions = repositoryService.createProcessDefinitionQuery().startableByUser("userxxx").list();
   </programlisting>
</para>
<para>
也可以获得指定流程定义设置的潜在启动者对应的IdentityLink。
   <programlisting>
      identityLinks = repositoryService.getIdentityLinksForProcessDefinition("processDefinitionId");
   </programlisting>
</para>
<para>
下面例子演示了如何获得可以启动给定流程的用户列表：
   <programlisting>
      List&lt;User&gt; authorizedUsers =  identityService().createUserQuery().potentialStarter("processDefinitionId").list();
   </programlisting>
</para>
<para>
相同的方式，获得可以启动给定流程配置的群组：
   <programlisting>
      List&lt;Group&gt; authorizedGroups =  identityService().createGroupQuery().potentialStarter("processDefinitionId").list();
   </programlisting>
</para>
</section>

<section id="dataobjects">
      <title>数据对象</title>
      <link linkend="experimental">
      <emphasis role="bold">[试验功能]</emphasis>
    </link>
    <para>
      BPMN提供了一种功能，可以在流程定义或子流程中定义数据对象。根据BPMN规范，流程定义可以包含复杂XML结构，
	  可以导入XSD定义。对于Activiti来说，作为Activiti首次支持的数据对象，可以支持如下的XSD类型：
    </para>
    <itemizedlist>
	    <listitem>
      <programlisting>
        &lt;dataObject id="dObj1" name="StringTest" itemSubjectRef="xsd:string"/&gt;
      </programlisting>
	    </listitem>
 	    <listitem>
      <programlisting>
        &lt;dataObject id="dObj2" name="BooleanTest" itemSubjectRef="xsd:boolean"/&gt;
      </programlisting>
	    </listitem>
 	    <listitem>
      <programlisting>
        &lt;dataObject id="dObj3" name="DateTest" itemSubjectRef="xsd:datetime"/&gt;
      </programlisting>
	    </listitem>
 	    <listitem>
      <programlisting>
        &lt;dataObject id="dObj4" name="DoubleTest" itemSubjectRef="xsd:double"/&gt;
      </programlisting>
	    </listitem>
 	    <listitem>
      <programlisting>
        &lt;dataObject id="dObj5" name="IntegerTest" itemSubjectRef="xsd:int"/&gt;
      </programlisting>
	    </listitem>
 	    <listitem>
      <programlisting>
        &lt;dataObject id="dObj6" name="LongTest" itemSubjectRef="xsd:long"/&gt;
      </programlisting>
	    </listitem>
    </itemizedlist>
    <para>
	  数据对象定义会自动转换为流程变量，名称与'name'属性对应。
	  除了数据对象的定义之外，activiti也支持使用扩展元素来为这个变量赋予默认值。下面的BPMN片段就是对应的例子：
    </para>
    <programlisting>
        &lt;process id="dataObjectScope" name="Data Object Scope" isExecutable="true"&gt;
          &lt;dataObject id="dObj123" name="StringTest123" itemSubjectRef="xsd:string"&gt;
            &lt;extensionElements&gt;
              &lt;activiti:value&gt;Testing123&lt;/activiti:value&gt;
            &lt;/extensionElements&gt;
          &lt;/dataObject&gt;
      </programlisting>
</section>

</chapter>
