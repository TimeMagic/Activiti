<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="chapterApi">
  <title>Activiti API</title>

  <section id="apiEngine">
    <title>流程引擎的API和服务</title>
    <para>引擎API是与Activiti打交道的最常用方式。
	我们从<literal>ProcessEngine</literal>开始，
	创建它的很多种方法都已经在
	<link linkend="configuration">配置章节</link>中有所涉及。
	从ProcessEngine中，你可以获得很多囊括工作流/BPM方法的服务。
	ProcessEngine和服务类都是线程安全的。
	你可以在整个服务器中仅保持它们的一个引用就可以了。
    </para>
    <mediaobject><imageobject><imagedata align="center" fileref="images/api.services.png"/></imageobject></mediaobject>
    <programlisting>ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();

RuntimeService runtimeService = processEngine.getRuntimeService();
RepositoryService repositoryService = processEngine.getRepositoryService();
TaskService taskService = processEngine.getTaskService();
ManagementService managementService = processEngine.getManagementService();
IdentityService identityService = processEngine.getIdentityService();
HistoryService historyService = processEngine.getHistoryService();
FormService formService = processEngine.getFormService();</programlisting>

    <para><literal>ProcessEngines.getDefaultProcessEngine()</literal>会在第一次调用时
	初始化并创建一个流程引擎，以后再调用就会返回相同的流程引擎。
	使用对应的方法可以创建和关闭所有流程引擎：<literal>ProcessEngines.init()</literal>
    和 <literal>ProcessEngines.destroy()</literal>。
    </para>

    <para>ProcessEngines会扫描所有<literal>activiti.cfg.xml</literal> 和 <literal>activiti-context.xml</literal> 文件。
	对于<literal>activiti.cfg.xml</literal>文件，流程引擎会使用Activiti的经典方式构建：
    <literal>ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine()</literal>.
    对于<literal>activiti-context.xml</literal>文件，流程引擎会使用Spring方法构建：先创建一个Spring的环境，
	然后通过环境获得流程引擎。
    </para>

    <para>
	    所有服务都是无状态的。这意味着可以在多节点集群环境下运行Activiti，每个节点都指向同一个数据库，
		不用担心哪个机器实际执行前端的调用。
		无论在哪里执行服务都没有问题。
    </para>

    <para>
		<emphasis role="bold">RepositoryService</emphasis>可能是使用Activiti引擎时最先接触的服务。
		它提供了管理和控制<literal>发布包</literal>和<literal>流程定义</literal>的操作。
		这里不涉及太多细节，流程定义是BPMN 2.0流程的java实现。
		它包含了一个流程每个环节的结构和行为。
		<literal>发布包</literal>是Activiti引擎的打包单位。一个发布包可以包含多个BPMN 2.0 xml文件和其他资源。
		开发者可以自由选择把任意资源包含到发布包中。
		既可以把一个单独的BPMN 2.0 xml文件放到发布包里，也可以把整个流程和相关资源都放在一起。
		（比如，'hr-processes'实例可以包含hr流程相关的任何资源）。
		可以通过<literal>RepositoryService</literal>来<literal>部署</literal>这种发布包。
		发布一个发布包，意味着把它上传到引擎中，所有流程都会在保存进数据库之前分析解析好。
		从这点来说，系统知道这个发布包的存在，发布包中包含的流程就已经可以启动了。
    </para>

    <para>
		除此之外，服务可以
        <itemizedlist>
            <listitem><para>
				查询引擎中的发布包和流程定义。
            </para></listitem>
            <listitem><para>
				暂停或激活发布包，对应全部和特定流程定义。
				暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。
            </para></listitem>
            <listitem><para>
				获得多种资源，像是包含在发布包里的文件，
				或引擎自动生成的流程图。
            </para></listitem>
            <listitem><para>
				获得流程定义的pojo版本，
				可以用来通过java解析流程，而不必通过xml。
            </para></listitem>
        </itemizedlist>
    </para>

    <para>
		正如<literal>RepositoryService</literal>负责静态信息（比如，不会改变的数据，至少是不怎么改变的），
		<emphasis role="bold">RuntimeService</emphasis>正好是完全相反的。它负责启动一个流程定义的新实例。
		如上所述，<literal>流程定义</literal>定义了流程各个节点的结构和行为。
		流程实例就是这样一个流程定义的实例。对每个流程定义来说，同一时间会有很多实例在执行。
		<literal>RuntimeService</literal>也可以用来获取和保存<literal>流程变量</literal>。
		这些数据是特定于某个流程实例的，并会被很多流程中的节点使用
		（比如，一个排他网关常常使用流程变量来决定选择哪条路径继续流程）。
		<literal>Runtimeservice</literal>也能查询流程实例和执行。
		执行对应BPMN 2.0中的<literal>'token'</literal>。基本上执行指向流程实例当前在哪里。
		最后，<literal>RuntimeService</literal>可以在流程实例等待外部触发时使用，这时可以用来继续流程实例。
		流程实例可以有很多<literal>暂停状态</literal>，而服务提供了多种方法来'触发'实例，
		接受外部触发后，流程实例就会继续向下执行。
    </para>

    <para>
		任务是由系统中真实人员执行的，它是Activiti这类BPMN引擎的核心功能之一。
		所有与任务有关的功能都包含在<emphasis role="bold">TaskService</emphasis>中：
        <itemizedlist>
            <listitem><para>
				查询分配给用户或组的任务
            </para></listitem>
            <listitem><para>
				创建<emphasis>独立运行</emphasis>任务。这些任务与流程实例无关。
            </para></listitem>
            <listitem><para>
				手工设置任务的执行者，或者这些用户通过何种方式与任务关联。
            </para></listitem>
            <listitem><para>
				认领并完成一个任务。认领意味着一个人期望成为任务的执行者，
				即这个用户会完成这个任务。完成意味着“做这个任务要求的事情”。
				通常来说会有很多种处理形式。
            </para></listitem>
        </itemizedlist>
    </para>

    <para>
		<emphasis role="bold">IdentityService</emphasis>非常简单。它可以管理（创建，更新，删除，查询...）群组和用户。
		请注意， Activiti执行时并没有对用户进行检查。
		例如，任务可以分配给任何人，但是引擎不会校验系统中是否存在这个用户。
		这是Activiti引擎也可以使用外部服务，比如ldap，活动目录，等等。
    </para>

    <para>
		<emphasis role="bold">FormService</emphasis>是一个可选服务。即使不使用它，Activiti也可以完美运行，
		不会损失任何功能。这个服务提供了<emphasis>启动表单</emphasis>和<emphasis>任务表单</emphasis>两个概念。
		<emphasis>启动表单</emphasis>会在流程实例启动之前展示给用户，
		<emphasis>任务表单</emphasis>会在用户完成任务时展示。Activiti支持在BPMN 2.0流程定义中设置这些表单。
		这个服务以一种简单的方式将数据暴露出来。再次重申，它时可选的，
		表单也不一定要嵌入到流程定义中。
    </para>

    <para>
		<emphasis role="bold">HistoryService</emphasis>提供了Activiti引擎手机的所有历史数据。
		在执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者，
		完成任务的时间，每个流程实例的执行路径，等等。
		这个服务主要通过查询功能来获得这些数据。
    </para>

    <para>
		<emphasis role="bold">ManagementService</emphasis>在使用Activiti的定制环境中基本上不会用到。
		它可以查询数据库的表和表的元数据。另外，它提供了查询和管理异步操作的功能。
		Activiti的异步操作用途很多，比如定时器，异步操作，
		延迟暂停、激活，等等。后续，会讨论这些功能的更多细节。
    </para>

    <para>
	可以从<ulink url="../javadocs/index.html">javadocs</ulink>中获得这些服务和引擎API的更多信息。
    </para>

  </section>

  <section>
    <title>异常策略</title>
    <para>Activiti中的基础异常为<literal>org.activiti.engine.ActivitiException</literal>，一个非检查异常。
	这个异常可以在任何时候被API抛出，不过特定方法抛出的“特定”的异常都记录在
	<ulink url="../javadocs/index.html">javadocs</ulink>中。
	例如，下面的<literal>TaskService</literal>：
    <programlisting>/**
 * Called when the task is successfully executed.
 * @param taskId the id of the task to complete, cannot be null.
 * @throws ActivitiObjectNotFoundException when no task exists with the given id.
 */
 void complete(String taskId);
    </programlisting>

    在上面的例子中，当传入一个不存在的任务的id时，就会抛出异常。
	同时，javadoc<emphasis role="bold">明确指出taskId不能为null，如果传入<literal>null</literal>，
	就会抛出<literal>ActivitiIllegalArgumentException</literal></emphasis>。
    </para>
    <para>
	  我们希望避免过多的异常继承，下面的子类用于特定的场合。
	  流程引擎和API调用的其他场合不会使用下面的异常，
	  它们会抛出一个普通的<literal>ActivitiExceptions</literal>。
      <itemizedlist>
        <listitem>
            <para>
             <literal>ActivitiWrongDbException</literal>：当Activiti引擎发现数据库版本号和引擎版本号不一致时抛出。
            </para>
          </listitem>
          <listitem>
            <para>
             <literal>ActivitiOptimisticLockingException</literal>：对同一数据进行并发方法并出现乐观锁时抛出。
            </para>
          </listitem>
          <listitem>
            <para>
             <literal>ActivitiClassLoadingException</literal>：当无法找到需要加载的类或在加载类时出现了错误（比如，JavaDelegate，TaskListener等。
            </para>
          </listitem>
          <listitem>
            <para>
             <literal>ActivitiObjectNotFoundException</literal>：当请求或操作的对应不存在时抛出。
            </para>
          </listitem>
          <listitem>
            <para>
             <literal>ActivitiIllegalArgumentException</literal>：这个异常表示调用Activiti API时传入了一个非法的参数，可能是引擎配置中的非法值，或提供了一个非法制，或流程定义中使用的非法值。
            </para>
          </listitem>
          <listitem>
            <para>
             <literal>ActivitiTaskAlreadyClaimedException</literal>：当任务已经被认领了，再调用<literal>taskService.claim(...)</literal>就会抛出。
            </para>
          </listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="api.services">
    <title>使用Activiti的服务</title>
    <para>
		像上面介绍的那样，要想操作Activiti引擎，需要通过
		<literal>org.activiti.engine.ProcessEngine</literal>实例暴露的服务。
		下面的代码假设你已经拥有了一个可以运行的Activiti环境。
		你就可以操作一个<literal>org.activiti.engine.ProcessEngine</literal>。
		如果只想简单尝试一下代码，
		可以下载或者clone<ulink url="https://github.com/Activiti/activiti-unit-test-template">Activiti单元测试模板</ulink>，
		导入到IDE中，把<literal>testUserguideCode()</literal>方法添加到
		<literal>org.activiti.MyUnitTest</literal>中。
    </para>
    <para>
		这个小例子的最终目标是做一个工作业务流程，
		演示公司中简单的请假申请：
        <mediaobject><imageobject><imagedata align="center" fileref="images/api.vacationRequest.png"/></imageobject></mediaobject>
    </para>

    <section id="api.services.deployment">
        <title>发布流程</title>
        <para>
			任何与“静态”资源有关的数据（比如流程定义）都可以通过
			<emphasis role="bold">RepositoryService</emphasis>访问。
			从概念上讲，所以静态数据都是Activiti的资源内容。
        </para>
        <para>
			在<literal>src/test/resources/org/activiti/test</literal>目录下创建一个新的xml文件
			<literal>VacationRequest.bpmn20.xml</literal>（如果不使用单元测试模板，你也可以在任何地方创建），
			内容如下。注意这一章不会解释例子中使用的xml结构。
			如果有需要可以先阅读<link linkend="bpmn20">bpmn 2.0章</link>来了解这些。
            <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;definitions id=&quot;definitions&quot;
             targetNamespace=&quot;http://activiti.org/bpmn20&quot;
             xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
             xmlns:activiti=&quot;http://activiti.org/bpmn&quot;&gt;

  &lt;process id=&quot;vacationRequest&quot; name=&quot;Vacation request&quot;&gt;

    &lt;startEvent id=&quot;request&quot; activiti:initiator=&quot;employeeName&quot;&gt;
      &lt;extensionElements&gt;
        &lt;activiti:formProperty id=&quot;numberOfDays&quot; name=&quot;Number of days&quot; type=&quot;long&quot; value=&quot;1&quot; required=&quot;true&quot;/&gt;
        &lt;activiti:formProperty id=&quot;startDate&quot; name=&quot;First day of holiday (dd-MM-yyy)&quot; datePattern=&quot;dd-MM-yyyy hh:mm&quot; type=&quot;date&quot; required=&quot;true&quot; /&gt;
        &lt;activiti:formProperty id=&quot;vacationMotivation&quot; name=&quot;Motivation&quot; type=&quot;string&quot; /&gt;
      &lt;/extensionElements&gt;
    &lt;/startEvent&gt;
    &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;request&quot; targetRef=&quot;handleRequest&quot; /&gt;

    &lt;userTask id=&quot;handleRequest&quot; name=&quot;Handle vacation request&quot; &gt;
      &lt;documentation&gt;
        ${employeeName} would like to take ${numberOfDays} day(s) of vacation (Motivation: ${vacationMotivation}).
      &lt;/documentation&gt;
      &lt;extensionElements&gt;
         &lt;activiti:formProperty id=&quot;vacationApproved&quot; name=&quot;Do you approve this vacation&quot; type=&quot;enum&quot; required=&quot;true&quot;&gt;
          &lt;activiti:value id=&quot;true&quot; name=&quot;Approve&quot; /&gt;
          &lt;activiti:value id=&quot;false&quot; name=&quot;Reject&quot; /&gt;
        &lt;/activiti:formProperty&gt;
        &lt;activiti:formProperty id=&quot;managerMotivation&quot; name=&quot;Motivation&quot; type=&quot;string&quot; /&gt;
      &lt;/extensionElements&gt;
      &lt;potentialOwner&gt;
        &lt;resourceAssignmentExpression&gt;
          &lt;formalExpression&gt;management&lt;/formalExpression&gt;
        &lt;/resourceAssignmentExpression&gt;
      &lt;/potentialOwner&gt;
    &lt;/userTask&gt;
    &lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;handleRequest&quot; targetRef=&quot;requestApprovedDecision&quot; /&gt;

    &lt;exclusiveGateway id=&quot;requestApprovedDecision&quot; name=&quot;Request approved?&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;requestApprovedDecision&quot; targetRef=&quot;sendApprovalMail&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${vacationApproved == 'true'}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;

    &lt;task id=&quot;sendApprovalMail&quot; name=&quot;Send confirmation e-mail&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow4&quot; sourceRef=&quot;sendApprovalMail&quot; targetRef=&quot;theEnd1&quot; /&gt;
    &lt;endEvent id=&quot;theEnd1&quot; /&gt;

    &lt;sequenceFlow id=&quot;flow5&quot; sourceRef=&quot;requestApprovedDecision&quot; targetRef=&quot;adjustVacationRequestTask&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${vacationApproved == 'false'}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;

    &lt;userTask id=&quot;adjustVacationRequestTask&quot; name=&quot;Adjust vacation request&quot;&gt;
      &lt;documentation&gt;
        Your manager has disapproved your vacation request for ${numberOfDays} days.
        Reason: ${managerMotivation}
      &lt;/documentation&gt;
      &lt;extensionElements&gt;
        &lt;activiti:formProperty id=&quot;numberOfDays&quot; name=&quot;Number of days&quot; value=&quot;${numberOfDays}&quot; type=&quot;long&quot; required=&quot;true&quot;/&gt;
        &lt;activiti:formProperty id=&quot;startDate&quot; name=&quot;First day of holiday (dd-MM-yyy)&quot; value=&quot;${startDate}&quot; datePattern=&quot;dd-MM-yyyy hh:mm&quot; type=&quot;date&quot; required=&quot;true&quot; /&gt;
        &lt;activiti:formProperty id=&quot;vacationMotivation&quot; name=&quot;Motivation&quot; value=&quot;${vacationMotivation}&quot; type=&quot;string&quot; /&gt;
        &lt;activiti:formProperty id=&quot;resendRequest&quot; name=&quot;Resend vacation request to manager?&quot; type=&quot;enum&quot; required=&quot;true&quot;&gt;
          &lt;activiti:value id=&quot;true&quot; name=&quot;Yes&quot; /&gt;
          &lt;activiti:value id=&quot;false&quot; name=&quot;No&quot; /&gt;
        &lt;/activiti:formProperty&gt;
      &lt;/extensionElements&gt;
      &lt;humanPerformer&gt;
        &lt;resourceAssignmentExpression&gt;
          &lt;formalExpression&gt;${employeeName}&lt;/formalExpression&gt;
        &lt;/resourceAssignmentExpression&gt;
      &lt;/humanPerformer&gt;
    &lt;/userTask&gt;
    &lt;sequenceFlow id=&quot;flow6&quot; sourceRef=&quot;adjustVacationRequestTask&quot; targetRef=&quot;resendRequestDecision&quot; /&gt;

    &lt;exclusiveGateway id=&quot;resendRequestDecision&quot; name=&quot;Resend request?&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow7&quot; sourceRef=&quot;resendRequestDecision&quot; targetRef=&quot;handleRequest&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${resendRequest == 'true'}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;

     &lt;sequenceFlow id=&quot;flow8&quot; sourceRef=&quot;resendRequestDecision&quot; targetRef=&quot;theEnd2&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${resendRequest == 'false'}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;
    &lt;endEvent id=&quot;theEnd2&quot; /&gt;

  &lt;/process&gt;

&lt;/definitions&gt;
            </programlisting>
        </para>

        <para>
			为了让Activiti引擎知道这个流程，我们必须先进行“发布”。
			发布意味着引擎会把BPMN 2.0 xml解析成可以执行的东西，
			“发布包”中的所有流程定义都会添加到数据库中。
			这样，当引擎重启时，它依然可以获得“已发布”的流程：
            <programlisting>
ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
RepositoryService repositoryService = processEngine.getRepositoryService();
repositoryService.createDeployment()
  .addClasspathResource(&quot;org/activiti/test/VacationRequest.bpmn20.xml&quot;)
  .deploy();

Log.info(&quot;Number of process definitions: &quot; + repositoryService.createProcessDefinitionQuery().count());
            </programlisting>
        </para>

        <para>
			可以阅读<link linkend="chDeployment">发布章</link>来了解更多关于发布的信息。
        </para>
    </section>

    <section id="api.services.start.processinstance">
        <title>启动一个流程实例</title>
        <para>
			把流程定义发布到Activiti引擎后，我们可以基于它发起新流程实例。
			对每个流程定义，都可以有很多流程实例。
			流程定义是“蓝图”，流程实例是它的一个运行的执行。
        </para>
        <para>
			所有与流程运行状态相关的东西都可以通过<emphasis role="bold">RuntimeService</emphasis>获得。
			有很多方法可以启动一个新流程实例。在下面的代码中，我们使用定义在流程定义xml
			中的key来启动流程实例。
			我们也可以在流程实例启动时添加一些流程变量，因为第一个用户任务的表达式需要这些变量。
			流程变量经常会被用到，因为它们赋予来自同一个流程定义的不同流程实例的特别含义。
			简单来说，流程变量是区分流程实例的关键。
            <programlisting>
Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();
variables.put(&quot;employeeName&quot;, &quot;Kermit&quot;);
variables.put(&quot;numberOfDays&quot;, new Integer(4));
variables.put(&quot;vacationMotivation&quot;, &quot;I'm really tired!&quot;);

RuntimeService runtimeService = processEngine.getRuntimeService();
ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;vacationRequest&quot;, variables);

// Verify that we started a new process instance
Log.info(&quot;Number of process instances: &quot; + runtimeService.createProcessInstanceQuery().count());
            </programlisting>
        </para>
    </section>

    <section id="api.services.tasls">
        <title>完成任务</title>
        <para>
			流程启动后，第一步就是用户任务。这是必须由系统用户处理的一个环节。
			通常，用户会有一个“任务列表”，展示了所有必须由整个用户处理的任务。
			下面的代码展示了对应的查询可能是怎样的：
            <programlisting>
// Fetch all tasks for the management group
TaskService taskService = processEngine.getTaskService();
List&lt;Task&gt; tasks = taskService.createTaskQuery().taskCandidateGroup(&quot;management&quot;).list();
for (Task task : tasks) {
  Log.info(&quot;Task available: &quot; + task.getName());
}
            </programlisting>
        </para>
        <para>
			为了让流程实例继续运行，我们需要完成整个任务。对Activiti来说，就是需要<literal>complete</literal>任务。
			下面的代码展示了如何做这件事：
            <programlisting>
Task task = tasks.get(0);

Map&lt;String, Object&gt; taskVariables = new HashMap&lt;String, Object&gt;();
taskVariables.put(&quot;vacationApproved&quot;, &quot;false&quot;);
taskVariables.put(&quot;managerMotivation&quot;, &quot;We have a tight deadline!&quot;);
taskService.complete(task.getId(), taskVariables);
            </programlisting>
			流程实例会进入到下一个环节。在这里例子中，
			下一环节允许员工通过表单调整原始的请假申请。员工可以重新提交请假申请，
			这会使流程重新进入到第一个任务。
        </para>
    </section>

    <section id="api.services.suspend">
        <title>挂起，激活一个流程</title>
        <para>
			我们可以挂起一个流程定义。当挂起流程定时时，
			就不能创建新流程了（会抛出一个异常）。
			可以通过<literal>RepositoryService</literal>挂起一个流程：
            <programlisting>
repositoryService.suspendProcessDefinitionByKey(&quot;vacationRequest&quot;);
try {
  runtimeService.startProcessInstanceByKey(&quot;vacationRequest&quot;);
} catch (ActivitiException e) {
  e.printStackTrace();
}
            </programlisting>
			要想重新激活一个流程定义，可以调用<literal>repositoryService.activateProcessDefinitionXXX</literal>方法。
        </para>
        <para>
			也可以挂起一个流程实例。挂起时，流程不能继续执行（比如，完成任务会抛出异常），
			异步操作（比如定时器）也不会执行。
			骨气流程实例可以调用
			<literal>runtimeService.suspendProcessInstance</literal>方法。
			激活流程实例可以调用<literal>runtimeService.activateProcessInstanceXXX</literal>方法。
        </para>
    </section>

    <section id="api.services">
        <title>更多知识</title>
        <para>
			上面章节中我们仅仅覆盖了Activiti功能的表层。
			未来我们会继续扩展这些章节，以覆盖更多Activiti API。
			当然，像其他开源项目一样，学习的最好方式
			是研究代码，阅读javadoc。
        </para>
    </section>

  </section>

  <section id="queryAPI">
    <title>查询API</title>
    <para>
	  有两种方法可以从引擎中查询数据：查询API和原生查询。查询API提供了完全类型安全的API。
	  你可以为自己的查询条件添加很多条件
	  （所以条件都以AND组合）和精确的排序条件。下面的代码展示了一个例子：
      <programlisting>
      List&lt;Task&gt; tasks = taskService.createTaskQuery()
         .taskAssignee("kermit")
         .processVariableValueEquals("orderId", "0815")
         .orderByDueDate().asc()
         .list();
      </programlisting>

	  有时，你需要更强大的查询，比如使用OR条件或不能使用查询API实现的条件。
	  这时，我们推荐原生查询，它让你可以编写自己的SQL查询。
	  返回类型由你使用的查询对象决定，数据会映射到正确的对象上。比如，任务，流程实例，，执行，等等。
	  因为查询会作用在数据库上，你必须使用数据库中定义的表名和列名；这要求了解内部数据结构，
	  因此使用原生查询时一定要注意。表名可以通过API获得，可以尽量减少对数据库的依赖。

      <programlisting>
      List&lt;Task&gt; tasks = taskService.createNativeTaskQuery()
        .sql(&quot;SELECT count(*) FROM &quot; + managementService.getTableName(Task.class) + &quot; T WHERE T.NAME_ = #{taskName}&quot;)
        .parameter(&quot;taskName&quot;, &quot;gonzoTask&quot;)
        .list();

      long count = taskService.createNativeTaskQuery()
        .sql(&quot;SELECT count(*) FROM &quot; + managementService.getTableName(Task.class) + &quot; T1, &quot;
               + managementService.getTableName(VariableInstanceEntity.class) + &quot; V1 WHERE V1.TASK_ID_ = T1.ID_&quot;)
        .count();
      </programlisting>
    </para>
  </section>

  <section id="apiExpressions">
    <title>表达式</title>
    <para>Activiti使用UEL处理表达式。UEL即<emphasis>统一表达式语言</emphasis>，它时EE6规范的一部分（参考
          <ulink url="http://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html">
          EE6规范</ulink>）。为了在所有运行环境都支持最新UEL的所有功能，我们使用了一个JUEL的修改版本。
    </para>
    <para>
	  表达式可以用在很多场景下，比如<link linkend="bpmnJavaServiceTaskXML">Java服务任务</link>，<link linkend="executionListeners">执行监听器</link>，<link linkend="taskListeners">任务监听器</link>和<link linkend="conditionalSequenceFlowXml">条件流</link>。
	  虽然有两重表达式，值表达式和方法表达式，Activiti进行了抽象，所以两者可以同样使用在需要<literal>表达式</literal>的场景中。
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Value expression</emphasis>：解析为值。默认，所有流程变量都可以使用。所有spring bean（spring环境中）也可以使用在表达式中。

			一些实例：
<programlisting>${myVar}
${myBean.myProperty}</programlisting>
          </para>
        </listitem>
        <listitem>
        <para>
            <emphasis role="bold">Method expression</emphasis>：调用一个方法，使用或不使用参数。<emphasis role="bold">当调用一个无参数的方法时，记得在方法名后添加空的括号（以区分值表达式）。</emphasis>
			传递的参数可以是字符串也可以是表达式，它们会被自动解析。例子：
<programlisting>${printer.print()}
${myBean.addNewOrder('orderName')}
${myBean.doSomething(myVar, execution)}
</programlisting>
          </para>
        </listitem>
      </itemizedlist>

      注意这些表达式支持解析原始类型（包括比较），bean，list，数组和map。
    </para>
    <para>
	  在所有流程实例中，表达式中还可以使用一些默认对象：
      <itemizedlist>
        <listitem><para><literal>execution</literal>：<literal>DelegateExecution</literal>提供外出执行的额外信息。</para></listitem>
        <listitem><para><literal>task</literal>：<literal>DelegateTask</literal>提供当前任务的额外信息。<emphasis role="bold">注意，只对任务监听器的表达式有效。</emphasis></para></listitem>
        <listitem><para><literal>authenticatedUserId</literal>：当前登录的用户id。如果没有用户登录，这个变量就不可用。</para></listitem>
      </itemizedlist>
    </para>
    <para>
	  想要更多具体的使用方式和例子，参考<link linkend="springExpressions">spring中的表达式</link>，<link linkend="bpmnJavaServiceTaskXML">Java服务任务</link>，<link linkend="executionListeners">执行监听器</link>，<link linkend="taskListeners">任务监听器</link>或<link linkend="conditionalSequenceFlowXml">条件流</link>。
    </para>

  </section>

  <section id="apiUnitTesting">
    <title>单元测试</title>
    <para>
	  业务流程是软件项目的一部分，它也应该和普通的业务流程一样进行测试：
	  使用单元测试。
	  因为Activiti是一个嵌入式的java引擎，
	  为业务流程编写单元测试和写普通单元测试完全一样。
    </para>
    <para>
	  Activiti支持JUnit 3和4进行单元测试。使用JUnit 3时，
	  必须集成<literal>org.activiti.engine.test.ActivitiTestCase</literal>。
	  它通过保护的成员变量提供ProcessEngine和服务，
	  在测试的<literal>setup()</literal>中，
	  默认会使用classpath下的<literal>activiti.cfg.xml</literal>初始化流程引擎。
	  想使用不同的配置文件，可以重写<emphasis>getConfigurationResource()</emphasis>方法。
	  如果配置文件相同的话，对应的流程引擎会被静态缓存，
	  就可以用于多个单元测试。
   </para>
   <para>
    继承了<literal>ActivitiTestCase</literal>你，可以在测试方法上使用
	<literal>org.activiti.engine.test.Deployment</literal>注解。
	测试执行前，与测试类在同一个包下的，
	格式为<literal>testClassName.testMethod.bpmn20.xml</literal>的资源文件，会被部署。
	测试结束后，发布包也会被删除，包括所有相关的流程实例，任务，等等。
	<literal>Deployment</literal>注解也可以直接设置资源的位置。
	参考<ulink url="../javadocs/org/activiti/engine/test/Deployment.html">Javadocs</ulink>获得更多信息。
   </para>
   <para>
     把这些放在一起，JUnit 3测试看起来像这样。
     <programlisting>
public class MyBusinessProcessTest extends ActivitiTestCase {

  @Deployment
  public void testSimpleProcess() {
    runtimeService.startProcessInstanceByKey(&quot;simpleProcess&quot;);

    Task task = taskService.createTaskQuery().singleResult();
    assertEquals(&quot;My Task&quot;, task.getName());

    taskService.complete(task.getId());
    assertEquals(0, runtimeService.createProcessInstanceQuery().count());
  }
}
      </programlisting>
    </para>
    <para>
	  要想在使用JUnit 4编写单元测试时获得同样的功能，
	  可以使用<literal>org.activiti.engine.test.ActivitiRule</literal>。
	  通过它，可以通过getter方法获得流程引擎和各种服务。
	  和 <literal>ActivitiTestCase</literal>一样（参考上面章节），使用这个<literal>Rule</literal>
	  也会启用<literal>org.activiti.engine.test.Deployment</literal>注解（参考上面章节使用和配置的介绍），
	  它会在classpath下查找默认的配置文件。
	  如果配置文件相同的话，对应的流程引擎会被静态缓存，
	  就可以用于多个单元测试。
   </para>
   <para>
     下面的代码演示了JUnit 4单元测试并使用了<literal>ActivitiRule</literal>的例子。
     <programlisting>
public class MyBusinessProcessTest {

  @Rule
  public ActivitiRule activitiRule = new ActivitiRule();

  @Test
  @Deployment
  public void ruleUsageExample() {
    RuntimeService runtimeService = activitiRule.getRuntimeService();
    runtimeService.startProcessInstanceByKey(&quot;ruleUsage&quot;);

    TaskService taskService = activitiRule.getTaskService();
    Task task = taskService.createTaskQuery().singleResult();
    assertEquals(&quot;My Task&quot;, task.getName());

    taskService.complete(task.getId());
    assertEquals(0, runtimeService.createProcessInstanceQuery().count());
  }
}
      </programlisting>
    </para>
  </section>

  <section id="apiDebuggingUnitTest">
    <title>调试单元测试</title>

    <para>
	  当使用内存数据库H2进行单元测试时，下面的教程会告诉我们
	  如何在调试环境下更容易的监视Activiti的数据库。
	  这里的截图都是基于eclipse，这种机制很容易复用到其他IDE下。
      IDEs.
    </para>

    <para>
      假设我们已经在单元测试里设置了一个<emphasis>断点</emphasis>。
	  Ecilpse里，在代码左侧双击：
      <mediaobject><imageobject><imagedata align="center" fileref="images/api.test.debug.breakpoint.png"/></imageobject></mediaobject>
      现在用<emphasis>调试</emphasis>模式运行单元测试（右击单元测试，
	  选择“运行为”和“单元测试”），测试会停在我们的断点上，
	  然后我们就可以监视测试的变量，它们显示在右侧面板里。
      <mediaobject><imageobject><imagedata align="center" fileref="images/api.test.debug.view.png"/></imageobject></mediaobject>
	  要监视Activiti的数据，打开<emphasis>“显示”</emphasis>窗口
	  （如果找不到，打开“窗口”->“显示视图”->“其他”，选择<emphasis>显示</emphasis>。）
	  并点击（代码已完成）<literal>org.h2.tools.Server.createWebServer("-web").start()</literal>
      <mediaobject><imageobject><imagedata align="center" fileref="images/api.test.debug.start.h2.server.png"/></imageobject></mediaobject>
	  选择你点击的行，右击。然后选择“显示”（或者直接快捷方式就不用右击了）
      <mediaobject><imageobject><imagedata align="center" fileref="images/api.test.debug.start.h2.server.2.png"/></imageobject></mediaobject>
	  现在打开一个浏览器，打开<ulink url="http://localhost:8082">http://localhost:8082</ulink>，
	  输入内存数据库的JDBC URL（默认为<literal>jdbc:h2:mem:activiti</literal>），
	  点击连接按钮。
      <mediaobject><imageobject><imagedata align="center" fileref="images/api.test.debug.h2.login.png"/></imageobject></mediaobject>
	  你仙子阿可以看到Activiti的数据，通过它们可以了解单元测试时如何以及为什么这样运行的。
      <mediaobject><imageobject><imagedata align="center" fileref="images/api.test.debug.h2.tables.png"/></imageobject></mediaobject>
    </para>

  </section>

  <section id="apiProcessEngineInWebApp">
    <title>web应用中的流程引擎</title>

    <para>
	  <literal>ProcessEngine</literal>是线程安全的，
	  可以在多线程下共享。在web应用中，
	  意味着可以在容器启动时创建流程引擎，
	  在容器关闭时关闭流程引擎。
    </para>

    <para>
	  下面代码演示了如何编写一个<literal>ServletContextListener</literal>
	  在普通的Servlet环境下初始化和销毁流程引擎：
      <programlisting>
public class ProcessEnginesServletContextListener implements ServletContextListener {

  public void contextInitialized(ServletContextEvent servletContextEvent) {
    ProcessEngines.init();
  }

  public void contextDestroyed(ServletContextEvent servletContextEvent) {
    ProcessEngines.destroy();
  }

}</programlisting>
	  <literal>contextInitialized</literal>方法会执行<literal>ProcessEngines.init()</literal>。
	  这会查找classpath下的<literal>activiti.cfg.xml</literal>文件，
	  根据配置文件创建一个<literal>ProcessEngine</literal>（比如，多个jar中都包含配置文件）。
	  如果classpath中包含多个配置文件，确认它们有不同的名字。
	  当需要使用流程引擎时，可以通过<programlisting>ProcessEngines.getDefaultProcessEngine()</programlisting>
	  或<programlisting>ProcessEngines.getProcessEngine("myName");</programlisting>。
	  当然，也可以使用其他方式创建流程引擎，
	  可以参考<link linkend="configuration">配置章节</link>中的描述。
    </para>

    <para>ContextListener中的<literal>contextDestroyed</literal>方法会执行<literal>ProcessEngines.destroy()</literal>.
	这会关闭所有初始化的流程引擎。
    </para>
  </section>

</chapter>
