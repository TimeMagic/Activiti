<?xml version="1.0" encoding="UTF-8"?>

<chapter id="cdiintegration">
  <title>集成CDI</title>

  <para>activiti-cdi模块提供activiti的可配置型和cdi扩展。
  activiti-cdi最突出的特性有：
   <itemizedlist>
        <listitem><para>支持@BusinessProcessScoped beans（绑定到流程实例的cdi bean），</para></listitem>
        <listitem><para>流程为cdi bean支持自定义EL处理器，</para></listitem>
        <listitem><para>使用注解为流程实例提供声明式控制，</para></listitem>
        <listitem><para>Activiti可以挂接在cdi事件总线上，</para></listitem>
        <listitem><para>支持Java EE和Java SE，支持Spring，</para></listitem>
        <listitem><para>支持单元测试。</para></listitem>
   </itemizedlist>
  </para>

  要想在maven项目中使用activiti-cdi，可以添加如下依赖：
<programlisting>
&lt;dependency&gt;
	&lt;groupId&gt;org.activiti&lt;/groupId&gt;
	&lt;artifactId&gt;activiti-cdi&lt;/artifactId&gt;
	&lt;version&gt;5.x&lt;/version&gt;
&lt;/dependency&gt;
</programlisting>
	把'x'替换成你的activiti版本（>=5.6）。它会自动加入activiti-entin和spring。
  <section>
    <title>设置activiti-cdi</title>
    <para>
	Activiti cdi可以安装在不同环境中。这里，我们会根据配置项一一讲解。
    </para>
    <section>
    	<title>查找流程引擎</title>
    	<para>
		cdi扩展需要访问到ProcessEngine。为实现此功能，
		使用<literal>org.activiti.cdi.spi.ProcessEngineLookup</literal>接口在运行期进行查找。
		cdi模块使用默认的名为<literal>org.activiti.cdi.impl.LocalProcessEngineLookup</literal>的实现，
		它使用<literal>ProcessEngines</literal>这个工具类来查找ProcessEngine。默认配置下,
		使用<literal>ProcessEngines#NAME_DEFAULT</literal>来查找ProcessEngine。这个类可能是使用了自定义名称的子类。
		注意：需要把<literal>activiti.cfg.xml</literal>放在classpath下。
    	</para>
    	<para>
		Activiti cdi使用java.util.ServiceLoader SPI处理<literal>org.activiti.cdi.spi.ProcessEngineLookup</literal>的实例。
		为了提供接口的自定义实现，我们需要创建一个文本文件，名为
		<literal>META-INF/services/org.activiti.cdi.spi.ProcessEngineLookup</literal>，
		在文件中我们需要指定实现的全类名。
    	</para>
    	<note>如果你没有提供自定义的<literal>org.activiti.cdi.spi.ProcessEngineLookup</literal>实现，
		activiti会使用默认的<literal>LocalProcessEngineLookup</literal>实现。这时，
		你所需要做的就是把activiti.cfg.xml放到classpath下（看下一章）。
    	</note>
     </section>
     <section>
     	<title>配置Process Engine</title>
     	<para>实际的配置依赖于选用的ProcessEngineLookup策略（参考上章）。
		这里，我们主要结合LocalProcessEngineLookup讨论可用的配置，
		这要求我们在classpath下提供一个spring的activiti.cfg.xml。</para>

     	<para>Activiti提供了不同的ProcessEngineConfiguration实现，主要是依赖实际使用的事务管理策略。
		activiti-cdi模块对事务的要求不严格，意味着任何事务管理策略都可以使用
		（即便是spring事务抽象层）。简单来讲，cdi模块提供两种自定义ProcessEngineConfiguration实现：
     	<itemizedlist>
     		<listitem><literal>org.activiti.cdi.CdiJtaProcessEngineConfiguration</literal>：activiti的JtaProcessEngineConfiguration的子类，
			用于在activiti使用JTA管理的事务环境。
			</listitem>
     		<listitem><literal>org.activiti.cdi.CdiStandaloneProcessEngineConfiguration</literal>：activiti的StandaloneProcessEngineConfiguration的子类，
			用于在activiti使用简单JDBC事务环境。</listitem>
     	</itemizedlist>
		下面是JBoss 7下的activiti.cfg.xml文件的例子：
     	<programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

	&lt;!-- lookup the JTA-Transaction manager --&gt;
	&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;
		&lt;property name=&quot;jndiName&quot; value=&quot;java:jboss/TransactionManager&quot;&gt;&lt;/property&gt;
		&lt;property name=&quot;resourceRef&quot; value=&quot;true&quot; /&gt;
	&lt;/bean&gt;

	&lt;!-- process engine configuration --&gt;
	&lt;bean id=&quot;processEngineConfiguration&quot;
		class=&quot;org.activiti.cdi.CdiJtaProcessEngineConfiguration&quot;&gt;
		&lt;!-- lookup the default Jboss datasource --&gt;
		&lt;property name=&quot;dataSourceJndiName&quot; value=&quot;java:jboss/datasources/ExampleDS&quot; /&gt;
		&lt;property name=&quot;databaseType&quot; value=&quot;h2&quot; /&gt;
		&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;
		&lt;!-- using externally managed transactions --&gt;
		&lt;property name=&quot;transactionsExternallyManaged&quot; value=&quot;true&quot; /&gt;
		&lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
	&lt;/bean&gt;
&lt;/beans&gt;
     	</programlisting>
			这是Glassfish 3.1.1下的例子（假设已经配置了名为jdbc/activiti的datasource）：
     	<programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

	&lt;!-- lookup the JTA-Transaction manager --&gt;
	&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;
		&lt;property name=&quot;jndiName&quot; value=&quot;java:appserver/TransactionManager&quot;&gt;&lt;/property&gt;
		&lt;property name=&quot;resourceRef&quot; value=&quot;true&quot; /&gt;
	&lt;/bean&gt;

	&lt;!-- process engine configuration --&gt;
	&lt;bean id=&quot;processEngineConfiguration&quot;
		class=&quot;org.activiti.cdi.CdiJtaProcessEngineConfiguration&quot;&gt;
		&lt;property name=&quot;dataSourceJndiName&quot; value=&quot;jdbc/activiti&quot; /&gt;
		&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;
		&lt;!-- using externally managed transactions --&gt;
		&lt;property name=&quot;transactionsExternallyManaged&quot; value=&quot;true&quot; /&gt;
		&lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
	&lt;/bean&gt;
&lt;/beans&gt;
     	</programlisting>
	  注意上面的额配置需要&quot;spring-context&quot;模块：
<programlisting>
&lt;dependency&gt;
	&lt;groupId&gt;org.springframework&lt;/groupId&gt;
	&lt;artifactId&gt;spring-context&lt;/artifactId&gt;
	&lt;version&gt;3.0.3.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</programlisting>
	  在Java SE环境下的配置和<link linkend="configuration">创建ProcessEngine</link>章节中提供的例子一样，
     	使用 &quot;CdiStandaloneProcessEngineConfiguration&quot; 替换 &quot;StandaloneProcessEngineConfiguration&quot;。
     	</para>
     </section>
     <section>
     <title>发布流程</title>
     <para>可以使用标准的activiti-api发布流程（<literal>RepositoryService</literal>）。另外，activiti-cdi提供自动发布
	  classpath下<literal>processes.xml</literal>中列出的流程的方式。
	  下面是一个processes.xml文件的例子：
     <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;!-- list the processes to be deployed --&gt;
&lt;processes&gt;
	&lt;process resource=&quot;diagrams/myProcess.bpmn20.xml&quot; /&gt;
	&lt;process resource=&quot;diagrams/myOtherProcess.bpmn20.xml&quot; /&gt;
&lt;/processes&gt;
     </programlisting>
     </para>
     </section>
  </section>
  <section>
  	<title>基于CDI环境的流程执行</title>
  	<para>
	这一章，我们简短了解activiti cdi扩展使用的基于环境的流程执行模型。
	BPMN业务流程通常是一个长时间运行的操作，包含了用户和系统任务的操作。
	运行过程中，流程会分成多个单独的工作单元，由用户和应用逻辑执行。
	在activiti-cdi中，流程实例可以分配到cdi环境中，关联展现成一个工作单元。
	这是非常有用的，如果工作单元太复杂，比如如果实现的用户任务是不同形式的复杂顺序，
	可以在这个操作中保持&quot;non-process-scoped&quot;状态。

	默认配置下，流程实例分配到&quot;broadest&quot;激活环境，就会启动交互，
	如果交互环境没有激活，就会返回到请求中。
	</para>
	<section>
		<title>与流程实例进行关联交互</title>
		<para>
		处理@BusinessProcessScoped beans，或注入流程变量时，我们实现了激活的cdi环境与流程实例的关联。
		Activiti-cdi提供了<literal>org.activiti.cdi.BusinessProcess</literal> bean
		来控制关联，特别是：
		<itemizedlist>
			<listitem><literal>startProcessBy*(...)</literal>方法，对应activiti的<literal>RuntimeService</literal>中的相关方法，
			允许启动和随后向关联的业务流程，</listitem>
			<listitem><literal>resumeProcessById(String processInstanceId)</literal>，允许通过提供的id来关联流程实例，</listitem>
			<listitem><literal>resumeTaskById(String taskId)</literal>，允许通过提供的id来关联任务（扩展情况下，也关联相应的流程实例），</listitem>
		</itemizedlist>
		一个工作单元（比如用户任务）完成后，<literal>completeTask()</literal>方法可以调用来解除流程实例和会话/请求的关联。
		这会通知activiti当前任务已经完成，并让流程实例继续执行。
		</para>

		<para>注意，<literal>BusinessProcess</literal> bean是<literal>@Named</literal> bean，意思是导出的方法可以通过
		表达式语言调用，比如在JSF页面中。下面的JSF 2 代码启动一个新的交互，
		把它分配给一个用户任务实例，id作为一个请求参数传递（比如<literal>pageName.jsf?taskId=XX</literal>）：
<programlisting>
&lt;f:metadata&gt;
&lt;f:viewParam name=&quot;taskId&quot; /&gt;
&lt;f:event type=&quot;preRenderView&quot; listener=&quot;#{businessProcess.startTask(taskId, true)}&quot; /&gt;
&lt;/f:metadata&gt;
</programlisting>
		</para>
	</section>
	<section>
		<title>声明式流程控制</title>
		<para>
		Activiti-cdi允许通过注解声明启动流程实例和完成任务。
		<literal>@org.activiti.cdi.annotation.StartProcess</literal>注解允许
		通过&quot;key&quot;或&quot;name&quot;启动流程实例。
		注意流程实例会在注解的方法返回<emphasis>之后</emphasis>启动。比如：
		<programlisting>
@StartProcess("authorizeBusinessTripRequest")
public String submitRequest(BusinessTripRequest request) {
	// do some work
	return "success";
}
		</programlisting>
		根据activiti的配置，注解方法的代码和启动流程实例
		会在同一个事务中执行。
		<literal>@org.activiti.cdi.annotation.CompleteTask</literal>事务的使用方式相同：
<programlisting>
@CompleteTask(endConversation=false)
public String authorizeBusinessTrip() {
	// do some work
	return "success";
}
</programlisting>
		<literal>@CompleteTask</literal>注解可以结束当前会话。
		默认行为会在activiti返回后结束会话。可以禁用结束会话的功能，
		实例可以参考上述代码。
		</para>
	</section>
	<section>
	  	<title>在流程中引用bean</title>
	  	<para>
		Activiti-cdi使用自定义解析器把CDI bean暴露到activiti El中。这就可以在流程中引用这些bean：
<programlisting>
&lt;userTask id=&quot;authorizeBusinessTrip&quot; name=&quot;Authorize Business Trip&quot;
			activiti:assignee=&quot;#{authorizingManager.account.username}&quot; /&gt;
</programlisting>
		&quot;authorizingManager&quot;可以是生产者方法提供的bean：
<programlisting>
@Inject	@ProcessVariable Object businessTripRequesterUsername;

@Produces
@Named
public Employee authorizingManager() {
	TypedQuery&lt;Employee&gt; query = entityManager.createQuery("SELECT e FROM Employee e WHERE e.account.username='"
		+ businessTripRequesterUsername + "'", Employee.class);
	Employee employee = query.getSingleResult();
	return employee.getManager();
}
</programlisting>
		你可以使用同样的方法在服务任务中调用EJB的业务方法，
		使用<literal>activiti:expression=&quot;myEjb.method()&quot;</literal>扩展。
		注意，这要求在<literal>MyEjb</literal>类中使用<literal>@Named</literal>注解。
	  	</para>
	</section>
	<section>
	  	<title>使用@BusinessProcessScoped beans</title>
		使用activiti-cdi，bean的生命周期可以绑定到流程实例上。为了扩展，可以提供一个自定义的环境实现，
		命名为BusinessProcessContext。BusinessProcessScoped bean的实例会作为流程变量保存到当前流程实例中。
		<emphasis>BusinessProcessScoped bean需要是PassivationCapable（比如序列化）。</emphasis>
		下面是使用流程作用域bean的例子：
<programlisting>
@Named
@BusinessProcessScoped
public class BusinessTripRequest implements Serializable {
	private static final long serialVersionUID = 1L;
	private String startDate;
	private String endDate;
	// ...
}
</programlisting>
		有时，我们需要使用流程作用域bean，没有与流程实例关联，比如启动流程之前。
		如果当前流程实例没有激活，BusinessProcessScoped bean实例会暂时保存在局部作用域里（比如，会话或请求，
		依赖环境。如果作用域后来与业务流程实例关联了，bean实例会刷新到流程实例里。）
	</section>
	<section>
	  	<title>注入流程变量</title>
	  	<para>
		流程变量可以实现用于注入。Activiti-CDI支持以下方式：
	  	<itemizedlist>
	  		<listitem><literal>@BusinessProcessScoped</literal>使用<literal>@Inject [附加修饰] 类型 属性名</literal>实现类型安全的注入</listitem>
	  		<listitem>使用<literal>@ProcessVariable(name?)</literal>修饰符实现对类型不安全的流程变量的注入：
<programlisting>
@Inject @ProcessVariable Object accountNumber;
@Inject @ProcessVariable("accountNumber") Object account
</programlisting>
	  		</listitem>
	  	</itemizedlist>
		为了通过EL引用流程变量，我们可以简单实用如下方式：
	  	<itemizedlist>
	  		<listitem><literal>@Named @BusinessProcessScoped</literal> beans可以直接引用，</listitem>
	  		<listitem>其他流程变量可以使用<literal>ProcessVariables</literal> bean来使用：
<programlisting>
#{processVariables['accountNumber']}
</programlisting>
	  		</listitem>
	  	</itemizedlist>
	  	</para>
	</section>
	<section>
	  	<title>接收流程事件</title>
	  			<link linkend="experimental">
			<emphasis role="bold">[EXPERIMENTAL]</emphasis>
		</link>
	  	<para>
		Activiti可以挂在CDI的事件总线上。这样我们可以使用标准CDI事件机制来监听流程事件。
		为了启用activiti的CDI事件支持，需要在配置中启用对应的解析监听器：
<programlisting>
&lt;property name=&quot;postBpmnParseHandlers&quot;&gt;
	&lt;list&gt;
		&lt;bean class=&quot;org.activiti.cdi.impl.event.CdiEventSupportBpmnParseHandler&quot; /&gt;
	&lt;/list&gt;
&lt;/property&gt;
</programlisting>
现在activiti已经配置成使用CDI事件总线发布事件。下面给出了如何在CDI bean中处理事件的方式。
在CDI，我们可以使用<literal>@Observes</literal>注解声明特定的事件监听器。事件监听是类型安全的。
流程事件类型是<literal>org.activiti.cdi.BusinessProcessEvent</literal>。
下面是一个简单事件监听方法的例子：
<programlisting>
public void onProcessEvent(@Observes BusinessProcessEvent businessProcessEvent) {
	// handle event
}
</programlisting>
监听器可以监听所有事件。如果想限制监听器接收的事件类型，我们可以添加修饰注解：
		<itemizedlist>
	  		<listitem><literal>@BusinessProcess</literal>：限制指定流程定义的事件。
			比如：<literal>@Observes @BusinessProcess(&quot;billingProcess&quot;) BusinessProcessEvent evt</literal>
	  		</listitem>
	  		<listitem><literal>@StartActivity</literal>：限制指定环节的事件。比如：
	  		<literal>@Observes @StartActivity(&quot;shipGoods&quot;) BusinessProcessEvent evt</literal> 在进入id为&quot;shipGoods&quot;的环节时会触发。
	  		</listitem>
	  		<listitem><literal>@EndActivity</literal>：限制指定环节的事件。比如：
	  		<literal>@Observes @EndActivity(&quot;shipGoods&quot;) BusinessProcessEvent evt</literal> 在离开id为&quot;shipGoods&quot;的环节时会触发
	  		</listitem>
	  		<listitem><literal>@TakeTransition</literal>：限制指定连线的事件。
	  		</listitem>
	  	</itemizedlist>
		修饰命名可以自由组合。比如，为了接收&quot;shipmentProcess&quot;流程中所有离开&quot;shipGoods&quot;环节的事件，
		我们可以编写如下监听方法：
<programlisting>
public void beforeShippingGoods(@Observes @BusinessProcess(&quot;shippingProcess&quot;) @EndActivity(&quot;shipGoods&quot;) BusinessProcessEvent evt) {
	// handle event
}
	  	</programlisting>
		默认配置下，事件监听器是同步调用，并在同一个事务环境中。
		CDI事务性监听器（只在JavaEE / EJB环境下有效），可以控制监听器什么时候处理事件，
		比如，我们可以保证监听器只在事件中的事务成功之后才处理：
<programlisting>
public void onShipmentSuceeded(@Observes(during=TransactionPhase.AFTER_SUCCESS) @BusinessProcess(&quot;shippingProcess&quot;) @EndActivity(&quot;shipGoods&quot;) BusinessProcessEvent evt) {
	// send email to customer.
}
</programlisting>

	  	</para>
	</section>
	<section>
	  	<title>更多功能</title>
	  	<itemizedlist>
	  		<listitem>流程引擎和服务都可以注入：<literal>@Inject ProcessEngine, RepositoryService, TaskService</literal>, ...</listitem>
	  		<listitem>当前流程实例和任务可以注入：<literal>@Inject ProcessInstance, Task</literal>,</listitem>
	  		<listitem>当前业务标识可以注入：<literal>@Inject @BusinessKey String businessKey</literal>,</listitem>
	  		<listitem>当前流程实例id可以注入 ：<literal>@Inject @ProcessInstanceId String pid</literal>,</listitem>
	  	</itemizedlist>
	</section>
  </section>
  <section>
	  	<title>已知的问题</title>
	  	<para>
		虽然activiti-cdi已经使用了SPI，并设计为“可移植扩展”，但是只在Weld下测试过。
	  	</para>
	</section>
</chapter>

