<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="springintegration">
  <title>Spring集成</title>

  <para>
  虽然没有Spring你也可以使用Activiti，但是我们提供了一些非常不错的集成特性。这一章我们将介绍这些特性。
  </para>

  <section>
    <title>ProcessEngineFactoryBean</title>

    <para>
	 可以把流程引擎（<literal>ProcessEngine</literal>）作为一个普通的Spring bean进行配置。
	 类 <literal>org.activiti.spring.ProcessEngineFactoryBean</literal>是集成的切入点。
	 这个bean需要一个流程引擎配置来创建流程引擎。这也意味着在文档的<link linkend="configuration">配置这一章</link>的介绍属性的创建和配置对于Spring来说也是一样的。对于Spring集成的配置和流程引擎bean看起来像这样：
    <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
    ...
&lt;/bean&gt;

&lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;
  &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;
&lt;/bean&gt;
  </programlisting>
	  注意现在使用的 <literal>processEngineConfiguration</literal> bean 是 <literal>org.activiti.spring.SpringProcessEngineConfiguration</literal> 类。
    </para>
  </section>

  <section>
    <title>事务</title>
    <para>
	我们将会一步一步地解释在Spring examples中公布的 <literal>SpringTransactionIntegrationTest</literal>
	下面是我们使用这个例子的Spring配置文件（你可以在SpringTransactionIntegrationTest-context.xml找到它）以下展示的部分包括数据源（dataSource），
	事务管理器（transactionManager），流程引擎（processEngine）和Activiti引擎服务。
    </para>
    <para>当把数据源（DataSource）传递给 <literal>SpringProcessEngineConfiguration</literal> （使用"dataSource"属性）之后，Activiti内部使用了一个<literal>org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy</literal>代理来封装传递进来的数据源（DataSource）。
	这样做是为了确保从数据源（DataSource）获取的SQL连接能够与Spring的事物结合在一起发挥得更出色。这意味它不再需要在你的Spring配置中代理数据源（dataSource）了。
	然而它仍然允许你传递一个<literal>TransactionAwareDataSourceProxy</literal>到<literal>SpringProcessEngineConfiguration</literal>中。在这个例子中并不会发生多余的包装。
    </para>
    <para>
      <emphasis role="bold">
	  为了确保在你的Spring配置中申明的一个<literal>TransactionAwareDataSourceProxy</literal>，你不能把使用它的应用交给Spring事物控制的资源。（例如 DataSourceTransactionManager 和JPATransactionManager需要非代理的数据源 ）</emphasis>
    </para>
    <programlisting>
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;&gt;

  &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.SimpleDriverDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;org.h2.Driver&quot; /&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
    &lt;property name=&quot;username&quot; value=&quot;sa&quot; /&gt;
    &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;
    &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;repositoryService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getRepositoryService&quot; /&gt;
  &lt;bean id=&quot;runtimeService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getRuntimeService&quot; /&gt;
  &lt;bean id=&quot;taskService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getTaskService&quot; /&gt;
  &lt;bean id=&quot;historyService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getHistoryService&quot; /&gt;
  &lt;bean id=&quot;managementService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getManagementService&quot; /&gt;

...</programlisting>
  <para>Spring配置文件的其余部分包含beans和我们将要在这个特有的例子中的配置：</para>
  <programlisting>
&lt;beans&gt;
  ...
  &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;

  &lt;bean id=&quot;userBean&quot; class=&quot;org.activiti.spring.test.UserBean&quot;&gt;
    &lt;property name=&quot;runtimeService&quot; ref=&quot;runtimeService&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;printer&quot; class=&quot;org.activiti.spring.test.Printer&quot; /&gt;

&lt;/beans&gt;</programlisting>
    <para>
	首先使用任意的一种Spring创建应用上下文的方式创建其Spring应用上下文。在这个例子中你可以使用类路径下面的XML资源来配置我们的Spring应用上下文：
	<programlisting>ClassPathXmlApplicationContext applicationContext =
    new ClassPathXmlApplicationContext(&quot;org/activiti/examples/spring/SpringTransactionIntegrationTest-context.xml&quot;);</programlisting>
    或者, 如果它是一个测试的话:
    <programlisting>@ContextConfiguration(&quot;classpath:org/activiti/spring/test/transaction/SpringTransactionIntegrationTest-context.xml&quot;)</programlisting>
    </para>
    <para>然后我们就可以得到Activiti的服务beans并且调用该服务上面的方法。ProcessEngineFactoryBean将会对该服务添加一些额外的拦截器，在Activiti服务上面的方法使用的是
	Propagation.REQUIRED事物语义。所以，我们可以使用repositoryService去部署一个流程，如下所示：
    </para>
    <programlisting>RepositoryService repositoryService = (RepositoryService) applicationContext.getBean(&quot;repositoryService&quot;);
String deploymentId = repositoryService
  .createDeployment()
  .addClasspathResource(&quot;org/activiti/spring/test/hello.bpmn20.xml&quot;)
  .deploy()
  .getId();
    </programlisting>
    <para>
	其他相同的服务也是同样可以这么使用。在这个例子中，Spring的事物将会围绕在userBean.hello()上，并且调用Activiti服务的方法也会加入到这个事物中。
    </para>
    <programlisting>UserBean userBean = (UserBean) applicationContext.getBean(&quot;userBean&quot;);
userBean.hello();</programlisting>
    <para>
	这个UserBean看起来像这样。记得在上面Spring bean的配置中我们把repositoryService注入到userBean中。</para>
    <programlisting>public class UserBean {

  /** 由Spring注入 */
  private RuntimeService runtimeService;

  @Transactional
  public void hello() {
	//这里，你可以在你们的领域模型中做一些事物处理。
	//当在调用Activiti RuntimeService的startProcessInstanceByKey方法时，
	//它将会结合到同一个事物中。
    runtimeService.startProcessInstanceByKey(&quot;helloProcess&quot;);
  }

  public void setRuntimeService(RuntimeService runtimeService) {
    this.runtimeService = runtimeService;
  }
}</programlisting>
  </section>

  <section id="springExpressions">
    <title>表达式</title>
    <para>当使用ProcessEngineFactoryBean时候，默认情况下，在BPMN流程中的所有<link linkend="apiExpressions">表达式</link>都将会'看见'所有的Spring beans。
	它可以限制你在表达式中暴露出的beans或者甚至可以在你的配置中使用一个Map不暴露任何beans。下面的例子暴露了一个单例bean（printer），可以把"printer"当作关键字使用.
   <emphasis role="bold">想要不暴露任何beans，仅仅只需要在SpringProcessEngineConfiguration中传递一个空的list作为'beans'的属性。当不设置'beans'的属性时，在应用上下文中Spring beans都是可以使用的。</emphasis></para>
    <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
  ...
  &lt;property name=&quot;beans&quot;&gt;
    &lt;map&gt;
      &lt;entry key=&quot;printer&quot; value-ref=&quot;printer&quot; /&gt;
    &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;

  &lt;bean id=&quot;printer&quot; class=&quot;org.activiti.examples.spring.Printer&quot; /&gt;
    </programlisting>

    <para>现在暴露出来的beans就可以在表达式中使用：例如，在SpringTransactionIntegrationTest中的 <literal>hello.bpmn20.xml</literal>展示的是如何使用UEL方法表达式去调用Spring bean的方法：
    </para>
    <programlisting>&lt;definitions id=&quot;definitions&quot; ...>

  &lt;process id=&quot;helloProcess&quot;&gt;

    &lt;startEvent id=&quot;start&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;start&quot; targetRef=&quot;print&quot; /&gt;

    &lt;serviceTask id=&quot;print&quot; <emphasis role="bold">activiti:expression=&quot;#{printer.printMessage()}&quot;</emphasis> /&gt;
    &lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;print&quot; targetRef=&quot;end&quot; /&gt;

    &lt;endEvent id=&quot;end&quot; /&gt;

  &lt;/process&gt;

&lt;/definitions&gt;</programlisting>
    <para>这里的 <literal>Printer</literal> 看起来像这样：</para>
    <programlisting>public class Printer {

  public void printMessage() {
    System.out.println(&quot;hello world&quot;);
  }
}</programlisting>
    <para>并且Spring bean的配置（如上文所示）看起来像这样：</para>
    <programlisting>&lt;beans ...>
  ...

  &lt;bean id=&quot;printer&quot; class=&quot;org.activiti.examples.spring.Printer&quot; /&gt;

&lt;/beans&gt;</programlisting>
  </section>

  <section>
    <title>资源的自动部署</title>
    <para>Spring的集成也有一个专门用于对资源部署的特性。在流程引擎的配置中，你可以指定一组资源。当流程引擎被创建的时候，
	所有在这里的资源都将会被自动扫描与部署。在这里有过滤以防止资源重新部署，只有当这个资源真正发生改变的时候，它才会向Activiti使用的数据库创建新的部署。
	这对于很多用例来说，当Spring容器经常重启的情况下（例如 测试），使用它是非常不错的选择。
    </para>
    <para>这里有一个例子：</para>
    <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
  ...
  <emphasis role="bold">&lt;property name=&quot;deploymentResources&quot; value=&quot;classpath*:/org/activiti/spring/test/autodeployment/autodeploy.*.bpmn20.xml&quot; /&gt;</emphasis>
&lt;/bean&gt;

&lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;
  &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;
&lt;/bean&gt;</programlisting>
  </section>

  <section id="springUnitTest">
    <title>单元测试</title>
    <para>
	当集成Spring时，使用标准的<link linkend="apiUnitTesting">Activiti测试工具类</link>是非常容易的对业务流程进行测试。
	下面的例子展示了如何在一个典型的基于Spring单元测试测试业务流程：
      <programlisting>
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(&quot;classpath:org/activiti/spring/test/junit4/springTypicalUsageTest-context.xml&quot;)
public class MyBusinessProcessTest {

  @Autowired
  private RuntimeService runtimeService;

  @Autowired
  private TaskService taskService;

  @Autowired
  @Rule
  public ActivitiRule activitiSpringRule;

  @Test
  @Deployment
  public void simpleProcessTest() {
    runtimeService.startProcessInstanceByKey(&quot;simpleProcess&quot;);
    Task task = taskService.createTaskQuery().singleResult();
    assertEquals(&quot;My Task&quot;, task.getName());

    taskService.complete(task.getId());
    assertEquals(0, runtimeService.createProcessInstanceQuery().count());

  }
}
      </programlisting>
	  注意对于这种方式，你需要在Spring配置中（在上文的例子中它是自动注入的）定义一个<emphasis>org.activiti.engine.test.ActivitiRule</emphasis>bean
      <programlisting>
&lt;bean id=&quot;activitiRule&quot; class=&quot;org.activiti.engine.test.ActivitiRule&quot;&gt;
  &lt;property name=&quot;processEngine&quot; ref=&quot;processEngine&quot; /&gt;
&lt;/bean&gt;
      </programlisting>
    </para>
  </section>

  <section id="spring.enable.activiti.annotation">

    <title>基于注解的配置</title>

    <para>
        [试验] <emphasis>@EnableActiviti</emphasis>注解相对较新，未来可能会有变更。
    </para>

    <para>
        除了基于XML的配置以外，还可以选择基于注解的方式来配置Spring环境。
		这与使用XML的方法非常相似，除了要使用<emphasis>@Bean</emphasis>注解，
		而且配置是使用java编写的。
		它已经可以直接用于Activiti-Spring的集成了：
    </para>

    <para>
        首先介绍（需要Spring 3.0+）的是<emphasis>@EnableActiviti</emphasis>注解。
		最简单的用法如下所示：
        <programlisting>
  @Configuration
  @EnableActiviti
  public static class SimplestConfiguration {

  }</programlisting>
        它会创建一个Spring环境，并对Activiti流程引擎进行如下配置
          <itemizedlist>
            <listitem>
              <para>
                默认的内存H2数据库，启用数据库自动升级。
              </para>
            </listitem>
            <listitem>
              <para>
                一个简单的 <emphasis>DataSourceTransactionManager</emphasis>
              </para>
            </listitem>
            <listitem>
              <para>
                一个默认的 <emphasis>SpringJobExecutor</emphasis>
              </para>
            </listitem>
            <listitem>
              <para>
                自动扫描 <emphasis>processes/</emphasis> 目录下的bpmn20.xml文件。
              </para>
            </listitem>
          </itemizedlist>
          在这样一个环境里，可以直接通过注入操作Activiti引擎：
          <programlisting>
  @Autowired
  private ProcessEngine processEngine;

  @Autowired
  private RuntimeService runtimeService;

  @Autowired
  private TaskService taskService;

  @Autowired
  private HistoryService historyService;

  @Autowired
  private RepositoryService repositoryService;

  @Autowired
  private ManagementService managementService;

  @Autowired
  private FormService formService;</programlisting>
    </para>

    <para>
        当然，默认值都可以自定义。比如，如果配置了DataSource，它就会代替默认创建的数据库配置。
		事务管理器，job执行器和其他组件都与之相同。
		比如如下配置：
        <programlisting>
  @Configuration
  @EnableActiviti
  public static class Config {

    @Bean
    public DataSource dataSource() {
        BasicDataSource basicDataSource = new BasicDataSource();
        basicDataSource.setUsername(&quot;sa&quot;);
        basicDataSource.setUrl(&quot;jdbc:h2:mem:anotherDatabase&quot;);
        basicDataSource.setDefaultAutoCommit(false);
        basicDataSource.setDriverClassName(org.h2.Driver.class.getName());
        basicDataSource.setPassword(&quot;&quot;);
        return basicDataSource;
    }

  }</programlisting>
        其他数据库会代替默认的。
    </para>

    <para>
        下面介绍了更加复杂的配置。注意<emphasis>AbstractActivitiConfigurer</emphasis>用法，
		它暴露了流程引擎的配置，可以用来对它的细节进行详细的配置。
        <programlisting>
@Configuration
@EnableActiviti
@EnableTransactionManagement(proxyTargetClass = true)
class JPAConfiguration {

    @Bean
    public OpenJpaVendorAdapter openJpaVendorAdapter() {
        OpenJpaVendorAdapter openJpaVendorAdapter = new OpenJpaVendorAdapter();
        openJpaVendorAdapter.setDatabasePlatform(H2Dictionary.class.getName());
        return openJpaVendorAdapter;
    }

    @Bean
    public DataSource dataSource() {
        BasicDataSource basicDataSource = new BasicDataSource();
        basicDataSource.setUsername(&quot;sa&quot;);
        basicDataSource.setUrl(&quot;jdbc:h2:mem:activiti&quot;);
        basicDataSource.setDefaultAutoCommit(false);
        basicDataSource.setDriverClassName(org.h2.Driver.class.getName());
        basicDataSource.setPassword(&quot;&quot;);
        return basicDataSource;
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean(
        OpenJpaVendorAdapter openJpaVendorAdapter, DataSource ds) {
        LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
        emf.setPersistenceXmlLocation(&quot;classpath:/org/activiti/spring/test/jpa/custom-persistence.xml&quot;);
        emf.setJpaVendorAdapter(openJpaVendorAdapter);
        emf.setDataSource(ds);
        return emf;
    }

    @Bean
    public PlatformTransactionManager jpaTransactionManager(
        EntityManagerFactory entityManagerFactory) {
        return new JpaTransactionManager(entityManagerFactory);
    }

    @Bean
    public AbstractActivitiConfigurer abstractActivitiConfigurer(
        final EntityManagerFactory emf,
        final PlatformTransactionManager transactionManager) {

        return new AbstractActivitiConfigurer() {

            @Override
            public void postProcessSpringProcessEngineConfiguration(SpringProcessEngineConfiguration engine) {
                engine.setTransactionManager(transactionManager);
                engine.setJpaEntityManagerFactory(emf);
                engine.setJpaHandleTransaction(false);
                engine.setJobExecutorActivate(false);
                engine.setJpaCloseEntityManager(false);
                engine.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);
            }
        };
    }

    // A random bean
    @Bean
    public LoanRequestBean loanRequestBean() {
        return new LoanRequestBean();
    }
}</programlisting>
    </para>

  </section>

  <section>
    <title>JPA 和 Hibernate 4.2.x</title>

    <para>
	  在Activiti引擎的serviceTask或listener中使用Hibernate 4.2.x JPA时，需要添加Spring ORM这个额外的依赖。
	  Hibernate 4.1.x及以下版本是不需要的。应该添加如下依赖：
      <programlisting>
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
  &lt;version&gt;${org.springframework.version}&lt;/version&gt;
&lt;/dependency&gt;
      </programlisting>
    </para>
  </section>

</chapter>
