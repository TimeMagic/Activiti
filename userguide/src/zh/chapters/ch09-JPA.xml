<?xml version="1.0" encoding="UTF-8"?>

<chapter>

  <title>JPA</title>

  <para>
	你可以使用JPA实体作为流程变量，并且可以这样做：
    <itemizedlist>
      <listitem><para>基于流程变量更新已有的JPA实体，它可以在用户任务的表单中填写或者由服务任务生成。</para></listitem>
      <listitem><para>重用已有的领域模型不需要编写显示的服务获取实体或者更新实体的值。</para></listitem>
      <listitem><para>根据已有实体的属性做出判断（网关即分支聚合）。</para></listitem>
      <listitem><para>...</para></listitem>
    </itemizedlist>
  </para>

  <section>
    <title>要求</title>
    <para>
	  只支持符合以下要求的实体：
      <itemizedlist>
        <listitem>
          <para>实体应该使用JPA注解进行配置，我们支持字段和属性访问两种方式。@MappedSuperclass也能够被使用。</para>
        </listitem>
        <listitem>
          <para>
			实体中应该有一个使用<literal>@Id</literal>注解的主键，不支持复合主键
			(<literal>@EmbeddedId</literal> 和 <literal>@IdClass</literal>)。Id 字段/属性能够使用JPA规范支持的任意类型：
            原生态数据类型和他们的包装类型（boolean除外），<literal>String</literal>, <literal>BigInteger</literal>, <literal>BigDecimal</literal>,
            <literal>java.util.Date</literal> 和 <literal>java.sql.Date</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

   <section id="jpaconfiguration">
    <title>配置</title>
    <para>为了能够使用JPA的实体，引擎必须有一个对<literal>EntityManagerFactory</literal>的引用。
	这可以通过配置引用或者提供一个持久化单元名称。作为变量的JPA实体将会被自动检测并进行相应的处理</para>
    <para>
		下面例子中的配置是使用jpaPersistenceUnitName：
        <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration&quot;&gt;

    &lt;!-- 数据库的配置 --&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:JpaVariableTest;DB_CLOSE_DELAY=1000&quot; /&gt;

    <emphasis role="bold">&lt;property name=&quot;jpaPersistenceUnitName&quot; value=&quot;activiti-jpa-pu&quot; /&gt;
    &lt;property name=&quot;jpaHandleTransaction&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;jpaCloseEntityManager&quot; value=&quot;true&quot; /&gt;</emphasis>

    &lt;!-- job executor configurations --&gt;
    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;

    &lt;!-- mail server configurations --&gt;
    &lt;property name=&quot;mailServerPort&quot; value=&quot;5025&quot; /&gt;
&lt;/bean&gt;
        </programlisting>
		接下来例子中的配置提供了一个我们自定义的<literal>EntityManagerFactory</literal>(在这个例子中，使用了OpenJPA 实体管理器)。注意该代码片段仅仅包含与例子相关的beans，去掉了其他beans。OpenJPA实体管理的完整并可以使用的例子可以在activiti-spring-examples(<literal>/activiti-spring/src/test/java/org/activiti/spring/test/jpa/JPASpringTest.java</literal>)中找到。
        <programlisting>
&lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;
  &lt;property name=&quot;persistenceUnitManager&quot; ref=&quot;pum&quot;/&gt;
  &lt;property name=&quot;jpaVendorAdapter&quot;&gt;
    &lt;bean class=&quot;org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter&quot;&gt;
      &lt;property name=&quot;databasePlatform&quot; value=&quot;org.apache.openjpa.jdbc.sql.H2Dictionary&quot; /&gt;
    &lt;/bean&gt;
  &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
  &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;
  &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
  <emphasis role="bold">&lt;property name=&quot;jpaEntityManagerFactory&quot; ref=&quot;entityManagerFactory&quot; /&gt;
  &lt;property name=&quot;jpaHandleTransaction&quot; value=&quot;true&quot; /&gt;
  &lt;property name=&quot;jpaCloseEntityManager&quot; value=&quot;true&quot; /&gt;</emphasis>
  &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
&lt;/bean&gt;
        </programlisting>
		同样的配置也可以在编程式创建一个引擎时完成，例如：
        <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration
  .createProcessEngineConfigurationFromResourceDefault()
  <emphasis role="bold">.setJpaPersistenceUnitName("activiti-pu")</emphasis>
  .buildProcessEngine();
        </programlisting>
        </para>
        <para>
        配置属性：
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold"><literal>jpaPersistenceUnitName: </literal></emphasis>
			  使用持久化单元的名称（要确保该持久化单元在类路径下是可用的）。根据该规范，默认的路径是<literal>/META-INF/persistence.xml</literal>)。要么使用 <literal>jpaEntityManagerFactory</literal> 或者<literal>jpaPersistenceUnitName</literal>。
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold"><literal>jpaEntityManagerFactory: </literal></emphasis>
			  一个实现了<literal>javax.persistence.EntityManagerFactory</literal>的bean的引用。它将被用来加载实体并且刷新更新。要么使用<literal>jpaEntityManagerFactory</literal> 或者<literal>jpaPersistenceUnitName</literal>。
            </para>
          </listitem>
           <listitem>
            <para>
              <emphasis role="bold"><literal>jpaHandleTransaction: </literal></emphasis>
			  在被使用的<literal>EntityManager</literal> 实例上，该标记表示流程引擎是否需要开始和提交/回滚事物。当使用<literal>Java事物API（JTA）</literal>时，设置为false。
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold"><literal>jpaCloseEntityManager: </literal></emphasis>
			  该标记表示流程引擎是否应该关闭从 <literal>EntityManagerFactory</literal>获取的 <literal>EntityManager</literal>的实例。当<literal>EntityManager</literal> 是由容器管理的时候需要设置为false（例如 当使用并不是单一事物作用域的扩展持久化上下文的时候）。
            </para>
          </listitem>
        </itemizedlist>
      </para>
  </section>
  <section>
    <title>用法</title>
    <section>
      <title>简单例子</title>
      <para>
	  使用JPA变量的例子可以在
       <literal><ulink url="http://svn.codehaus.org/activiti/activiti/trunk/modules/activiti-engine/src/test/java/org/activiti/standalone/jpa/JPAVariableTest.java">JPAVariableTest</ulink></literal>中找到。我们将会一步一步的解释<literal>JPAVariableTest.testUpdateJPAEntityValues</literal>。
	  </para>
      <para>
		首先，我们需要创建一个基于<literal>META-INF/persistence.xml</literal>的<literal>EntityManagerFactory</literal>作为我们的持久化单元。它包含持久化单元中所有的类和一些供应商特定的配置。
      </para>
      <para>
		我们将使用一个简单的实体作为测试，其中包含有一个id和<literal>String</literal> 类型的value属性，这也将会被持久化。在允许测试之前，我们创建一个实体并且保存它。
        <programlisting>
@Entity(name = "JPA_ENTITY_FIELD")
public class FieldAccessJPAEntity {

  @Id
  @Column(name = "ID_")
  private Long id;

  private String value;

  public FieldAccessJPAEntity() {
    // Empty constructor needed for JPA
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }
}
        </programlisting>
      </para>
      <para>
		我们启动一个新的流程实例，添加一个实体作为变量。至于其他的变量，它们将会被存储在流程引擎的持久化数据库中。下一次获取该变量的时候，它将会根据该类和存储Id从<literal>EntityManager</literal>中加载。
        <programlisting>
Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();
variables.put("entityToUpdate", entityToUpdate);

ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("UpdateJPAValuesProcess", variables);
        </programlisting>
      </para>
      <para>
		在我们的流程定义中的第一个节点是一个<literal>服务任务</literal>，它将会调用<literal>entityToUpdate</literal>上的<literal>setValue</literal>方法，它其实就是我们之前在启动流程实例时候设置的JPA变量并且它将会从当前流程引擎的上下文关联的<literal>EntityManager</literal>中加载。
        <programlisting>
&lt;serviceTask id='theTask' name='updateJPAEntityTask' activiti:expression=&quot;${entityToUpdate.setValue('updatedValue')}&quot; /&gt;
        </programlisting>
      </para>
      <para>
		当完成服务任务时，流程实例将会停留在流程定义中定义的用户任务环节上。这时我们就可以查看该流程实例。与此同时，<literal>EntityManager</literal>已经被刷新了并且改变的实体已经被保存进数据库中。当我们获取<literal>entityToUpdate</literal>的变量value时，该实体将会被再次加载并且我们获取该实体属性的<literal>值</literal> 将会是 <literal>updatedValue</literal>。
        <programlisting>
// Servicetask in process 'UpdateJPAValuesProcess' should have set value on entityToUpdate.
Object updatedEntity = runtimeService.getVariable(processInstance.getId(), "entityToUpdate");
assertTrue(updatedEntity instanceof FieldAccessJPAEntity);
assertEquals("updatedValue", ((FieldAccessJPAEntity)updatedEntity).getValue());
        </programlisting>
      </para>
    </section>

    <section>
      <title>查询JPA流程变量</title>
      <para>
		你可以查询某一JPA实体作为变量的<literal>ProcessInstance</literal>s 和 <literal>Execution</literal>s 。
        <emphasis role="bold">注意，在<literal>ProcessInstanceQuery</literal> 和 <literal>ExecutionQuery</literal>查询中仅仅<literal>variableValueEquals(name, entity)</literal>
		支持JPA实体变量 </emphasis>。
        方法 <literal>variableValueNotEquals</literal>, <literal>variableValueGreaterThan</literal>, <literal>variableValueGreaterThanOrEqual</literal>, <literal>variableValueLessThan</literal>
        和 <literal>variableValueLessThanOrEqual</literal>并不被支持并且传递JPA实体值的时候会抛出一个<literal>ActivitiException</literal>。
        <programlisting>
 ProcessInstance result = runtimeService.createProcessInstanceQuery().variableValueEquals("entityToQuery", entityToQuery).singleResult();
        </programlisting>
      </para>
    </section>

    <section>
      <title>使用Spring beans和JPA结合的高级例子</title>
      <para>
	  一个更加高级的例子，<literal>JPASpringTest</literal>，可以在<literal>activiti-spring-examples</literal>中找到。它描述了如下简单的使用情况：
        <itemizedlist>
          <listitem>
            <para>已经存在了一个使用JPA实体的Spring-bean，它用来存储贷款申请。</para>
          </listitem>
           <listitem>
            <para>
			使用Activiti，我们可以通过已经存在的bean获取已经使用的实体，并使用它作为变量用于我们的流程中。</para>
            <para>
				按照下面的步骤定义流程：
               <itemizedlist>
                <listitem>
                  <para>
				  服务任务，创建一个新的贷款申请，使用已经存在的<literal>LoanRequestBean</literal> 接受启动流程时候的变量（例如 可以来自流程启动时候的表单）。
				  使用<literal>activiti:resultVariable</literal>（它作为一个变量对表达式返回的结果进行存储）将创建出来的实体作为变量进行存储。
                  </para>
                </listitem>
                <listitem><para>
				用户任务，允许经理查看贷款申请，并填入审批意见(同意/不同意)，审批意见将作为一个boolean变量<literal>approvedByManager</literal>进行存储</para></listitem>
                <listitem><para>
				服务任务，更新贷款申请实体因此该实体与流程保持同步</para></listitem>
                <listitem>
                  <para>
				  根据贷款申请实体变量<literal>approved</literal>的值，将利用唯一网关（BPMN2规范）自动决定下一步该选择那一条路径：当申请批准，流程结束。否则，一个额外的任务将会使用
				  （发送拒绝信），所以这样就是可以让拒绝信手动通知客户。
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </itemizedlist>
		请注意该流程并不包含任何表单，因为它仅仅被用于单元测试。
        <mediaobject><imageobject><imagedata align="center" fileref="images/jpa.spring.example.process.png"/></imageobject></mediaobject>
      </para>
      <para>
        <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions id=&quot;taskAssigneeExample&quot;
  xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
  targetNamespace=&quot;org.activiti.examples&quot;&gt;

  &lt;process id=&quot;LoanRequestProcess&quot; name=&quot;Process creating and handling loan request&quot;&gt;
    &lt;startEvent id='theStart' /&gt;
    &lt;sequenceFlow id='flow1' sourceRef='theStart' targetRef='createLoanRequest' /&gt;

    &lt;serviceTask id='createLoanRequest' name='Create loan request'
      activiti:expression=&quot;${loanRequestBean.newLoanRequest(customerName, amount)}&quot;
      activiti:resultVariable=&quot;loanRequest&quot;/&gt;
    &lt;sequenceFlow id='flow2' sourceRef='createLoanRequest' targetRef='approveTask' /&gt;

    &lt;userTask id=&quot;approveTask&quot; name=&quot;Approve request&quot; /&gt;
    &lt;sequenceFlow id='flow3' sourceRef='approveTask' targetRef='approveOrDissaprove' /&gt;

    &lt;serviceTask id='approveOrDissaprove' name='Store decision'
      activiti:expression=&quot;${loanRequest.setApproved(approvedByManager)}&quot; /&gt;
    &lt;sequenceFlow id='flow4' sourceRef='approveOrDissaprove' targetRef='exclusiveGw' /&gt;

    &lt;exclusiveGateway id=&quot;exclusiveGw&quot; name=&quot;Exclusive Gateway approval&quot; /&gt;
    &lt;sequenceFlow id=&quot;endFlow1&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;theEnd&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${loanRequest.approved}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;
    &lt;sequenceFlow id=&quot;endFlow2&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;sendRejectionLetter&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${!loanRequest.approved}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;

    &lt;userTask id=&quot;sendRejectionLetter&quot; name=&quot;Send rejection letter&quot; /&gt;
    &lt;sequenceFlow id='flow5' sourceRef='sendRejectionLetter' targetRef='theOtherEnd' /&gt;

    &lt;endEvent id='theEnd' /&gt;
    &lt;endEvent id='theOtherEnd' /&gt;
  &lt;/process&gt;

&lt;/definitions&gt;

        </programlisting>
      </para>
      <para>虽然上面的例子非常的简单，但是它却展示了JPA结合Spring和参数化方法表达式的强大优势。这样所有的流程就不需要自定义java代码（当然，除了Spring bean之外）
	  并且大幅度的加快了流程部署。
      </para>
    </section>
  </section>
</chapter>